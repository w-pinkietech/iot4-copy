[
    {
        "id": "baa69f6c03978bf4",
        "type": "tab",
        "label": "PI・JIG・I2C・GPIO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5991e0363629fd30",
        "type": "tab",
        "label": "ダッシュボード",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "81159351db9223bf",
        "type": "tab",
        "label": "デバイス登録",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce55e77ffc367d5a",
        "type": "tab",
        "label": "センサーログ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b336f5f9ef68ac3",
        "type": "tab",
        "label": "BLEトランスミッター",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fd4a567e7561fa40",
        "type": "tab",
        "label": "ルーター",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ecf79cf3748850a8",
        "type": "tab",
        "label": "モジュール",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "51957a5eab717266",
        "type": "tab",
        "label": "設定",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d4457c90808f33a",
        "type": "tab",
        "label": "その他",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f89f5e3b86cd59d6",
        "type": "subflow",
        "name": "Tab Transition",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 640,
                "y": 100,
                "wires": [
                    {
                        "id": "2a6ad2b8af70ae53",
                        "port": 0
                    }
                ]
            },
            {
                "x": 640,
                "y": 140,
                "wires": [
                    {
                        "id": "2a6ad2b8af70ae53",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "name",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c91ae0a3d8355cfb",
        "type": "subflow",
        "name": "Type2Config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "b62e3e6518e4b726"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 40,
                "wires": [
                    {
                        "id": "b62e3e6518e4b726",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8ebeefef09059e86",
        "type": "subflow",
        "name": "Str2Json",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "2ac11319931d3dee"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 140,
                "wires": [
                    {
                        "id": "0d19f81056330b71",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cb5ec79ce8b445f4",
        "type": "subflow",
        "name": "Init Config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "5fc3687e75316320"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 660,
                "wires": [
                    {
                        "id": "79c68c7f13f85e55",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9a1bb339c6988af7",
        "type": "subflow",
        "name": "Update Sensor",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 220,
                "wires": [
                    {
                        "id": "652b702bf57adc41"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 220,
                "wires": [
                    {
                        "id": "b0849cc72750c3c5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9240fdb206d57ffc",
        "type": "subflow",
        "name": "All Devices",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 80,
                "wires": [
                    {
                        "id": "8ef24e1f1c230e2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1360,
                "y": 120,
                "wires": [
                    {
                        "id": "102e11f5e7e0f354",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6e08da7314bcfdec",
        "type": "subflow",
        "name": "Update Device",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 260,
                "wires": [
                    {
                        "id": "a40bc34bb399ae5b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 260,
                "wires": [
                    {
                        "id": "b21d6e104cea9579",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5c990f7436d9ded3",
        "type": "subflow",
        "name": "IP",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "06902b959d6c6e2f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 180,
                "wires": [
                    {
                        "id": "26f87b1a351b4cd3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8d853eb576531593",
        "type": "subflow",
        "name": "BravePI Output",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 120,
                "wires": [
                    {
                        "id": "b6be711ea788548f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "b6be711ea788548f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "42c8431b583bf850",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "8a4b8bc221729a4a",
                "bd0e300bc81f7fb8"
            ]
        ]
    },
    {
        "id": "36a3647b66a0f7b6",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 480,
        "wires": [
            [
                "7cbd0a49d247a69f",
                "5c9ac5b623a8fe4a"
            ]
        ]
    },
    {
        "id": "2d5bc8c58a052fd2",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "c596955abb37f37f",
                "dafb0f602f940f05"
            ]
        ]
    },
    {
        "id": "57bc87b92932021d",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 360,
        "wires": [
            [
                "4266ca640af97e95",
                "9480cea22558c9d8"
            ]
        ]
    },
    {
        "id": "9ee9c7596d476a5b",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 400,
        "wires": [
            [
                "86e29599cf578540",
                "fd17ee49215559da"
            ]
        ]
    },
    {
        "id": "16786823dc4e2faf",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 440,
        "wires": [
            [
                "bf8c186f35ec5453",
                "c3aeffaf206174cb"
            ]
        ]
    },
    {
        "id": "5d275a24c5ddcc27",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "a9fbb3abcb4fea7f",
                "fe16493cd7257765"
            ]
        ]
    },
    {
        "id": "971f9366fc2cb029",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 240,
        "wires": [
            [
                "d473457853b8ca0b",
                "cdcccd76d2c21941"
            ]
        ]
    },
    {
        "id": "047f011ab2143b91",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 670,
        "y": 2720,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "e562af2f0685a748",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 2800,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "d94b646abbe152de",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 2880,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "6bd22c2cd2c75580",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 3040,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "65f8bc0ac8deb6c0",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 3120,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "9f633645468cd11f",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 2960,
        "wires": [
            [
                "a81a6cd0c7ae9412"
            ]
        ]
    },
    {
        "id": "50a0fb568a4136d3",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 360,
        "y": 3900,
        "wires": [
            [
                "d92d6351354c8301",
                "41a0aaec675b2f30"
            ]
        ]
    },
    {
        "id": "e08276216a725956",
        "type": "junction",
        "z": "ce55e77ffc367d5a",
        "x": 200,
        "y": 560,
        "wires": [
            [
                "51ec08a816b1d784"
            ]
        ]
    },
    {
        "id": "b8ccf3e74204dda7",
        "type": "junction",
        "z": "6e08da7314bcfdec",
        "x": 380,
        "y": 180,
        "wires": [
            [
                "e9c520851c914045"
            ]
        ]
    },
    {
        "id": "04a0a5e9decaeb22",
        "type": "junction",
        "z": "6e08da7314bcfdec",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "f3466737ae1cdae7"
            ]
        ]
    },
    {
        "id": "e66a51b64fdb41e7",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "69f7ee92d3a9d03f",
                "ced23ad6b5a37f80"
            ]
        ]
    },
    {
        "id": "d3f046fbfba01c2c",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 680,
        "wires": [
            [
                "5f482bfd43a3d213",
                "e7f4c56e566cbd1a"
            ]
        ]
    },
    {
        "id": "4db83d6bb1426831",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 720,
        "wires": [
            [
                "56aae8ca29d903b3",
                "25354f756ef14efd"
            ]
        ]
    },
    {
        "id": "5ab4dc3ee694e62f",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 760,
        "wires": [
            [
                "43bbbb7db9589186",
                "4b7af78c204338f4"
            ]
        ]
    },
    {
        "id": "41b5997260fa5d1f",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "11ebbe710d069c6e",
                "8a203ecd2c9b30d0"
            ]
        ]
    },
    {
        "id": "6b8b2a322007e0e8",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 840,
        "wires": [
            [
                "2071f003bb488a21",
                "3080a28270f4d6b9"
            ]
        ]
    },
    {
        "id": "f5155c9073d06dde",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 880,
        "wires": [
            [
                "2e61326c6bab3dcf",
                "bf21c88292410537"
            ]
        ]
    },
    {
        "id": "be2b29cd9b544cb9",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 920,
        "wires": [
            [
                "da850a84169aeb3c",
                "47658311f203dd65"
            ]
        ]
    },
    {
        "id": "8d3e78c5b2af14f5",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 960,
        "wires": [
            [
                "eaf96d9bee6b1da2",
                "0afeca115dcf17f3"
            ]
        ]
    },
    {
        "id": "03e7d657606ddd05",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "44f605ab327f3af7",
                "505dc5dbfb67a5f7"
            ]
        ]
    },
    {
        "id": "ef66e0f6627635ad",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 580,
        "y": 160,
        "wires": [
            [
                "8a9ac1571361d634",
                "df3e7f5b37d33c55"
            ]
        ]
    },
    {
        "id": "0a162316095b4195",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 560,
        "wires": [
            [
                "28f78c2b8f3f52da",
                "f1726b98bf2b8520"
            ]
        ]
    },
    {
        "id": "e2426fabcde8e07e",
        "type": "junction",
        "z": "5991e0363629fd30",
        "x": 560,
        "y": 520,
        "wires": [
            [
                "26e012b4bcdf71d0",
                "de0057bf5847825c"
            ]
        ]
    },
    {
        "id": "f01e7d8cfc9250c8",
        "type": "junction",
        "z": "6e08da7314bcfdec",
        "x": 380,
        "y": 380,
        "wires": [
            [
                "7ab1d64276756ae1"
            ]
        ]
    },
    {
        "id": "5c2de68289634b2e",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 720,
        "y": 1200,
        "wires": [
            [
                "ef2ade8716087151",
                "0e8090cfad19e767"
            ]
        ]
    },
    {
        "id": "1a010d8e6f6df476",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "4c37e06d345d5dd4",
                "0fe3a63c83b844d2"
            ]
        ]
    },
    {
        "id": "4c12a5b595113e65",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 560,
        "y": 3640,
        "wires": [
            [
                "19f8f1ebcf7617eb",
                "2978147c7ad74fb1"
            ]
        ]
    },
    {
        "id": "b61dfa102e476785",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 520,
        "y": 4620,
        "wires": [
            [
                "230c0b54c523e69b"
            ]
        ]
    },
    {
        "id": "57ccc71712747663",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 560,
        "y": 5160,
        "wires": [
            [
                "dfb41bcc75b4726a"
            ]
        ]
    },
    {
        "id": "dfb41bcc75b4726a",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 1020,
        "y": 5160,
        "wires": [
            [
                "6ef45a596aa1c27d"
            ]
        ]
    },
    {
        "id": "b6e52bc6fa12b747",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "a15e19e8dc0416f2",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 560,
        "y": 3780,
        "wires": [
            [
                "07bad945dc18c477"
            ]
        ]
    },
    {
        "id": "fb670826b9657060",
        "type": "junction",
        "z": "baa69f6c03978bf4",
        "x": 560,
        "y": 3840,
        "wires": [
            [
                "eeefea92631b5ae0"
            ]
        ]
    },
    {
        "id": "7e27d1824e7836c4",
        "type": "serial-port",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "1947c803a2684d2c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0068b3",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#ff8000",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0068b3",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0068b3",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0094ff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0068b3",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "IoT導入支援キット Ver.4.1",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "YYYY/MM/DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9f09b5f46708d501",
        "type": "ui_tab",
        "name": "デバイス",
        "icon": "devices",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9bbb76892d4ab39c",
        "type": "ui_tab",
        "name": "ダッシュボード",
        "icon": "fa-tachometer fa-lg",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7185d3568fbcec5e",
        "type": "ui_tab",
        "name": "センサーログ",
        "icon": "fa-line-chart fa-lg",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9012e9bbaaeb35af",
        "type": "ui_tab",
        "name": "インフォ",
        "icon": "fa-info fa-lg",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7f341563fedcf8f3",
        "type": "ui_tab",
        "name": "設定",
        "icon": "settings",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2df157ba38afaa4a",
        "type": "ui_tab",
        "name": "その他",
        "icon": "fa-question fa-lg",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d845885a08ff02c3",
        "type": "ui_tab",
        "name": "Bluetoothデバイス",
        "icon": "fa-bluetooth fa-lg",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "699eb9dfc526271a",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "bd413d977cd00ded",
        "type": "serial-port",
        "serialport": "/dev/ttyACM1",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "1136a96fa7b3b064",
        "type": "serial-port",
        "serialport": "/dev/ttyACM2",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "c6f8db9345018ba4",
        "type": "serial-port",
        "serialport": "/dev/ttyACM3",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "42f4312850451f83",
        "type": "serial-port",
        "serialport": "/dev/ttyACM4",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "330ec84549af6ed3",
        "type": "serial-port",
        "serialport": "/dev/ttyACM5",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "d18cd67068644dbb",
        "type": "serial-port",
        "serialport": "/dev/ttyACM6",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b4907ecab88b32fe",
        "type": "serial-port",
        "serialport": "/dev/ttyACM7",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "dfe751d749b1d618",
        "type": "serial-port",
        "serialport": "/dev/ttyACM8",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "e28ec53368199a20",
        "type": "serial-port",
        "serialport": "/dev/ttyACM9",
        "serialbaud": "38400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "aeb4a518889b29fd",
        "type": "ui_tab",
        "name": "ルーター",
        "icon": "router",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a94da86ed0ed5115",
        "type": "ui_tab",
        "name": "モジュール",
        "icon": "fa-cubes fa-lg",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5b09767069411e23",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "iotkit",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "b71bae1c56af92ef",
        "type": "ui_group",
        "name": "登録済デバイス",
        "tab": "9f09b5f46708d501",
        "order": 1,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "03e82e73d56ea971",
        "type": "ui_group",
        "name": "照度",
        "tab": "9bbb76892d4ab39c",
        "order": 13,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2679f0fb63ef5447",
        "type": "ui_group",
        "name": "デバイス一覧",
        "tab": "9f09b5f46708d501",
        "order": 3,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97ed516a1493322c",
        "type": "ui_group",
        "name": "熱電対",
        "tab": "9bbb76892d4ab39c",
        "order": 9,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a33549fc7f53f910",
        "type": "ui_group",
        "name": "測距",
        "tab": "9bbb76892d4ab39c",
        "order": 7,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "077aae774e979adc",
        "type": "ui_group",
        "name": "差圧",
        "tab": "9bbb76892d4ab39c",
        "order": 11,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "55557d66b0e6ec0f",
        "type": "ui_group",
        "name": "加速度",
        "tab": "9bbb76892d4ab39c",
        "order": 19,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e4f25cdd6124a8c",
        "type": "ui_group",
        "name": "ADC",
        "tab": "9bbb76892d4ab39c",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a0a2fc2d5b7cbd5a",
        "type": "ui_group",
        "name": "センサー情報",
        "tab": "9f09b5f46708d501",
        "order": 4,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "877afb70205958bf",
        "type": "ui_group",
        "name": "センサー設定",
        "tab": "9f09b5f46708d501",
        "order": 5,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "63fc741b.4c4a6c",
        "type": "ui_group",
        "name": "カメラ",
        "tab": "9bbb76892d4ab39c",
        "order": 22,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01a647a60eecfc02",
        "type": "ui_group",
        "name": "スペクトログラム",
        "tab": "9bbb76892d4ab39c",
        "order": 21,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e205ca414e18713a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "iotkit",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "3a94735d22c17cc1",
        "type": "ui_group",
        "name": "照度 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 14,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff32a687145df8e1",
        "type": "ui_group",
        "name": "センサーログ",
        "tab": "7185d3568fbcec5e",
        "order": 1,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7784d9b75859d43",
        "type": "ui_group",
        "name": "接点入力",
        "tab": "9bbb76892d4ab39c",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "767efd572c44ad48",
        "type": "ui_group",
        "name": "接点入力 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "34100d0ea17ad327",
        "type": "ui_group",
        "name": "測距 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 8,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7af0771c18ab4a41",
        "type": "ui_group",
        "name": "熱電対 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 10,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "24aea29c9154d101",
        "type": "ui_group",
        "name": "加速度 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 20,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1eb0a11f681f6bd0",
        "type": "ui_group",
        "name": "差圧 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 12,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "68fe794bde8b666c",
        "type": "ui_group",
        "name": "ADC カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "29764148aa53d75a",
        "type": "ui_group",
        "name": "接点出力",
        "tab": "9bbb76892d4ab39c",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a73faab220117f12",
        "type": "ui_group",
        "name": "接点出力 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf6e588d332cc9dd",
        "type": "ui_group",
        "name": "IoT導入支援キットについて ",
        "tab": "9012e9bbaaeb35af",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a1d73b1a34646918",
        "type": "ui_spacer",
        "z": "2d4457c90808f33a",
        "name": "spacer",
        "group": "cf6e588d332cc9dd",
        "order": 3,
        "width": "12",
        "height": "1"
    },
    {
        "id": "1ce4ea673f9b71e6",
        "type": "ui_group",
        "name": "シャットダウン",
        "tab": "2df157ba38afaa4a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b75ec87a88fc7dab",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5c3749de7ef4793c",
        "type": "ui_group",
        "name": "MQTT ブローカー",
        "tab": "7f341563fedcf8f3",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7745fceab518014a",
        "type": "ui_group",
        "name": "MQTT トピック",
        "tab": "7f341563fedcf8f3",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2729d526d96a8347",
        "type": "ui_group",
        "name": "拡張0",
        "tab": "9bbb76892d4ab39c",
        "order": 23,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "80c826fe9c5364b7",
        "type": "ui_group",
        "name": "WebAPIについて",
        "tab": "2df157ba38afaa4a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e068733a681da3f1",
        "type": "ui_group",
        "name": "拡張0 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 24,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0831c77c41c6183",
        "type": "ui_group",
        "name": "拡張1",
        "tab": "9bbb76892d4ab39c",
        "order": 25,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "952e6087ea9f35f2",
        "type": "ui_group",
        "name": "拡張2",
        "tab": "9bbb76892d4ab39c",
        "order": 27,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0cc3b4537efc51c",
        "type": "ui_group",
        "name": "拡張3",
        "tab": "9bbb76892d4ab39c",
        "order": 29,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a134bf5bc2b6cbb4",
        "type": "ui_group",
        "name": "拡張4",
        "tab": "9bbb76892d4ab39c",
        "order": 31,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ffd15755660f7d2c",
        "type": "ui_group",
        "name": "拡張5",
        "tab": "9bbb76892d4ab39c",
        "order": 33,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9582c26a3dd7a066",
        "type": "ui_group",
        "name": "拡張6",
        "tab": "9bbb76892d4ab39c",
        "order": 35,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8255db4898c6086b",
        "type": "ui_group",
        "name": "拡張7",
        "tab": "9bbb76892d4ab39c",
        "order": 37,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "66950d396fa8dfa6",
        "type": "ui_group",
        "name": "拡張8",
        "tab": "9bbb76892d4ab39c",
        "order": 39,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a13eb88e57643e2a",
        "type": "ui_group",
        "name": "拡張9",
        "tab": "9bbb76892d4ab39c",
        "order": 41,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e1b99fbee429a233",
        "type": "ui_group",
        "name": "拡張1 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 26,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4eb878d82b172fce",
        "type": "ui_group",
        "name": "拡張2 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 28,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bca6f6c7660a8b8c",
        "type": "ui_group",
        "name": "拡張3 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 30,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "11148d19331b709f",
        "type": "ui_group",
        "name": "拡張4 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 32,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "751a5d6e79b84e36",
        "type": "ui_group",
        "name": "拡張5 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 34,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2351af779d17d551",
        "type": "ui_group",
        "name": "拡張6 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 36,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c36c8d00345fa0b4",
        "type": "ui_group",
        "name": "拡張7 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 38,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d919a082d3abf0b1",
        "type": "ui_group",
        "name": "拡張8 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 40,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3fcc1645a76bdd2b",
        "type": "ui_group",
        "name": "拡張9 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 42,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7e034d039814d03",
        "type": "ui_group",
        "name": "時刻",
        "tab": "2df157ba38afaa4a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "00effd5807f5c7d1",
        "type": "ui_group",
        "name": "デバイス登録",
        "tab": "9f09b5f46708d501",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "23e1126896b538a5",
        "type": "ui_group",
        "name": "Bluetoothデバイス (BravePI)",
        "tab": "d845885a08ff02c3",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "23ac0f65997bdbdb",
        "type": "ui_group",
        "name": "SMTP サーバー",
        "tab": "7f341563fedcf8f3",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5d7b813f9b3de5c",
        "type": "ui_group",
        "name": "送信先メールアドレス",
        "tab": "7f341563fedcf8f3",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "662d7cc35535e940",
        "type": "ui_group",
        "name": "その他設定",
        "tab": "9f09b5f46708d501",
        "order": 6,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "de2f02f84aa152db",
        "type": "ui_group",
        "name": "センサー情報",
        "tab": "d845885a08ff02c3",
        "order": 2,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3163d1f802caa2c5",
        "type": "ui_group",
        "name": "デバイス情報",
        "tab": "d845885a08ff02c3",
        "order": 3,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01e62e79e78893cb",
        "type": "ui_group",
        "name": "気圧",
        "tab": "9bbb76892d4ab39c",
        "order": 17,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6db67bf10b10da23",
        "type": "ui_group",
        "name": "気圧 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 18,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba253d82e3bf1fc9",
        "type": "ui_group",
        "name": "温湿度",
        "tab": "9bbb76892d4ab39c",
        "order": 15,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da9e66af1ee4505c",
        "type": "ui_group",
        "name": "温湿度 カウント",
        "tab": "9bbb76892d4ab39c",
        "order": 16,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "07c47cc34edb7282",
        "type": "ui_group",
        "name": "BraveJIG モジュール",
        "tab": "a94da86ed0ed5115",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "02e3795a3c584021",
        "type": "ui_group",
        "name": "ルーター",
        "tab": "aeb4a518889b29fd",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da265e4388b0d3e2",
        "type": "ui_group",
        "name": "ルーター詳細",
        "tab": "aeb4a518889b29fd",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d52b337d128e4169",
        "type": "ui_group",
        "name": "センサー情報",
        "tab": "a94da86ed0ed5115",
        "order": 2,
        "disp": false,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "35720b9f74ec4857",
        "type": "ui_group",
        "name": "モジュール設定",
        "tab": "a94da86ed0ed5115",
        "order": 3,
        "disp": false,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8cadb8edc73c6757",
        "type": "ui_group",
        "name": "データベース",
        "tab": "2df157ba38afaa4a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "124495b5a0aade14",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "51883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dae1c95b60e43364",
        "type": "ui_ui_control",
        "z": "f89f5e3b86cd59d6",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "bf2d6a7f083b6e20"
            ]
        ]
    },
    {
        "id": "bf2d6a7f083b6e20",
        "type": "switch",
        "z": "f89f5e3b86cd59d6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "change",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "2a6ad2b8af70ae53"
            ]
        ]
    },
    {
        "id": "2a6ad2b8af70ae53",
        "type": "switch",
        "z": "f89f5e3b86cd59d6",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "name",
                "vt": "env"
            },
            {
                "t": "neq",
                "v": "name",
                "vt": "env"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b62e3e6518e4b726",
        "type": "function",
        "z": "c91ae0a3d8355cfb",
        "name": "センサー種別ごとに固有の情報を埋め込む",
        "func": "function getTransfer() {\n    switch (this.accessType) {\n        case 0:\n            return 'Bluetooth';\n        case 1:\n            return 'I2C';\n        case 2:\n            return 'HTTP';\n        case 3:\n            return 'LAN';\n        case 4:\n            return 'USB';\n        default:\n            return '未実装';\n    }\n}\n\nfunction getThermocoupleType() {\n    if (this.sensorType === 261) {\n        const thermocouples = this.thermocouples;\n        const thermocoupleType = thermocouples[this.sensors[0].thermocoupleType];\n        return thermocoupleType || thermocouples[0];\n    }\n    return '--';\n}\n\nfunction getSensorTypeText() {\n    if (this.sensorType <= 264) {\n        return this.sensorTypeName;\n    } else if (this.sensorType < 70000) {\n        return `${this.sensorTypeName} (JIG)`;\n    } else {\n        return this.sensorTypeName;\n    }\n}\n\nfunction getText() {\n    if (this.values == null || this.values[0] == null || this.values.length !== this.channels.length) {\n        return '--';\n    }\n    if (this.channels.length === 1) {\n        const channel = this.channels[0];\n        const pow = Math.pow(10, channel.fraction);\n        const v = Math.round(this.values[0] * pow) / pow;\n        if (channel.unit) {\n            return `${v} [${channel.unit}]`;\n        } else {\n            return `${v}`;\n        }\n    }\n    const text = [];\n    for (let i = 0; i < this.values.length; i++) {\n        const c = this.channels[i];\n        const pow = Math.pow(10, c.fraction);\n        const v = Math.round(this.values[i] * pow) / pow;\n        const name = (this.sensors && this.sensors[i] && this.sensors[i].displayName) || c.channel;\n        const unit = (this.sensors && this.sensors[i] && this.sensors[i].displayUnit) || c.unit;\n        if (unit) {\n            text.push(`${name} : ${v} [${unit}]`);\n        } else {\n            text.push(`${name} : ${v}`);\n        }\n    }\n    return text.join('\\n');\n}\n\nconst sensorTypeConfigs = Object.freeze({\n    257: {\n        getBcmNumber: function () {\n            return [18, 23, 25, 5, 16][this.key];\n        },\n        getText: function () {\n            if (this.values == null || this.values[0] == null || !Number.isInteger(this.values[0])) {\n                return '--';\n            } else {\n                return this.values[0] ? 'High' : 'Low';\n            }\n        },\n        getTransfer: function () {\n            if (this.accessType === 0) {\n                return 'Bluetooth';\n            } else if (this.accessType === 2) {\n                return 'HTTP/HTTPS';\n            } else if (this.accessType === 4) {\n                return 'USB';\n            } else {\n                return 'BCM GPIO ' + ('0' + this.getBcmNumber()).slice(-2);\n            }\n        },\n        getSensorTypeText\n    },\n    258: {\n        getBcmNumber: function () {\n            return [17, 27, 24, 6, 13][this.key];\n        },\n        getText: function () {\n            if (this.values == null || this.values[0] == null) {\n                return '--';\n            } else if (this.accessType === 2) {\n                return 'HTTP/HTTPS';\n            } else {\n                return this.values[0] ? 'High' : 'Low';\n            }\n        },\n        getTransfer: function () {\n            if (this.accessType === 0) {\n                return 'Bluetooth';\n            } else if (this.accessType === 1) {\n                return 'BCM GPIO ' + ('0' + this.getBcmNumber()).slice(-2);\n            } else if (this.accessType === 4) {\n                return 'USB';\n            }\n        },\n        getSensorTypeText\n    },\n    261: {\n        thermocouples: ['K', 'J', 'T', 'N', 'S', 'E', 'B', 'R'],\n        getThermocoupleType,\n        getText,\n        getTransfer,\n        getSensorTypeText,\n    },\n    294: {\n        getText: function () {\n            if (this.values == null) {\n                return '--';\n            }\n            if (this.values.length != 2) {\n                return '--';\n            }\n            if (this.values.some(v => !Number.isInteger(v))) {\n                return '--';\n            }\n            const text = [];\n            for (let i = 0; i < this.values.length; i++) {\n                const c = this.channels[i];\n                const v = ['Low', 'High'][this.values[i]];\n                const name = c.channel;\n                const unit = c.unit;\n                if (unit) {\n                    text.push(`${name} : ${v} [${unit}]`);\n                } else {\n                    text.push(`${name} : ${v}`);\n                }\n            }\n            return text.join('\\n');\n        },\n        getTransfer,\n        getSensorTypeText\n    },\n    296: {\n        getText: function () {\n            if (this.values == null || this.values[0] == null || this.values.length !== this.channels.length) {\n                return '--';\n            }\n            const text = [];\n            for (let i = 0; i < this.values.length; i++) {\n                const c = this.channels[i];\n                const v = this.values[i] ? 'High' : 'Low';\n                const name = (this.sensors && this.sensors[i] && this.sensors[i].displayName) || c.channel;\n                const unit = (this.sensors && this.sensors[i] && this.sensors[i].displayUnit) || c.unit;\n                if (unit) {\n                    text.push(`${name} : ${v} [${unit}]`);\n                } else {\n                    text.push(`${name} : ${v}`);\n                }\n            }\n            return text.join('\\n');\n        },\n        getTransfer,\n        getSensorTypeText\n\n    }\n});\n\nfunction assgin(payload) {\n    if (sensorTypeConfigs[payload.sensorType]) {\n        Object.assign(payload, sensorTypeConfigs[payload.sensorType]);\n    } else {\n        Object.assign(payload, { getText, getTransfer, getSensorTypeText });\n    }\n}\n\nif (Array.isArray(msg.payload)) {\n    for (const payload of msg.payload) {\n        assgin(payload);\n        payload.exceededThreshold = function (cb1, cb2) {\n            if (this.sensors == null || this.values == null || this.sensors.length !== this.values.length) {\n                return;\n            }\n            for (let i = 0; i < this.sensors.length; i++) {\n                const s = this.sensors[i];\n                const v = this.values[i];\n                const outputs = s.gpioOutputSensors;\n                if (s == null || v == null) {\n                    break;\n                }\n                const signal = s.signal;\n\n                const raiseEvent = (sig, u, time) => {\n                    const old = s.signal;\n                    s.signal = sig;\n                    s.time = time;\n                    s.value = v;\n                    u && s.count++;\n                    cb1({\n                        ...this,\n                        ...s,\n                        time,\n                        value: v,\n                        isCountUpdated: u\n                    });\n                    if (old != sig) {\n                        for (const g of outputs) {\n                            const toggle = g.sensor.toggle;\n                            if (g.device.accessType === 1) {\n                                if (s.toggle != s.signal) {\n                                    g.device.values[g.sensor.channelIndex] = 1 - toggle;\n                                } else {\n                                    g.device.values[g.sensor.channelIndex] = toggle;\n                                }\n                                g.device.text = g.device.getText();\n                                g.device.time = time;\n                            } else {\n                                if (g.device.requests == null) {\n                                    g.device.requests = Array.from(Array(g.device.sensors.length)).fill(0xff);\n                                }\n                                if (s.toggle != s.signal) {\n                                    g.device.requests[g.sensor.channelIndex] = 1 - toggle;\n                                } else {\n                                    g.device.requests[g.sensor.channelIndex] = toggle;\n                                }\n                            }\n                           \n                            g.device.port = this.port;\n                            // cb2(g.device);\n                        }\n                        const uniqueOutputs = outputs.filter((x, i, self) => self.findIndex(e => e.device === x.device) === i);\n                        uniqueOutputs.forEach(g => cb2(g.device));\n                    }\n                }\n\n                if (s.toggle) {\n                    if (signal) {\n                        if (v < s.hysteresisLow) {\n                            if (s.debounceLow == 0) {\n                                raiseEvent(false, this.isSaveCount, this.time);\n                            } else if (!s.timeoutLowId) {\n                                const raiseTime = this.time + s.debounceLow * 1000;\n                                const timeoutId = setTimeout(() => {\n                                    raiseEvent(false, this.isSaveCount, raiseTime);\n                                    delete s.timeoutLowId;\n                                }, s.debounceLow * 1000);\n                                s.timeoutLowId = `${timeoutId}`;\n                            }\n                        } else if (s.timeoutLowId) {\n                            clearTimeout(s.timeoutLowId);\n                            delete s.timeoutLowId;\n                        }\n                    } else {\n                        if (s.hysteresisHigh <= v) {\n                            if (s.debounceHigh == 0) {\n                                raiseEvent(true, 0, this.time);\n                            } else if (!s.timeoutHighId) {\n                                const raiseTime = this.time + s.debounceHigh * 1000;\n                                const timeoutId = setTimeout(() => {\n                                    raiseEvent(true, 0, raiseTime);\n                                    delete s.timeoutHighId;\n                                }, s.debounceHigh * 1000);\n                                s.timeoutHighId = `${timeoutId}`;\n                            }\n                        } else if (s.timeoutHighId) {\n                            clearTimeout(s.timeoutHighId);\n                            delete s.timeoutHighId;\n                        }\n                    }\n                } else {\n                    if (signal) {\n                        if (v < s.hysteresisLow) {\n                            if (s.debounceLow == 0) {\n                                raiseEvent(false, 0, this.time);\n                            } else if (!s.timeoutLowId) {\n                                const raiseTime = this.time + s.debounceLow * 1000;\n                                const timeoutId = setTimeout(() => {\n                                    raiseEvent(false, 0, raiseTime);\n                                    delete s.timeoutLowId;\n                                }, s.debounceLow * 1000);\n                                s.timeoutLowId = `${timeoutId}`;\n                            }\n                        } else if (s.timeoutLowId) {\n                            clearTimeout(s.timeoutLowId);\n                            delete s.timeoutLowId;\n                        }\n                    } else {\n                        if (s.hysteresisHigh <= v) {\n                            if (s.debounceHigh == 0) {\n                                raiseEvent(true, this.isSaveCount, this.time);\n                            } else if (!s.timeoutHighId) {\n                                const raiseTime = this.time + s.debounceHigh * 1000;\n                                const timeoutId = setTimeout(() => {\n                                    raiseEvent(true, this.isSaveCount, raiseTime);\n                                    delete s.timeoutHighId;\n                                }, s.debounceHigh * 1000);\n                                s.timeoutHighId = `${timeoutId}`;\n                            }\n                        } else if (s.timeoutHighId) {\n                            clearTimeout(s.timeoutHighId);\n                            delete s.timeoutHighId;\n                        }\n                    }\n                }\n            }\n        };\n        payload.transfer = payload.getTransfer();\n        payload.text = payload.getText();\n        payload.sensorTypeText = payload.getSensorTypeText();\n        payload.bcm = payload.getBcmNumber && payload.getBcmNumber();\n    }\n    return msg;\n} else {\n    const input = msg.payload.sensorType;\n    const sensorTypes = global.get('sensorTypes') || {};\n    assgin(msg.payload);\n    if (sensorTypes[input]) {\n        msg.payload = Object.assign(msg.payload, sensorTypes[input]);\n        msg.payload.transfer = msg.payload.getTransfer();\n        msg.payload.text = msg.payload.getText();\n        msg.payload.sensorTypeText = msg.payload.getSensorTypeText();\n        return msg;\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6858c342cf0848e5",
        "type": "json",
        "z": "8ebeefef09059e86",
        "name": "JSONへ変換",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 670,
        "y": 140,
        "wires": [
            [
                "0d19f81056330b71"
            ]
        ]
    },
    {
        "id": "2d39253d4b1b2501",
        "type": "change",
        "z": "8ebeefef09059e86",
        "name": "トリム",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$trim(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "d055b5e8b7dfd238"
            ]
        ]
    },
    {
        "id": "2ac11319931d3dee",
        "type": "split",
        "z": "8ebeefef09059e86",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "2d39253d4b1b2501"
            ]
        ]
    },
    {
        "id": "0d19f81056330b71",
        "type": "change",
        "z": "8ebeefef09059e86",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d055b5e8b7dfd238",
        "type": "switch",
        "z": "8ebeefef09059e86",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "6858c342cf0848e5"
            ]
        ]
    },
    {
        "id": "6f79a9a2be8f2d1c",
        "type": "switch",
        "z": "cb5ec79ce8b445f4",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "296",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "259",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "260",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "261",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "262",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "263",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "264",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 10,
        "x": 420,
        "y": 660,
        "wires": [
            [
                "c3f270761ff33375"
            ],
            [
                "08970df6ed4a71a5"
            ],
            [
                "08970df6ed4a71a5"
            ],
            [
                "515885248bc881d0"
            ],
            [
                "15d7b14e09298d16"
            ],
            [
                "65e3ef34703da5af"
            ],
            [
                "15d7b14e09298d16"
            ],
            [
                "15d7b14e09298d16"
            ],
            [
                "15d7b14e09298d16"
            ],
            [
                "15d7b14e09298d16"
            ]
        ]
    },
    {
        "id": "c1882a81c3162d22",
        "type": "mysql",
        "z": "cb5ec79ce8b445f4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 890,
        "y": 740,
        "wires": [
            [
                "15d7b14e09298d16"
            ]
        ]
    },
    {
        "id": "9b4fa79283e25fec",
        "type": "mysql",
        "z": "cb5ec79ce8b445f4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "49f6834c39f349db"
            ]
        ]
    },
    {
        "id": "5fc3687e75316320",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイスID取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `device_id` AS deviceId\nFROM\n  `devices`\nWHERE\n  `device_name` = :deviceName;",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9b4fa79283e25fec"
            ]
        ]
    },
    {
        "id": "79c68c7f13f85e55",
        "type": "change",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "device",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "49f6834c39f349db",
        "type": "change",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.deviceId",
                "pt": "msg",
                "to": "payload[0].deviceId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "8242ba876ab70ec2"
            ]
        ]
    },
    {
        "id": "8242ba876ab70ec2",
        "type": "switch",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "9d5d9c4cce3245d8"
            ],
            [
                "4054fcddf2049c06"
            ],
            [
                "e64ada1d8a6ab0a6"
            ],
            [
                "2444d57a0bab3fef"
            ],
            [
                "b97bc926b64f5a3f"
            ]
        ]
    },
    {
        "id": "526cd2261793f077",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイス設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `i2c_device_configs` (`device_id`, `address`)\nVALUES\n  (:deviceId, :address);",
        "output": "str",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "47d11c4cf5ebde12"
            ]
        ]
    },
    {
        "id": "47d11c4cf5ebde12",
        "type": "mysql",
        "z": "cb5ec79ce8b445f4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 870,
        "y": 300,
        "wires": [
            [
                "b97bc926b64f5a3f"
            ]
        ]
    },
    {
        "id": "d121e9d5738b5ce7",
        "type": "mysql",
        "z": "cb5ec79ce8b445f4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 950,
        "y": 460,
        "wires": [
            [
                "c4628e98c8f766ba"
            ]
        ]
    },
    {
        "id": "c4628e98c8f766ba",
        "type": "change",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$merge([device, sensor])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 600,
        "wires": [
            [
                "6f79a9a2be8f2d1c"
            ]
        ]
    },
    {
        "id": "c3f270761ff33375",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "GPIO入力設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `gpio_inputs` (`sensor_id`)\nSELECT\n  `sensor_id`\nFROM\n  `sensors`\nWHERE\n  `device_id` = :deviceId\n  AND `channel` = :channel;",
        "output": "str",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "c1882a81c3162d22"
            ]
        ]
    },
    {
        "id": "65e3ef34703da5af",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "温度設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `temperatures` (`sensor_id`)\nSELECT\n  `sensor_id`\nFROM\n  `sensors`\nWHERE\n  `device_id` = :deviceId\n  AND `channel` = :channel;",
        "output": "str",
        "x": 680,
        "y": 800,
        "wires": [
            [
                "c1882a81c3162d22"
            ]
        ]
    },
    {
        "id": "9d5d9c4cce3245d8",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイス設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `ble_device_configs` (`device_id`, `device_number`)\nVALUES\n  (\n    :deviceId,\n    CONV(:deviceNumber, 16, 10)\n  );",
        "output": "str",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "47d11c4cf5ebde12"
            ]
        ]
    },
    {
        "id": "2444d57a0bab3fef",
        "type": "switch",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "4571d5e077d0c56f"
            ],
            [
                "4571d5e077d0c56f"
            ],
            [
                "526cd2261793f077"
            ]
        ]
    },
    {
        "id": "4571d5e077d0c56f",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイス設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `gpio_device_configs` (`device_id`, `gpio_index`)\nVALUES\n  (:deviceId, :key);",
        "output": "str",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "47d11c4cf5ebde12"
            ]
        ]
    },
    {
        "id": "dc11f95a1ff4bcac",
        "type": "split",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "5d6af0839450f394"
            ]
        ]
    },
    {
        "id": "239234d75bc7331c",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "センサー設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `sensors` (\n    `channel`,\n    `channel_index`,\n    `toggle`, \n    `hysteresis_high`,\n    `hysteresis_low`,\n    `device_id`,\n    `offset`,\n    `debounce_high`,\n    `debounce_low`\n  )\nVALUES\n  (\n    :channel,\n    :channelIndex, \n    :toggle, \n    :hysteresisHigh,\n    :hysteresisLow,\n    :deviceId,\n    :offset,\n    :debounceHigh,\n    :debounceLow\n  );",
        "output": "str",
        "x": 770,
        "y": 460,
        "wires": [
            [
                "d121e9d5738b5ce7"
            ]
        ]
    },
    {
        "id": "15d7b14e09298d16",
        "type": "join",
        "z": "cb5ec79ce8b445f4",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 910,
        "y": 660,
        "wires": [
            [
                "79c68c7f13f85e55"
            ]
        ]
    },
    {
        "id": "08970df6ed4a71a5",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "GPIO出力設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `gpio_outputs` (`sensor_id`)\nSELECT\n  `sensor_id`\nFROM\n  `sensors`\nWHERE\n  `device_id` = :deviceId\n  AND `channel` = :channel;",
        "output": "str",
        "x": 670,
        "y": 620,
        "wires": [
            [
                "c1882a81c3162d22"
            ]
        ]
    },
    {
        "id": "515885248bc881d0",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "ADC設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `adcs` (`sensor_id`)\nSELECT\n  `sensor_id`\nFROM\n  `sensors`\nWHERE\n  `device_id` = :deviceId\n  AND `channel` = :channel;",
        "output": "str",
        "x": 680,
        "y": 760,
        "wires": [
            [
                "c1882a81c3162d22"
            ]
        ]
    },
    {
        "id": "b97bc926b64f5a3f",
        "type": "function",
        "z": "cb5ec79ce8b445f4",
        "name": "センサー一覧整形",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nmsg.sensor = sensorTypes[msg.device.sensorType];\nmsg.payload = msg.sensor.channels;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 460,
        "wires": [
            [
                "dc11f95a1ff4bcac"
            ]
        ]
    },
    {
        "id": "e64ada1d8a6ab0a6",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイス設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `usb_device_configs` (`device_id`, `device_number`)\nVALUES\n  (\n    :deviceId,\n    CONV(:deviceNumber, 16, 10)\n  );",
        "output": "str",
        "x": 650,
        "y": 220,
        "wires": [
            [
                "47d11c4cf5ebde12"
            ]
        ]
    },
    {
        "id": "4054fcddf2049c06",
        "type": "template",
        "z": "cb5ec79ce8b445f4",
        "name": "デバイス設定登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `mqtt_device_configs` (`device_id`, `device_number`)\nVALUES\n  (\n    :deviceId,\n    CONV(:deviceNumber, 16, 10)\n  );",
        "output": "str",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "47d11c4cf5ebde12"
            ]
        ]
    },
    {
        "id": "5d6af0839450f394",
        "type": "function",
        "z": "cb5ec79ce8b445f4",
        "name": "センサー設定抽出",
        "func": "msg.channel = msg.payload;\nmsg.device = {\n    ...msg.device,\n    ...msg.sensor,\n    ...msg.payload\n};\nif (msg.sensors) {\n    msg.device = {\n        ...msg.device,\n        ...msg.sensors[msg.parts.index]\n    };\n} else {\n    msg.device.toggle = false;\n    msg.device.hysteresisHigh = msg.device.hysteresisDefault;\n    msg.device.hysteresisLow = msg.device.hysteresisDefault;\n    msg.device.debounceHigh = 0;\n    msg.device.debounceLow = 0;\n    msg.device.offset = 0;\n}\nmsg.payload = msg.device;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "239234d75bc7331c"
            ]
        ]
    },
    {
        "id": "b0849cc72750c3c5",
        "type": "mysql",
        "z": "9a1bb339c6988af7",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 730,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "652b702bf57adc41",
        "type": "switch",
        "z": "9a1bb339c6988af7",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "296",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "259",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "261",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "6b60a8c30c53d5f7"
            ],
            [
                "a2591741c8475520"
            ],
            [
                "a2591741c8475520"
            ],
            [
                "761e315ce7aabff6"
            ],
            [
                "3fafb7f6dcdc0e5b"
            ],
            [
                "876fc8976d8f3b29"
            ]
        ]
    },
    {
        "id": "6b60a8c30c53d5f7",
        "type": "template",
        "z": "9a1bb339c6988af7",
        "name": "GPIO入力設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `take_photo` = :takePhoto,\n  `toggle` = :toggle,\n  `extra_mqtt` = :extraMqtt,\n  `debounce_high` = :debounceHigh,\n  `debounce_low` = :debounceLow\nWHERE\n  `sensor_id` = :sensorId;\n\nUPDATE\n  `gpio_inputs`\nSET\n  `chattering` = :chattering\nWHERE \n  `gpio_input_id` = :gpioInputId;\n\nDELETE FROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.gpioOutputSensors}}\nINSERT INTO\n  `sensor_gpio_output_pivots` (\n    `sensor_id`,\n    `gpio_output_sensor_id`,\n    `channel_index`\n  )\nVALUES (\n  :sensorId,\n  {{{sensor.sensorId}}},\n  {{{sensor.channelIndex}}}\n);\n{{/payload.gpioOutputSensors}}\n\nDELETE FROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mqttTopics}}\nINSERT INTO\n  `sensor_mqtt_pivots` (\n    `sensor_id`,\n    `mqtt_topic_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mqttTopicId}}}\n);\n{{/payload.mqttTopics}}\n\nDELETE FROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n  \n{{#payload.mailAddresses}}\nINSERT INTO\n  `sensor_mail_pivots` (\n    `sensor_id`,\n    `mail_address_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mailAddressId}}}\n);\n{{/payload.mailAddresses}}",
        "output": "str",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "b0849cc72750c3c5"
            ]
        ]
    },
    {
        "id": "876fc8976d8f3b29",
        "type": "template",
        "z": "9a1bb339c6988af7",
        "name": "その他設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `take_photo` = :takePhoto,\n  `toggle` = :toggle,\n  `extra_mqtt` = :extraMqtt,\n  `hysteresis_high` = :hysteresisHigh,\n  `hysteresis_low` = :hysteresisLow,\n  `offset` = :offset,\n  `debounce_high` = :debounceHigh,\n  `debounce_low` = :debounceLow\nWHERE\n  `sensor_id` = :sensorId;\n\nDELETE FROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.gpioOutputSensors}}\nINSERT INTO\n  `sensor_gpio_output_pivots` (\n    `sensor_id`,\n    `gpio_output_sensor_id`,\n    `channel_index`\n  )\nVALUES (\n  :sensorId,\n  {{{sensor.sensorId}}},\n  {{{sensor.channelIndex}}}\n);\n{{/payload.gpioOutputSensors}}\n\nDELETE FROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mqttTopics}}\nINSERT INTO\n  `sensor_mqtt_pivots` (\n    `sensor_id`,\n    `mqtt_topic_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mqttTopicId}}}\n);\n{{/payload.mqttTopics}}\n\nDELETE FROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mailAddresses}}\nINSERT INTO\n  `sensor_mail_pivots` (\n    `sensor_id`,\n    `mail_address_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mailAddressId}}}\n);\n{{/payload.mailAddresses}}",
        "output": "str",
        "x": 520,
        "y": 320,
        "wires": [
            [
                "b0849cc72750c3c5"
            ]
        ]
    },
    {
        "id": "3fafb7f6dcdc0e5b",
        "type": "template",
        "z": "9a1bb339c6988af7",
        "name": "温度設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `take_photo` = :takePhoto,\n  `toggle` = :toggle,\n  `extra_mqtt` = :extraMqtt,\n  `hysteresis_high` = :hysteresisHigh,\n  `hysteresis_low` = :hysteresisLow,\n  `offset` = :offset,\n  `debounce_high` = :debounceHigh,\n  `debounce_low` = :debounceLow\nWHERE\n  `sensor_id` = :sensorId;\n\nUPDATE\n  `temperatures`\nSET\n  `thermocouple_type` = :thermocoupleType\nWHERE \n  `temperature_id` = :temperatureId;\n\nDELETE FROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.gpioOutputSensors}}\nINSERT INTO\n  `sensor_gpio_output_pivots` (\n    `sensor_id`,\n    `gpio_output_sensor_id`,\n    `channel_index`\n  )\nVALUES (\n  :sensorId,\n  {{{sensor.sensorId}}}\n);\n{{/payload.gpioOutputSensors}}\n\nDELETE FROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mqttTopics}}\nINSERT INTO\n  `sensor_mqtt_pivots` (\n    `sensor_id`,\n    `mqtt_topic_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mqttTopicId}}}\n);\n{{/payload.mqttTopics}}\n\nDELETE FROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n  \n{{#payload.mailAddresses}}\nINSERT INTO\n  `sensor_mail_pivots` (\n    `sensor_id`,\n    `mail_address_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mailAddressId}}}\n);\n{{/payload.mailAddresses}}\n",
        "output": "str",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "b0849cc72750c3c5"
            ]
        ]
    },
    {
        "id": "a2591741c8475520",
        "type": "template",
        "z": "9a1bb339c6988af7",
        "name": "GPIO出力設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `take_photo` = :takePhoto,\n  `toggle` = :toggle,\n  `extra_mqtt` = :extraMqtt\nWHERE\n  `sensor_id` = :sensorId;\n\nUPDATE\n  `gpio_outputs`\nSET\n  `init_state` = :initState,\n  `signal_out_time` = :signalOutTime\nWHERE \n  `gpio_output_id` = :gpioOutputId;\n\nDELETE FROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\nDELETE FROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mqttTopics}}\nINSERT INTO\n  `sensor_mqtt_pivots` (\n    `sensor_id`,\n    `mqtt_topic_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mqttTopicId}}}\n);\n{{/payload.mqttTopics}}\n\nDELETE FROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n  \n{{#payload.mailAddresses}}\nINSERT INTO\n  `sensor_mail_pivots` (\n    `sensor_id`,\n    `mail_address_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mailAddressId}}}\n);\n{{/payload.mailAddresses}}",
        "output": "str",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "b0849cc72750c3c5"
            ]
        ]
    },
    {
        "id": "761e315ce7aabff6",
        "type": "template",
        "z": "9a1bb339c6988af7",
        "name": "ADC設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `take_photo` = :takePhoto,\n  `toggle` = :toggle,\n  `extra_mqtt` = :extraMqtt,\n  `hysteresis_high` = :hysteresisHigh,\n  `hysteresis_low` = :hysteresisLow,\n  `offset` = :offset,\n  `debounce_high` = :debounceHigh,\n  `debounce_low` = :debounceLow\nWHERE\n  `sensor_id` = :sensorId;\n\nUPDATE\n  `adcs`\nSET\n  `magnification` = :magnification,\n  `gain` = :gain,\n  `display_name` = :displayName,\n  `display_unit` = :displayUnit\nWHERE \n  `adc_id` = :adcId;\n\nDELETE FROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.gpioOutputSensors}}\nINSERT INTO\n  `sensor_gpio_output_pivots` (\n    `sensor_id`,\n    `gpio_output_sensor_id`,\n    `channel_index`\n  )\nVALUES (\n  :sensorId,\n  {{{sensor.sensorId}}}\n);\n{{/payload.gpioOutputSensors}}\n\nDELETE FROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n\n{{#payload.mqttTopics}}\nINSERT INTO\n  `sensor_mqtt_pivots` (\n    `sensor_id`,\n    `mqtt_topic_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mqttTopicId}}}\n);\n{{/payload.mqttTopics}}\n\nDELETE FROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = :sensorId;\n  \n{{#payload.mailAddresses}}\nINSERT INTO\n  `sensor_mail_pivots` (\n    `sensor_id`,\n    `mail_address_id`\n  )\nVALUES (\n  :sensorId,\n  {{{mailAddressId}}}\n);\n{{/payload.mailAddresses}}\n",
        "output": "str",
        "x": 520,
        "y": 240,
        "wires": [
            [
                "b0849cc72750c3c5"
            ]
        ]
    },
    {
        "id": "51e6e4e343c29602",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "デバイス一覧取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  d.`device_id` AS deviceId,\n  d.`device_name` AS deviceName,\n  d.`sensor_type_id` AS sensorType,\n  d.`access_type` AS accessType,\n  d.`is_save_data` AS isSaveData,\n  d.`is_save_count` AS isSaveCount\nFROM\n  `devices` AS d\nORDER BY\n  accessType, sensorType, deviceId;",
        "output": "str",
        "x": 550,
        "y": 80,
        "wires": [
            [
                "645c683a36ef894e"
            ]
        ]
    },
    {
        "id": "645c683a36ef894e",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 390,
        "y": 140,
        "wires": [
            [
                "acc0ad3ade3d0776"
            ]
        ]
    },
    {
        "id": "b2e297b22396a4ea",
        "type": "split",
        "z": "9240fdb206d57ffc",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "cba8f5d69acae781"
            ]
        ]
    },
    {
        "id": "452a0349cdfe6281",
        "type": "switch",
        "z": "9240fdb206d57ffc",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "296",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "259",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "261",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 340,
        "y": 560,
        "wires": [
            [
                "43a807ee39f4537f"
            ],
            [
                "13db289b39a48860"
            ],
            [
                "13db289b39a48860"
            ],
            [
                "1650fe219c5ae248"
            ],
            [
                "2117396eb7b6e373"
            ],
            [
                "d6a74de8c1c9e38d"
            ]
        ]
    },
    {
        "id": "cba8f5d69acae781",
        "type": "change",
        "z": "9240fdb206d57ffc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "d4d1569bb0e3959d"
            ]
        ]
    },
    {
        "id": "d4d1569bb0e3959d",
        "type": "switch",
        "z": "9240fdb206d57ffc",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 470,
        "y": 300,
        "wires": [
            [
                "3f6c8cbd1787e1f2"
            ],
            [
                "257c61ae95498c0f"
            ],
            [
                "bb8df8caee65118f"
            ],
            [
                "870823da08d4e8b2"
            ],
            [
                "07227e47012d12f1"
            ]
        ]
    },
    {
        "id": "257c61ae95498c0f",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "BLEデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `ble_device_config_id` AS deviceConfigId,\n  LOWER(CONV(`device_number`, 10, 16))  AS deviceNumber,\n  -- `timezone`,\n  -- `ble_mode` AS bleMode,\n  -- `tx_power` AS txPower,\n  `advertise_interval` AS advertiseInterval,\n  `uplink_interval` AS uplinkInterval\n  -- `measurement_mode` AS measurementMode,\n  -- `sampling_interval` AS samplingInterval\nFROM\n  `ble_device_configs`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "bddb0d31c9ea7dba"
            ]
        ]
    },
    {
        "id": "95d37dbc93334b79",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "I2Cデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `i2c_device_config_id` AS deviceConfigId,\n  `address`,\n  `output_interval` AS outputInterval\nFROM\n  `i2c_device_configs`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "bddb0d31c9ea7dba"
            ]
        ]
    },
    {
        "id": "3f6c8cbd1787e1f2",
        "type": "switch",
        "z": "9240fdb206d57ffc",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 720,
        "y": 220,
        "wires": [
            [
                "6e339d980072a786"
            ],
            [
                "6e339d980072a786"
            ],
            [
                "95d37dbc93334b79"
            ]
        ]
    },
    {
        "id": "bddb0d31c9ea7dba",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 950,
        "y": 320,
        "wires": [
            [
                "2830acfe259aefba"
            ]
        ]
    },
    {
        "id": "2830acfe259aefba",
        "type": "change",
        "z": "9240fdb206d57ffc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "msg",
                "to": "$merge([device, payload[0]])\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 420,
        "wires": [
            [
                "07227e47012d12f1"
            ]
        ]
    },
    {
        "id": "46b8299d4a12cbae",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 810,
        "y": 640,
        "wires": [
            [
                "35dab5e3e67313e1"
            ]
        ]
    },
    {
        "id": "ca1ca289142aaf46",
        "type": "join",
        "z": "9240fdb206d57ffc",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 760,
        "wires": [
            [
                "102e11f5e7e0f354"
            ]
        ]
    },
    {
        "id": "979db5da71d4f674",
        "type": "switch",
        "z": "9240fdb206d57ffc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 140,
        "wires": [
            [
                "102e11f5e7e0f354"
            ],
            [
                "b2e297b22396a4ea"
            ]
        ]
    },
    {
        "id": "43a807ee39f4537f",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "接点入力設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  s.`sensor_id` AS sensorId,\n  s.`channel`,\n  s.`channel_index` AS channelIndex,\n  s.`count`,\n  s.`take_photo` AS takePhoto,\n  s.`toggle`,\n  s.`debounce_high` AS debounceHigh,\n  s.`debounce_low` AS debounceLow,\n  s.`extra_mqtt` AS extraMqtt,\n  gi.`gpio_input_id` AS gpioInputId,\n  gi.`chattering`,\n  0.5 AS hysteresisHigh,\n  0.5 AS hysteresisLow\nFROM\n  `sensors` AS s\n  INNER JOIN `gpio_inputs` AS gi\n    ON s.`sensor_id` = gi.`sensor_id`\nWHERE\n  `device_id` = :deviceId\nORDER BY\n  channelIndex;",
        "output": "str",
        "x": 590,
        "y": 480,
        "wires": [
            [
                "46b8299d4a12cbae"
            ]
        ]
    },
    {
        "id": "d6a74de8c1c9e38d",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "その他設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  s.`sensor_id` AS sensorId,\n  s.`channel`,\n  s.`channel_index` AS channelIndex,\n  s.`count`,\n  s.`take_photo` AS takePhoto,\n  s.`toggle`,\n  s.`extra_mqtt` AS extraMqtt,\n  s.`hysteresis_high` AS hysteresisHigh,\n  s.`hysteresis_low` AS hysteresisLow,\n  s.`offset`,\n  s.`debounce_high` AS debounceHigh,\n  s.`debounce_low` AS debounceLow\nFROM\n  `sensors` AS s\nWHERE\n  `device_id` = :deviceId\nORDER BY\n  channelIndex;",
        "output": "str",
        "x": 580,
        "y": 640,
        "wires": [
            [
                "46b8299d4a12cbae"
            ]
        ]
    },
    {
        "id": "2117396eb7b6e373",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "温度設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  s.`sensor_id` AS sensorId,\n  s.`channel`,\n  s.`channel_index` AS channelIndex,\n  s.`count`,\n  s.`take_photo` AS takePhoto,\n  s.`toggle`,\n  s.`extra_mqtt` AS extraMqtt,\n  s.`hysteresis_high` AS hysteresisHigh,\n  s.`hysteresis_low` AS hysteresisLow,\n  s.`offset`,  \n  s.`debounce_high` AS debounceHigh,\n  s.`debounce_low` AS debounceLow,\n  t.`temperature_id` AS temperatureId,\n  t.`thermocouple_type` AS thermocoupleType\nFROM\n  `sensors` AS s\n  INNER JOIN `temperatures` AS t\n    ON t.`sensor_id` = s.`sensor_id`\nWHERE\n  `device_id` = :deviceId\nORDER BY\n  channelIndex;",
        "output": "str",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "46b8299d4a12cbae"
            ]
        ]
    },
    {
        "id": "13db289b39a48860",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "接点出力設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  s.`sensor_id` AS sensorId,\n  s.`channel`,\n  s.`channel_index` AS channelIndex,\n  s.`count`,\n  s.`take_photo` AS takePhoto,\n  s.`toggle`,\n  s.`debounce_high` AS debounceHigh,\n  s.`debounce_low` AS debounceLow,\n  s.`extra_mqtt` AS extraMqtt,\n  g.`gpio_output_id` AS gpioOutputId,\n  g.`init_state` AS initState,\n  g.`signal_out_time` AS signalOutTime,\n  0.5 AS hysteresisHigh,\n  0.5 AS hysteresisLow\nFROM\n  `sensors` AS s\n  INNER JOIN `gpio_outputs` AS g\n    ON s.`sensor_id` = g.`sensor_id`\nWHERE\n  `device_id` = :deviceId\nORDER BY\n  channelIndex;",
        "output": "str",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "46b8299d4a12cbae"
            ]
        ]
    },
    {
        "id": "07227e47012d12f1",
        "type": "function",
        "z": "9240fdb206d57ffc",
        "name": "キーを作成",
        "func": "switch (msg.payload.accessType) {\n    case 0:\n    case 3:\n    case 4:\n        const str = ('0000000000000000' + msg.payload.deviceNumber).slice(-16);\n        msg.payload.key = [...Array(8)]\n            .map((_, x) => str.substring(x * 2, x * 2 + 2))\n            .join('')\n            .toLowerCase();\n        break;\n    case 1:\n        if (msg.payload.address) {\n            const str = ('0' + msg.payload.address.toString(16).toLowerCase()).slice(-2);\n            msg.payload.key = '0x' + str;\n        } else {\n            msg.payload.key = msg.payload.gpioIndex;\n        }\n        break;\n    case 2:\n        msg.payload.key = msg.payload.deviceName;\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 460,
        "wires": [
            [
                "452a0349cdfe6281"
            ]
        ]
    },
    {
        "id": "6e339d980072a786",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "GPIOデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `gpio_device_config_id` AS gpioDeviceConfigId,\n  `gpio_index` AS gpioIndex\nFROM\n  `gpio_device_configs`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "bddb0d31c9ea7dba"
            ]
        ]
    },
    {
        "id": "8874fe3fccd0ee72",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "GPIOデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "{{#payload.sensors}}\nSELECT\n  `sensor_id` AS sensorId,\n  `gpio_output_sensor_id` AS gpioOutputSensorId,\n  `channel_index` AS channelIndex\nFROM\n  `sensor_gpio_output_pivots`\nWHERE\n  `sensor_id` = {{{sensorId}}};\n{{/payload.sensors}}",
        "output": "str",
        "x": 610,
        "y": 700,
        "wires": [
            [
                "b9bbfc47004dfeaa"
            ]
        ]
    },
    {
        "id": "35dab5e3e67313e1",
        "type": "change",
        "z": "9240fdb206d57ffc",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "device.sensors",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "8874fe3fccd0ee72"
            ]
        ]
    },
    {
        "id": "b9bbfc47004dfeaa",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 810,
        "y": 700,
        "wires": [
            [
                "6215a0a6a8e0490a"
            ]
        ]
    },
    {
        "id": "6215a0a6a8e0490a",
        "type": "function",
        "z": "9240fdb206d57ffc",
        "name": "GPIO出力デバイス整形",
        "func": "if (msg.device.sensors.length === 1) {\n    msg.device.gpioOutputSensors = msg.payload;\n} else {\n    msg.device.gpioOutputSensors = msg.payload.flatMap(x => x);\n}\nmsg.payload = msg.device;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "625df527a7e38b80"
            ]
        ]
    },
    {
        "id": "625df527a7e38b80",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "MQTTトピック取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "{{#payload.sensors}}\nSELECT\n  `sensor_id` AS sensorId,\n  `mqtt_topic_id` AS mqttTopicId\nFROM\n  `sensor_mqtt_pivots`\nWHERE\n  `sensor_id` = {{{sensorId}}};\n{{/payload.sensors}}",
        "output": "str",
        "x": 600,
        "y": 760,
        "wires": [
            [
                "73a0f9318ebf976d"
            ]
        ]
    },
    {
        "id": "73a0f9318ebf976d",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 810,
        "y": 760,
        "wires": [
            [
                "11a031bb95c3ac72"
            ]
        ]
    },
    {
        "id": "11a031bb95c3ac72",
        "type": "function",
        "z": "9240fdb206d57ffc",
        "name": "MQTTトピック整形",
        "func": "if (msg.device.sensors.length === 1) {\n    msg.device.mqttTopics = msg.payload;\n} else {\n    msg.device.mqttTopics = msg.payload.flatMap(x => x);\n}\nmsg.payload = msg.device;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 760,
        "wires": [
            [
                "cebea0365598c545"
            ]
        ]
    },
    {
        "id": "acc0ad3ade3d0776",
        "type": "function",
        "z": "9240fdb206d57ffc",
        "name": "センサー種別情報を付与",
        "func": "msg.payload.forEach(x => Object.assign(x, msg.sensorTypes[x.sensorType]));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "979db5da71d4f674"
            ]
        ]
    },
    {
        "id": "cebea0365598c545",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "送信先メールアドレス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "{{#payload.sensors}}\nSELECT\n  `sensor_id` AS sensorId,\n  `mail_address_id` AS mailAddressId\nFROM\n  `sensor_mail_pivots`\nWHERE\n  `sensor_id` = {{{sensorId}}};\n{{/payload.sensors}}",
        "output": "str",
        "x": 580,
        "y": 820,
        "wires": [
            [
                "31f304db85a96c51"
            ]
        ]
    },
    {
        "id": "31f304db85a96c51",
        "type": "mysql",
        "z": "9240fdb206d57ffc",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 810,
        "y": 820,
        "wires": [
            [
                "8297eda26a0feb77"
            ]
        ]
    },
    {
        "id": "8297eda26a0feb77",
        "type": "function",
        "z": "9240fdb206d57ffc",
        "name": "メールアドレス整形",
        "func": "if (msg.device.sensors.length === 1) {\n    msg.device.mailAddresses = msg.payload;\n} else {\n    msg.device.mailAddresses = msg.payload.flatMap(x => x);\n}\nmsg.payload = msg.device;\ndelete msg.device;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "ca1ca289142aaf46"
            ]
        ]
    },
    {
        "id": "102e11f5e7e0f354",
        "type": "change",
        "z": "9240fdb206d57ffc",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1650fe219c5ae248",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "ADC設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  s.`sensor_id` AS sensorId,\n  s.`channel`,\n  s.`channel_index` AS channelIndex,\n  s.`count`,\n  s.`take_photo` AS takePhoto,\n  s.`toggle`,\n  s.`extra_mqtt` AS extraMqtt,\n  s.`hysteresis_high` AS hysteresisHigh,\n  s.`hysteresis_low` AS hysteresisLow,\n  s.`offset`,\n  s.`debounce_high` AS debounceHigh,\n  s.`debounce_low` AS debounceLow,\n  t.`adc_id` AS adcId,\n  t.`magnification`,\n  t.`display_name` AS displayName,\n  t.`display_unit` AS displayUnit,\n  t.`gain`\nFROM\n  `sensors` AS s\n  INNER JOIN `adcs` AS t\n    ON t.`sensor_id` = s.`sensor_id`\nWHERE\n  `device_id` = :deviceId\nORDER BY\n  channelIndex;",
        "output": "str",
        "x": 580,
        "y": 560,
        "wires": [
            [
                "46b8299d4a12cbae"
            ]
        ]
    },
    {
        "id": "8ef24e1f1c230e2d",
        "type": "change",
        "z": "9240fdb206d57ffc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sensorTypes",
                "pt": "msg",
                "to": "sensorTypes",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 80,
        "wires": [
            [
                "51e6e4e343c29602"
            ]
        ]
    },
    {
        "id": "870823da08d4e8b2",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "USBデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `usb_device_config_id` AS deviceConfigId,\n  LOWER(CONV(`device_number`, 10, 16))  AS deviceNumber,\n  `advertise_interval` AS advertiseInterval,\n  `uplink_interval` AS uplinkInterval\nFROM\n  `usb_device_configs`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "bddb0d31c9ea7dba"
            ]
        ]
    },
    {
        "id": "bb8df8caee65118f",
        "type": "template",
        "z": "9240fdb206d57ffc",
        "name": "MQTTデバイス取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `mqtt_device_config_id` AS deviceConfigId,\n  LOWER(CONV(`device_number`, 10, 16))  AS deviceNumber,\n  `advertise_interval` AS advertiseInterval,\n  `uplink_interval` AS uplinkInterval\nFROM\n  `mqtt_device_configs`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 720,
        "y": 360,
        "wires": [
            [
                "bddb0d31c9ea7dba"
            ]
        ]
    },
    {
        "id": "a74e3ab097668eee",
        "type": "switch",
        "z": "6e08da7314bcfdec",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "259",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "260",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "261",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "262",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "263",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "264",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 8,
        "x": 520,
        "y": 260,
        "wires": [
            [
                "3ce2f5b60839caa4"
            ],
            [
                "3ce2f5b60839caa4"
            ],
            [
                "4f6b4b23c4a90f0d"
            ],
            [
                "4f6b4b23c4a90f0d"
            ],
            [
                "4f6b4b23c4a90f0d"
            ],
            [
                "4f6b4b23c4a90f0d"
            ],
            [
                "4f6b4b23c4a90f0d"
            ],
            [
                "4f6b4b23c4a90f0d"
            ]
        ]
    },
    {
        "id": "3ce2f5b60839caa4",
        "type": "template",
        "z": "6e08da7314bcfdec",
        "name": "GPIO設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `devices`\nSET\n  `is_save_data` = :isSaveData,\n  `is_save_count` = :isSaveCount\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "b21d6e104cea9579"
            ]
        ]
    },
    {
        "id": "b21d6e104cea9579",
        "type": "mysql",
        "z": "6e08da7314bcfdec",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6b4b23c4a90f0d",
        "type": "template",
        "z": "6e08da7314bcfdec",
        "name": "I2C設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `devices`\nSET\n  `is_save_data` = :isSaveData,\n  `is_save_count` = :isSaveCount\nWHERE\n  `device_id` = :deviceId;\n\nUPDATE\n  `i2c_device_configs`\nSET\n  `output_interval` = :outputInterval\nWHERE\n  `i2c_device_config_id` = :deviceConfigId;",
        "output": "str",
        "x": 750,
        "y": 260,
        "wires": [
            [
                "b21d6e104cea9579"
            ]
        ]
    },
    {
        "id": "a40bc34bb399ae5b",
        "type": "switch",
        "z": "6e08da7314bcfdec",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "b8ccf3e74204dda7"
            ],
            [
                "a74e3ab097668eee"
            ],
            [
                "04a0a5e9decaeb22"
            ],
            [
                "f01e7d8cfc9250c8"
            ]
        ]
    },
    {
        "id": "e9c520851c914045",
        "type": "template",
        "z": "6e08da7314bcfdec",
        "name": "BLE設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `devices`\nSET\n  `is_save_data` = :isSaveData,\n  `is_save_count` = :isSaveCount\nWHERE\n  `device_id` = :deviceId;\n\nUPDATE\n  `ble_device_configs`\nSET\n  `advertise_interval` = :advertiseInterval,\n  `uplink_interval` = :uplinkInterval\nWHERE\n  `ble_device_config_id` = :deviceConfigId;",
        "output": "str",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "b21d6e104cea9579"
            ]
        ]
    },
    {
        "id": "f3466737ae1cdae7",
        "type": "template",
        "z": "6e08da7314bcfdec",
        "name": "HTTP設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `devices`\nSET\n  `is_save_data` = :isSaveData,\n  `is_save_count` = :isSaveCount\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 760,
        "y": 340,
        "wires": [
            [
                "b21d6e104cea9579"
            ]
        ]
    },
    {
        "id": "7ab1d64276756ae1",
        "type": "template",
        "z": "6e08da7314bcfdec",
        "name": "USB設定更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `devices`\nSET\n  `is_save_data` = :isSaveData,\n  `is_save_count` = :isSaveCount\nWHERE\n  `device_id` = :deviceId;\n\n",
        "output": "str",
        "x": 750,
        "y": 380,
        "wires": [
            [
                "b21d6e104cea9579"
            ]
        ]
    },
    {
        "id": "a1831a557bf0b9fa",
        "type": "exec",
        "z": "5c990f7436d9ded3",
        "command": "hostname -I",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "844e22b9767c8414"
            ],
            [],
            []
        ]
    },
    {
        "id": "e47df7ecc5e9ca46",
        "type": "function",
        "z": "5c990f7436d9ded3",
        "name": "IPアドレスをglobalに保持",
        "func": "const ipAddresses = msg.payload.trim().split(' ');\nif (ipAddresses.length === 1 && ipAddresses[0] === '') {\n    global.set('ipAddresses', ['127.0.0.1']);\n} else {\n    ipAddresses.push('127.0.0.1');\n    global.set('ipAddresses', ipAddresses);\n}\nmsg.payload = msg.buffer;\ndelete msg.buffer;\ndelete msg.rc;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "26f87b1a351b4cd3"
            ]
        ]
    },
    {
        "id": "844e22b9767c8414",
        "type": "switch",
        "z": "5c990f7436d9ded3",
        "name": "",
        "property": "ipAddresses",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "e47df7ecc5e9ca46"
            ],
            [
                "e47df7ecc5e9ca46"
            ],
            [
                "e47df7ecc5e9ca46"
            ],
            [
                "833506fd60068fbf"
            ]
        ]
    },
    {
        "id": "06902b959d6c6e2f",
        "type": "change",
        "z": "5c990f7436d9ded3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buffer",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 180,
        "wires": [
            [
                "a1831a557bf0b9fa"
            ]
        ]
    },
    {
        "id": "26f87b1a351b4cd3",
        "type": "function",
        "z": "5c990f7436d9ded3",
        "name": "IPアドレス",
        "func": "const ipAddresses = global.get('ipAddresses') || [];\nfor (const ip of ipAddresses) {\n    if (msg.payload !== null && typeof msg.payload === 'object') {\n        msg.payload.ipAddress = ip;\n    } else {\n        msg.payload = ip;\n    }\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "833506fd60068fbf",
        "type": "function",
        "z": "5c990f7436d9ded3",
        "name": "新規もしくは削除されたIPがないか検索",
        "func": "const ipAddresses = msg.payload.trim().split(' ');\nconst searchAddresses = global.get('ipAddresses') || [];\n\n// '127.0.0.1'を保持するためのセット\nconst newAddresses = new Set(['127.0.0.1']);\n\n// searchaddressにあるが、ipaddressesにないIPを削除（何もしない）\nsearchAddresses.forEach(ip => {\n    if (ipAddresses.includes(ip)) {\n        newAddresses.add(ip);\n    }\n});\n\n// ipaddressesにあるが、searchaddressにないIPを追加\nipAddresses.forEach(ip => {\n    if (!searchAddresses.includes(ip) && ip !== '') {\n        newAddresses.add(ip);\n    }\n});\n\n// 新しい配列に変換\n\nconst result = Array.from(newAddresses);\nglobal.set('ipAddresses', result);\n\nmsg.payload = msg.buffer;\ndelete msg.buffer;\ndelete msg.rc;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "26f87b1a351b4cd3"
            ]
        ]
    },
    {
        "id": "b6be711ea788548f",
        "type": "function",
        "z": "8d853eb576531593",
        "name": "function 2",
        "func": "const queue = context.get('queue') || [];\nqueue.push(msg.payload);\ncontext.set('queue', queue);\n\nwhile (true) {\n    const data = queue.shift();\n    if (data == null) {\n        break;\n    }\n    setTimeout(() => node.send({ payload: data }), data * 1000);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "301a68c406d8e23d",
        "type": "mqtt out",
        "z": "baa69f6c03978bf4",
        "name": "MQTT送信",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "124495b5a0aade14",
        "x": 390,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f93ad3863a0e95a2",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Sensor Data",
        "mode": "link",
        "links": [
            "07b1ce0416ced215",
            "87ac166ccde292af",
            "8fb4e83e689a7958",
            "b1e463e090ae7902",
            "bd65ac2b738c17d1",
            "c6ef1ce0da7c6c7b"
        ],
        "x": 415,
        "y": 3720,
        "wires": []
    },
    {
        "id": "b67f3e4f39d4e62d",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "BravePI 受信",
        "serial": "7e27d1824e7836c4",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "53016c6cf322bdb7",
                "8c378c45dfa7250a"
            ]
        ]
    },
    {
        "id": "53016c6cf322bdb7",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "JSONデコード",
        "func": "if (msg.payload == null) {\n    context.set('buffer', Buffer.from([]));\n    context.set('stack');\n    return;\n}\n\nconst old = context.get('buffer') || Buffer.from([]);\ncontext.set('buffer', Buffer.concat([old, msg.payload]));\n\nwhile (true) {\n\n    /** @type Buffer */\n    const buffer = context.get('buffer');\n\n    // ヘッダーの長さに満たない場合終了\n    if (buffer.length < 14) {\n        break;\n    }\n\n    // デコード\n    const dataLength = buffer.readUint16LE(0);\n    const deviceNumber = buffer.readBigUInt64LE(2).toString(16).toLowerCase();\n    const sensorType = buffer.readUint16LE(10);\n    const rssi = buffer.readInt8(12);\n    const flag = buffer.readUint8(13);\n\n    // データ領域を取得\n    const dataBuffer = buffer.subarray(14);\n\n    // データ領域がデータサイズに満たない場合終了\n    if (dataBuffer.length < dataLength) {\n        break;\n    }\n\n    const str = ('0000000000000000' + deviceNumber).slice(-16);\n    const key = [...Array(8)]\n        .map((_, x) => str.substring(x * 2, x * 2 + 2))\n        .join('')\n        .toLowerCase();\n\n    if (sensorType == 0) {\n\n        const trueSensorType = dataBuffer.readUint16LE(0);\n        const firmwareVersion = [...Array(3)].map((_, i) => dataBuffer.readUint8(2 + i)).join('.');\n        const timezone = dataBuffer.readUint8(5);\n        const bleMode = dataBuffer.readUint8(6);\n        const txPower = dataBuffer.readUint8(7);\n        const advertise = dataBuffer.readUint16LE(8);\n        const uplink = dataBuffer.readUint32LE(10);\n        const data = (() => {\n            switch (trueSensorType) {\n                case 257:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        chattering: dataBuffer.readUInt16LE(15),\n                    };\n                case 259:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        samplingInterval: dataBuffer.readUint8(15),\n                        ch1Gain: dataBuffer.readUint8(16),\n                        ch2Gain: dataBuffer.readUint8(17),\n                        ch1HysteresisHigh: dataBuffer.readInt32LE(18),\n                        ch1HysteresisLow: dataBuffer.readInt32LE(22),\n                        ch2HysteresisHigh: dataBuffer.readInt32LE(26),\n                        ch2HysteresisLow: dataBuffer.readInt32LE(30),\n                    };\n                case 261:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        samplingInterval: dataBuffer.readUint8(15),\n                        hysteresisHigh: dataBuffer.readInt16LE(16),\n                        hysteresisLow: dataBuffer.readInt16LE(18),\n                        thermocoupleType: dataBuffer.readUint8(19),\n                    };\n                case 262:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        samplingInterval: dataBuffer.readUint8(15),\n                        hysteresisHigh: dataBuffer.readUint8(16),\n                        hysteresisLow: dataBuffer.readUint8(17)\n                    };\n                case 263:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        samplingInterval: dataBuffer.readUint8(15),\n                        hysteresisHigh: dataBuffer.readInt32LE(16),\n                        hysteresisLow: dataBuffer.readInt32LE(20)\n                    };\n                case 260:\n                case 264:\n                    return {\n                        readMode: dataBuffer.readUint8(14),\n                        samplingInterval: dataBuffer.readUint8(15),\n                        hysteresisHigh: dataBuffer.readUint32LE(16),\n                        hysteresisLow: dataBuffer.readUint32LE(20)\n                    };\n                default:\n                    return {};\n            }\n        })();\n\n        // bufferを更新\n        context.set('buffer', buffer.subarray(14 + dataLength));\n\n        msg.payload = {\n            time: moment().valueOf(),\n            deviceNumber,\n            sensorType: trueSensorType,\n            rssi,\n            firmwareVersion,\n            timezone,\n            accessType: 0,\n            bleMode,\n            txPower,\n            advertise,\n            uplink,\n            // readMode,\n            ...data,\n            key\n        };\n        node.send([msg, null]);\n\n    } else {\n\n        const stack = context.get('stack') || Buffer.from([]);\n        const total = Buffer.concat([stack, dataBuffer.subarray(0, dataLength)]);\n\n        if (flag === 1) {\n            context.set('buffer', buffer.subarray(14 + dataLength));\n            context.set('stack', total);\n            continue;\n        }\n\n        // データ領域をデコード        \n        const battery = total.readUInt8(0);\n        const dataNum = total.readUint16LE(1);\n\n        const data = (() => {\n            const range = [...Array(dataNum)].map((_, x) => x);\n            switch (sensorType) {\n                case 257:\n                case 258:\n                    // 接点入出力は1byte\n                    return range\n                        .map(x => total.readUint8(3 + x));\n                case 260:\n                    // 距離センサーの場合は unsigned 16bit\n                    return range\n                        .map(x => total.readUint16LE(3 + x * 2))\n                        .filter(x => x <= 2000);\n                case 259:\n                    // ADCセンサーの場合は unsigned 16bit が 2ch分\n                    const adc = [...Array(dataNum * 2)].map((_, x) => total.readInt16LE(3 + x * 2));\n                    return range.flatMap(x => [adc[2 * x], adc[2 * x + 1]]);\n                case 263:\n                    // 差圧の場合はfloat\n                    return range\n                        .map(x => total.readFloatLE(3 + x * 4));\n                case 262:\n                    // 加速度の場合は32bit floatを3個ずつ\n                    const data = [...Array(dataNum * 3)].map((_, x) => total.readFloatLE(3 + x * 4));\n                    return range.flatMap(x => [\n                        data[3 * x],\n                        data[3 * x + 1],\n                        data[3 * x + 2],\n                        Math.abs(Math.sqrt(data[3 * x] ** 2 + data[3 * x + 1] ** 2 + data[3 * x + 2] ** 2) - 1000.0)\n                    ]).map(x => x / 1000.0);\n                default:\n                    // その他は 32bit float\n                    return range.map(x => total.readFloatLE(3 + x * 4));\n            }\n        })();\n\n        // bufferを更新\n        context.set('buffer', buffer.subarray(14 + dataLength));\n        context.set('stack');\n\n        // 出力\n        msg.payload = {\n            time: moment().valueOf(),\n            deviceNumber,\n            sensorType,\n            rssi,\n            battery,\n            accessType: 0,\n            values: data,\n            key,\n            received: true,\n        };\n        node.send([null, msg]);\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 940,
        "y": 280,
        "wires": [
            [
                "f5de0b5ad1396df8",
                "5462bf07939bddff"
            ],
            [
                "d6591b29961dfc9a",
                "bf01bf08a9f6aa1c",
                "6d4d55e10ee45b5e"
            ]
        ]
    },
    {
        "id": "8a9ac1571361d634",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "BravePI 送信",
        "serial": "7e27d1824e7836c4",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "36fdbbf0efac7bb3",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/opt3001.py -i",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "照度I2C (0x44)",
        "x": 660,
        "y": 1940,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "8e182b963aabfa25",
        "type": "subflow:8ebeefef09059e86",
        "z": "baa69f6c03978bf4",
        "name": "",
        "x": 900,
        "y": 2140,
        "wires": [
            [
                "8a9de1714f5cc667"
            ]
        ]
    },
    {
        "id": "731a03b771597037",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "デバイス削除",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DELETE FROM\n  `devices`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 440,
        "y": 3540,
        "wires": [
            [
                "eb5d8b9a6da8db56"
            ]
        ]
    },
    {
        "id": "a3312e2aa2d01cea",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Delete Device",
        "links": [
            "0be708bf719e0d2c"
        ],
        "x": 115,
        "y": 3540,
        "wires": [
            [
                "cbd7f5478cf70899"
            ]
        ]
    },
    {
        "id": "da39fb27a6475876",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Reload Devices",
        "links": [
            "dae37113175bf72d",
            "03b425d845fc45f5",
            "2bf0e71a789037b3",
            "6bd750f47369849d"
        ],
        "x": 115,
        "y": 3480,
        "wires": [
            [
                "30423da7bafab2fc"
            ]
        ]
    },
    {
        "id": "eb5d8b9a6da8db56",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 610,
        "y": 3540,
        "wires": [
            [
                "30423da7bafab2fc"
            ]
        ]
    },
    {
        "id": "4b49daf062747b11",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "DB接続時に実行",
        "scope": [
            "eb5d8b9a6da8db56"
        ],
        "x": 140,
        "y": 3360,
        "wires": [
            [
                "154c2556450160d5"
            ]
        ]
    },
    {
        "id": "4c37e06d345d5dd4",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "3c6501f20bf76cd0"
            ]
        ]
    },
    {
        "id": "74bbc5f96fc85eb4",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "PI通信開始",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "1a010d8e6f6df476"
            ]
        ]
    },
    {
        "id": "b4e4e0c29c840811",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 300,
        "wires": [
            [
                "53016c6cf322bdb7"
            ]
        ]
    },
    {
        "id": "fd8e7568e141f32f",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO OUTPUT",
        "func": "const outputNumbers = [17, 27, 24, 6, 13];\nconst time = moment().valueOf();\nconst sensors = global.get('sensors') || {};\nfor (let i = 0; i < outputNumbers.length; i++) {\n    const outputBcm = ('0' + outputNumbers[i]).slice(-2);\n    node.send({\n        payload: {\n            sensorType: 258,\n            key: i,\n            accessType: 1,\n            bcm: outputBcm,\n            time,\n            values: sensors[`258-${i}`]?.values ?? [0],\n            received: true,\n        }\n    });\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 540,
        "y": 2720,
        "wires": [
            [
                "047f011ab2143b91"
            ]
        ]
    },
    {
        "id": "d6591b29961dfc9a",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "4fd2d7848388bb44"
        ],
        "x": 1095,
        "y": 300,
        "wires": []
    },
    {
        "id": "4fd2d7848388bb44",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 6",
        "links": [
            "3926b2f55cef2891",
            "4a8e068a599ee613",
            "d6591b29961dfc9a"
        ],
        "x": 605,
        "y": 2680,
        "wires": [
            [
                "047f011ab2143b91"
            ]
        ]
    },
    {
        "id": "30423da7bafab2fc",
        "type": "subflow:9240fdb206d57ffc",
        "z": "baa69f6c03978bf4",
        "name": "",
        "x": 270,
        "y": 3480,
        "wires": [
            [
                "cb5501b738e5fa9f"
            ]
        ]
    },
    {
        "id": "a81a6cd0c7ae9412",
        "type": "subflow:c91ae0a3d8355cfb",
        "z": "baa69f6c03978bf4",
        "name": "",
        "env": [
            {
                "name": "input",
                "value": "sensorType",
                "type": "str"
            },
            {
                "name": "output",
                "value": "unit",
                "type": "str"
            }
        ],
        "x": 830,
        "y": 2940,
        "wires": [
            [
                "462d9ebb1aacf4c9",
                "14e2651fc609687d"
            ]
        ]
    },
    {
        "id": "b28265a809101c4e",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "カウント値更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `sensors`\nSET\n  `count` = :count\nWHERE\n  `sensor_id` = :sensorId;",
        "output": "str",
        "x": 640,
        "y": 3960,
        "wires": [
            [
                "4a8af9e080f66b96"
            ]
        ]
    },
    {
        "id": "4a8af9e080f66b96",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 810,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "65dd42e6ae82dbd1",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO入力情報付加",
        "func": "msg.payload = {\n    sensorType: 257,\n    key: 3,\n    accessType: 1,\n    values: [Number(!msg.payload)],\n    time: moment().valueOf(),\n    received: true,\n};\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify(msg.payload) });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 530,
        "y": 3040,
        "wires": [
            [
                "6bd22c2cd2c75580"
            ]
        ]
    },
    {
        "id": "ad117ebf2c33ed50",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "17",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "27",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "24",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 870,
        "y": 3620,
        "wires": [
            [
                "344e8da3fc16a2f9"
            ],
            [
                "b0d7d2a5fa04e3d3"
            ],
            [
                "e0351aa40972a2b5"
            ],
            [
                "c736deb7cd8cd111"
            ],
            [
                "1924cae183c49de2"
            ]
        ]
    },
    {
        "id": "bdbca114ba01ae60",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO入力情報付加",
        "func": "msg.payload = {\n    sensorType: 257,\n    key: 4,\n    accessType: 1,\n    values: [Number(!msg.payload)],\n    time: moment().valueOf(),\n    received: true,\n};\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify(msg.payload) });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 530,
        "y": 3120,
        "wires": [
            [
                "65f8bc0ac8deb6c0"
            ]
        ]
    },
    {
        "id": "6157a7cc9bc49e76",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO入力情報付加",
        "func": "msg.payload = {\n    sensorType: 257,\n    key: 0,\n    accessType: 1,\n    values: [Number(!msg.payload)],\n    time: moment().valueOf(),\n    received: true,\n};\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify(msg.payload) });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 530,
        "y": 2800,
        "wires": [
            [
                "e562af2f0685a748"
            ]
        ]
    },
    {
        "id": "a00ea48dcb272ae4",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO入力情報付加",
        "func": "msg.payload = {\n    sensorType: 257,\n    key: 2,\n    accessType: 1,\n    values: [Number(!msg.payload)],\n    time: moment().valueOf(),\n    received: true,\n};\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify(msg.payload) });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 530,
        "y": 2960,
        "wires": [
            [
                "9f633645468cd11f"
            ]
        ]
    },
    {
        "id": "d326ec3d9199c365",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "GPIO入力情報付加",
        "func": "msg.payload = {\n    sensorType: 257,\n    key: 1,\n    accessType: 1,\n    values: [Number(!msg.payload)],\n    time: moment().valueOf(),\n    received: true,\n};\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify(msg.payload) });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 530,
        "y": 2880,
        "wires": [
            [
                "d94b646abbe152de"
            ]
        ]
    },
    {
        "id": "e2e7307ea1d4e1b8",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 2280,
        "wires": [
            [
                "a52b5fed92cffa8d",
                "4d59794ec415674e",
                "fbc647f36ce42189",
                "dfbd7a98a0c6c681"
            ]
        ]
    },
    {
        "id": "3342a659347cb6b7",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp9600.py -a 98 -t",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "温度I2C (0x62)",
        "x": 660,
        "y": 2100,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "5fa130868b090321",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/vl53l1x.py -i",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "距離I2C (0x29)",
        "x": 660,
        "y": 2020,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "7b9fd3e8edbba0db",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "加速度I2C",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 310,
        "y": 1800,
        "wires": [
            [
                "fc4901e1523ddbf9"
            ]
        ]
    },
    {
        "id": "c72e0cc2d3cba823",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1800,
        "wires": [
            [
                "fc4901e1523ddbf9"
            ]
        ]
    },
    {
        "id": "fc4901e1523ddbf9",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/lombscargle.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "加速度I2C (0x19)",
        "x": 670,
        "y": 1800,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "8a9de1714f5cc667",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "情報付加",
        "func": "msg.payload = {\n    ...msg.payload,\n    accessType: 1,\n    key: '0x' + (('0' + msg.payload.address.toString(16).toLowerCase()).slice(-2)),\n    received: true,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 2140,
        "wires": [
            [
                "4a8e068a599ee613"
            ]
        ]
    },
    {
        "id": "a6024f11a05b7075",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Spectrogram",
        "mode": "link",
        "links": [
            "8d568523a7cfd462",
            "af1fc3dc1ff48966"
        ],
        "x": 415,
        "y": 3840,
        "wires": []
    },
    {
        "id": "d92d6351354c8301",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.isCountUpdated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 3960,
        "wires": [
            [
                "b28265a809101c4e"
            ]
        ]
    },
    {
        "id": "77a1bcb318165fbf",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Clear Count",
        "links": [
            "83379f9d3634e9fb"
        ],
        "x": 115,
        "y": 3900,
        "wires": [
            [
                "f425fdd834478e29"
            ]
        ]
    },
    {
        "id": "9eb8703c472c1a43",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "全デバイス取得",
        "func": "const devices = flow.get('devices') || {};\nconst init = flow.get('init') || false;\nif (Object.keys(devices).length === 0) {\n    flow.set('devices', devices);\n}\n\nconst topics = global.get('mqttTopics') || [];\nconst mailAddresses = global.get('mailAddresses') || [];\nconst sensors = global.get('sensors') || {};\n\nconst all = msg.payload.reduce((acc, payload) => {\n    if (acc[payload.accessType] == null) {\n        acc[payload.accessType] = {};\n    }\n    if (acc[payload.accessType][payload.key] == null) {\n        acc[payload.accessType][payload.key] = payload;\n    }\n    if (devices[payload.accessType] && devices[payload.accessType][payload.key]) {\n        const device = devices[payload.accessType][payload.key];\n        payload.battery = device.battery;\n        payload.rssi = device.rssi;\n        payload.time = device.time;\n        payload.text = device.text;\n        payload.values = device.values;\n        payload.received = device.received;\n        payload.sensors.forEach((s, i) => s.signal = device.sensors[i].signal);\n    }\n\n    payload.sensors.forEach((s) => {\n        const outputIds = payload.gpioOutputSensors\n            .filter(x => x.sensorId === s.sensorId)\n            .map(x => x.gpioOutputSensorId);\n        s.gpioOutputSensors = msg.payload\n            .flatMap(x => x.sensors.map(s => ({ device: x, sensor: s })))\n            .filter(x => outputIds.includes(x.sensor.sensorId));\n\n        const mqttTopicIds = payload.mqttTopics.filter(x => x.sensorId === s.sensorId).map(x => x.mqttTopicId);\n        s.mqttTopics = topics.filter(x => mqttTopicIds.includes(x.mqttTopicId));\n\n        const mailAddressIds = payload.mailAddresses.filter(x => x.sensorId === s.sensorId).map(x => x.mailAddressId);\n        s.mailAddresses = mailAddresses.filter(x => mailAddressIds.includes(x.mailAddressId));\n    });\n    delete payload.gpioOutputSensors;\n    delete payload.mqttTopics;\n    delete payload.mailAddresses;\n\n    if (payload.sensorType === 258 && payload.accessType === 1) {\n        if (init) {\n            payload.values = payload.sensors.map(s => s.initState);\n            payload.changed = true;\n        } else if (payload.values == null) {\n            payload.values = Array.from(Array(payload.sensors.length)).fill(0);\n            payload.changed = true;\n        }\n        payload.text = payload.getText();\n        if (payload.accessType !== 1) {\n            delete payload.time;\n        }\n    }\n    const advance = (() => {\n        if (payload.accessType === 1 && payload.sensorType <= 258) {\n            return sensors[`${payload.sensorType}-${payload.key}`];\n        } else {\n            return sensors[payload.key];\n        }\n    })();\n    if (advance) {\n        payload.dest = advance.dest;\n        payload.values = payload.values || advance.values;\n        payload.time = advance.time;\n        payload.battery = advance.battery;\n        payload.rssi = advance.rssi;\n        payload.received = true;\n        payload.text = advance.text;\n    }\n    return acc;\n}, {});\nflow.set('devices', all);\nmsg.payload = Object.values(all).flatMap(x => Object.values(x));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 680,
        "y": 3480,
        "wires": [
            [
                "b8748f5ced42d8a8"
            ]
        ]
    },
    {
        "id": "cb5501b738e5fa9f",
        "type": "subflow:c91ae0a3d8355cfb",
        "z": "baa69f6c03978bf4",
        "name": "",
        "env": [
            {
                "name": "input",
                "value": "sensorType",
                "type": "str"
            },
            {
                "name": "output",
                "value": "unit",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 3480,
        "wires": [
            [
                "9eb8703c472c1a43"
            ]
        ]
    },
    {
        "id": "e7ba768d9aaf0d9b",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "All Device",
        "links": [
            "11ff59d932d21517",
            "c554f7c10cbd99d7",
            "1cedc082f9638703",
            "dff35859a23d3e19",
            "abfad8f5461518aa"
        ],
        "x": 115,
        "y": 4040,
        "wires": [
            [
                "e5d6cc020b800b9c"
            ]
        ]
    },
    {
        "id": "e5d6cc020b800b9c",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "登録済みデバイス",
        "func": "const devices = flow.get('devices') || {};\nmsg.payload = Object.values(devices).flatMap(x => Object.values(x));\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 4040,
        "wires": [
            [
                "71ed9cce9eab05ba"
            ]
        ]
    },
    {
        "id": "71ed9cce9eab05ba",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "All Device",
        "mode": "link",
        "links": [
            "07b1ce0416ced215",
            "2eda8772da43a977",
            "997c028051ceead1",
            "bd65ac2b738c17d1"
        ],
        "x": 405,
        "y": 4040,
        "wires": []
    },
    {
        "id": "f05d5101752c3683",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "登録済みデータ",
        "func": "const devices = flow.get('devices') || {};\ndelete msg.socketid;\n\nfunction getDevice(payload) {\n    const sameTypes = devices[payload.accessType];\n    if (sameTypes == null) {\n        return;\n    }\n    const device = sameTypes[payload.key];\n    if (device == null) {\n        return;\n    }\n    if (device.sensorType !== payload.sensorType) {\n        return;\n    }\n    return device;\n}\n\nfunction update(init, payload) {\n    const device = getDevice(payload);\n    if (device == null) {\n        return [];\n    }\n    if (device && payload.values) {\n        device.battery = payload.battery;\n        device.rssi = payload.rssi;\n        device.time = payload.time;\n        device.dest = payload.dest;\n        device.accessType = payload.accessType;\n        device.received = payload.received;//true;//(msg.payload.accessType === 1 && msg.payload.sensorType <= 258);\n\n        if (device.sensorType === 259) {\n            device.rawValues = [...payload.values];\n            device.values = [...Array(device.channels.length)]\n                .map((_, i) => (payload.values[i] - device.sensors[i].offset) * device.sensors[i].magnification);\n            device.text = device.getText();\n            return [device];\n        } else if (device.sensorType === 257 && device.accessType === 0) {\n            // BravePI接点入力で同一の値を連続して受信したときには反対の値もあったことにする\n            if (!init && device.values && device.values.length !== 0 && payload.values.length !== 0 && device.values[0] === payload.values[0]) {\n                device.values = payload.values;\n                device.text = device.getText();\n                const previous = { ...device };\n                previous.values = payload.values.map(x => Math.abs(x - 1));\n                previous.time = payload.time - 1;\n                previous.text = previous.getText();\n                return [previous, device];\n            } else {\n                device.values = payload.values;\n                device.text = device.getText();\n                return [device];\n            }\n        } else if (device.sensorType === 257 || device.sensorType === 258 || device.sensorType === 296) {\n            device.changed = device.changed || device.values == null ? true : device.values.some((v, i) => v !== payload.values[i]);\n            device.values = payload.values;\n            device.text = device.getText();\n            return [device];\n        } else {\n            if (payload.values.length === device.channels.length) {\n                device.values = [...Array(device.channels.length)]\n                    .map((_, i) => payload.values[i] - device.sensors[i].offset);\n            }\n            device.text = device.getText();\n            return [device];\n        }\n    }\n}\n\nif (msg.payload.sensorType === 262 && msg.payload.accessType === 1 && msg.payload.tag === 'spectrogram') {\n    const device = getDevice(msg.payload);\n    if (device) {\n        msg.payload = {\n            ...msg.payload,\n            deviceName: device.deviceName,\n            isSaveData: device.isSaveData\n        };\n        return [null, null, msg, null];\n    }\n} else {\n    const devices = update(msg.init, msg.payload);\n    if (devices) {\n        for (const device of devices) {\n            device.exceededThreshold(\n                s => node.send([null, null, null, { topic: 'count', payload: s }]),\n                g => node.send([([0, 3, 4].includes(g.accessType) ? null : { topic: 'value', payload: g }), { topic: 'tx', payload: g }, null, null])\n            );\n\n            const m = { topic: 'value', payload: device };\n            if (device.sensorType === 258 && device.accessType === 1) {\n                node.send([m, m, null, null]);\n            } else {\n                node.send([m, null, null, null]);\n            }\n        }\n    }\n}",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 240,
        "y": 3820,
        "wires": [
            [
                "f93ad3863a0e95a2"
            ],
            [
                "136891c2a668d0e6"
            ],
            [
                "a6024f11a05b7075"
            ],
            [
                "50a0fb568a4136d3"
            ]
        ]
    },
    {
        "id": "f425fdd834478e29",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "カウントクリア",
        "func": "const devices = flow.get('devices') || {};\n\nfunction getDevice(payload) {\n    const sameTypes = devices[payload.accessType];\n    if (sameTypes == null) {\n        return;\n    }\n    const device = sameTypes[payload.key];\n    if (device == null) {\n        return;\n    }\n    return device;\n}\n\nfunction getSensor(payload) {\n    const device = getDevice(payload);\n    if (device == null) {\n        return;\n    }\n    const sensors = device.sensors.filter(x => x.channel === payload.channel);\n    if (sensors.length) {\n        return sensors[0];\n    }\n}\n\nconst device = getDevice(msg.payload);\nconst sensor = getSensor(msg.payload);\nif (device && sensor) {\n    sensor.count = 0;\n    msg.topic = 'count';\n    msg.payload = {\n        ...device,\n        ...sensor,\n        isCountUpdated: 1\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 3900,
        "wires": [
            [
                "50a0fb568a4136d3"
            ]
        ]
    },
    {
        "id": "366b354d9138e657",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Init All",
        "mode": "link",
        "links": [
            "2eda8772da43a977",
            "68808e89bb5527b6",
            "7fab3a5815c02838",
            "8fb4e83e689a7958",
            "a27cd7e9e31e3be1",
            "d70c1a105d9a96f8",
            "f0d619ee68f8a93a",
            "07b1ce0416ced215"
        ],
        "x": 1015,
        "y": 3440,
        "wires": []
    },
    {
        "id": "d460bb123636ad70",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Raw Data",
        "mode": "link",
        "links": [
            "d70c1a105d9a96f8"
        ],
        "x": 1135,
        "y": 2920,
        "wires": []
    },
    {
        "id": "462d9ebb1aacf4c9",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "neq",
                "v": "spectrogram",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 2920,
        "wires": [
            [
                "d460bb123636ad70"
            ],
            [
                "d460bb123636ad70"
            ]
        ]
    },
    {
        "id": "3768a6288e38c984",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "センサー設定取得",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `sensor_type_id` AS sensorType,\n  `sensor_type_text` AS sensorTypeName,\n  `measurement`\nFROM\n  `sensor_types`\nORDER BY\n  `sensor_type_id`;\n\nSELECT\n  `sensor_type_id` AS sensorType,\n  `channel`,\n  `channel_name` AS channelName,\n  `channel_index` AS channelIndex,\n  `unit`,\n  `fraction`,\n  `hysteresis_min` AS hysteresisMin,\n  `hysteresis_max` AS hysteresisMax,\n  `hysteresis_step` AS hysteresisStep,\n  `hysteresis_default` AS hysteresisDefault,\n  `offset_range` AS offsetRange\nFROM\n  `sensor_channels`\nORDER BY\n  `sensor_channel_id`;\n",
        "output": "str",
        "x": 270,
        "y": 3420,
        "wires": [
            [
                "ac974935810bc99a"
            ]
        ]
    },
    {
        "id": "ac974935810bc99a",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 450,
        "y": 3420,
        "wires": [
            [
                "ac1f13403f0e58c8"
            ]
        ]
    },
    {
        "id": "ac1f13403f0e58c8",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "センサー設定変換",
        "func": "const sensorTypes = msg.payload[0].reduce((acc, v) => {\n    v.channels = [];\n    acc[v.sensorType] = v;\n    return acc;\n}, {});\n\nmsg.payload[1].forEach(x => sensorTypes[x.sensorType].channels.push(x));\nmsg.payload = sensorTypes;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3420,
        "wires": [
            [
                "7e0d046d29946fd6"
            ]
        ]
    },
    {
        "id": "7e0d046d29946fd6",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "センサー設定保存",
        "rules": [
            {
                "t": "set",
                "p": "sensorTypes",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 3420,
        "wires": [
            [
                "30423da7bafab2fc"
            ]
        ]
    },
    {
        "id": "08c91603636a40ae",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 3320,
        "wires": [
            [
                "6b7eae0fd1f64816"
            ]
        ]
    },
    {
        "id": "d46e1b7e3b22f12a",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 12",
        "links": [
            "0ded2155f7b9a803"
        ],
        "x": 115,
        "y": 3420,
        "wires": [
            [
                "3768a6288e38c984"
            ]
        ]
    },
    {
        "id": "14e2651fc609687d",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "b3f6c20f2ca45d50"
        ],
        "x": 975,
        "y": 2960,
        "wires": []
    },
    {
        "id": "b3f6c20f2ca45d50",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Registered Data",
        "links": [
            "14e2651fc609687d",
            "971a02248283ad0f",
            "c1629cfb73f4f451",
            "09f1d5dcfce92cd8",
            "fddf10c0e7f07a1a"
        ],
        "x": 115,
        "y": 3820,
        "wires": [
            [
                "f05d5101752c3683"
            ]
        ]
    },
    {
        "id": "6833af049d0f8994",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp9600.py -a 97 -t",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "温度I2C (0x61)",
        "x": 660,
        "y": 2180,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "c95b86a1b98afd3e",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp9600.py -a 99 -t",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "温度I2C (0x63)",
        "x": 660,
        "y": 2260,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "09513717abc83630",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp9600.py -a 101 -t",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "温度I2C (0x65)",
        "x": 660,
        "y": 2340,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "a27cd7e9e31e3be1",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 14",
        "links": [
            "366b354d9138e657"
        ],
        "x": 95,
        "y": 2220,
        "wires": [
            [
                "0374a53909fc0472"
            ]
        ]
    },
    {
        "id": "0374a53909fc0472",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "分岐処理",
        "func": "const i2cTemps = msg.payload.filter(x => x.accessType === 1 && x.sensorType === 261);\nconst addresses = [0x62, 0x61, 0x63, 0x65];\nfor (let i = 0; i < addresses.length; i++) {\n    const address = addresses[i];\n    const device = i2cTemps.find(x => x.address === address);\n    const send = [null, null, null, null];\n    if (device) {\n        const thermocouple = device.thermocouples[device.sensors[0].thermocoupleType] || 'K';\n        send[i] = { payload: `${thermocouple} -i ${device.outputInterval}` };\n    } else {\n        send[i] = { payload: 'K' };\n    }\n    node.send(send);\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2220,
        "wires": [
            [
                "4272ae60af707daa",
                "dfbd7a98a0c6c681"
            ],
            [
                "fbc647f36ce42189",
                "464465a026f658bc"
            ],
            [
                "cb53cfeca8bb69dd",
                "4d59794ec415674e"
            ],
            [
                "4b68e1ff30d42b2a",
                "a52b5fed92cffa8d"
            ]
        ]
    },
    {
        "id": "4272ae60af707daa",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2120,
        "wires": [
            [
                "3342a659347cb6b7"
            ]
        ]
    },
    {
        "id": "dfbd7a98a0c6c681",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2080,
        "wires": [
            [
                "3342a659347cb6b7"
            ]
        ]
    },
    {
        "id": "fbc647f36ce42189",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2160,
        "wires": [
            [
                "6833af049d0f8994"
            ]
        ]
    },
    {
        "id": "464465a026f658bc",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2200,
        "wires": [
            [
                "6833af049d0f8994"
            ]
        ]
    },
    {
        "id": "4d59794ec415674e",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2240,
        "wires": [
            [
                "c95b86a1b98afd3e"
            ]
        ]
    },
    {
        "id": "cb53cfeca8bb69dd",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2280,
        "wires": [
            [
                "c95b86a1b98afd3e"
            ]
        ]
    },
    {
        "id": "a52b5fed92cffa8d",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2320,
        "wires": [
            [
                "09513717abc83630"
            ]
        ]
    },
    {
        "id": "4b68e1ff30d42b2a",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2360,
        "wires": [
            [
                "09513717abc83630"
            ]
        ]
    },
    {
        "id": "154c2556450160d5",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 3360,
        "wires": [
            [
                "6b7eae0fd1f64816"
            ]
        ]
    },
    {
        "id": "9da87eec9e026635",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "分岐処理",
        "func": "const i2cAdcs = msg.payload.filter(x => x.accessType === 1 && x.sensorType === 259);\nconst addresses = [0x68, 0x6B, 0x6F];\nfor (let i = 0; i < addresses.length; i++) {\n    // const address = addresses[i];\n    // const device = i2cAdcs.find(x => x.address === address);\n    const send = [null, null, null];\n    // if (device) {\n    //     const thermocouple = device.thermocouples[device.sensors[0].thermocoupleType] || 'K';\n    //     // send[i] = { payload: thermocouple };\n    //     // send[i] = { gain:  };\n    // } else {\n        send[i] = {};\n    // }\n    node.send(send);\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2480,
        "wires": [
            [
                "f50cc6bff5ae9e62",
                "a7ff103fa1207a8d"
            ],
            [
                "7a45856309479d0d",
                "cc3762b0d6e16c1a"
            ],
            [
                "88957f41fda80bbb",
                "6e72cdaf167c8c50"
            ]
        ]
    },
    {
        "id": "23110accba978d72",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 2540,
        "wires": [
            [
                "f50cc6bff5ae9e62",
                "7a45856309479d0d",
                "88957f41fda80bbb"
            ]
        ]
    },
    {
        "id": "68808e89bb5527b6",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 15",
        "links": [
            "366b354d9138e657"
        ],
        "x": 95,
        "y": 2480,
        "wires": [
            [
                "9da87eec9e026635"
            ]
        ]
    },
    {
        "id": "360a8e72576c3256",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp3427.py -a 104",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "電圧I2C (0x68)",
        "x": 660,
        "y": 2420,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "f50cc6bff5ae9e62",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2400,
        "wires": [
            [
                "360a8e72576c3256"
            ]
        ]
    },
    {
        "id": "a7ff103fa1207a8d",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2440,
        "wires": [
            [
                "360a8e72576c3256"
            ]
        ]
    },
    {
        "id": "e67bec416ecbc1d1",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp3427.py -a 107",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "電圧I2C (0x6B)",
        "x": 660,
        "y": 2500,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "7a45856309479d0d",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2480,
        "wires": [
            [
                "e67bec416ecbc1d1"
            ]
        ]
    },
    {
        "id": "cc3762b0d6e16c1a",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2520,
        "wires": [
            [
                "e67bec416ecbc1d1"
            ]
        ]
    },
    {
        "id": "f15dd069048c5799",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/mcp3427.py -a 111",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "電圧I2C (0x6F)",
        "x": 660,
        "y": 2580,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "88957f41fda80bbb",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2560,
        "wires": [
            [
                "f15dd069048c5799"
            ]
        ]
    },
    {
        "id": "6e72cdaf167c8c50",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2600,
        "wires": [
            [
                "f15dd069048c5799"
            ]
        ]
    },
    {
        "id": "bcab78e498f8fa29",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "python3 ./.node-red/python/sdp810.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "差圧I2C (0x25)",
        "x": 660,
        "y": 1860,
        "wires": [
            [
                "8e182b963aabfa25"
            ],
            [],
            []
        ]
    },
    {
        "id": "c0b5216dd80d572a",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "差圧I2C",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 320,
        "y": 1860,
        "wires": [
            [
                "bcab78e498f8fa29"
            ]
        ]
    },
    {
        "id": "897bde2d3c94e1a3",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1860,
        "wires": [
            [
                "bcab78e498f8fa29"
            ]
        ]
    },
    {
        "id": "85cdcea7bcd70a34",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "PI通信停止",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "0fe3a63c83b844d2"
            ]
        ]
    },
    {
        "id": "3c6501f20bf76cd0",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "通信開始",
        "func": "const now = moment();\nconst start = Buffer.from(new Uint8Array([1, 1]).buffer);\nconst local = Buffer.from(new Uint32Array([now.valueOf() / 1000]).buffer);\nconst utc = Buffer.from(new Uint32Array([now.utc().valueOf() / 1000]).buffer);\nmsg.payload = Buffer.concat([start, local, utc]);\nsetTimeout(() => { flow.set('bravepi', true); }, 1000);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "ef66e0f6627635ad"
            ]
        ]
    },
    {
        "id": "0fe3a63c83b844d2",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "通信停止",
        "func": "const now = moment();\nconst start = Buffer.from(new Uint8Array([1, 0]).buffer);\nconst local = Buffer.from(new Uint32Array([now.valueOf() / 1000]).buffer);\nconst utc = Buffer.from(new Uint32Array([now.utc().valueOf() / 1000]).buffer);\nmsg.payload = Buffer.concat([start, local, utc]);\nflow.set('bravepi', false);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "b4e4e0c29c840811",
                "ef66e0f6627635ad"
            ]
        ]
    },
    {
        "id": "0c547ba84d1793ff",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BravePi通信停止",
        "links": [
            "c078f9733f6f554b"
        ],
        "x": 295,
        "y": 320,
        "wires": [
            [
                "0fe3a63c83b844d2"
            ]
        ]
    },
    {
        "id": "f5de0b5ad1396df8",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "パラメータ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 260,
        "wires": []
    },
    {
        "id": "5462bf07939bddff",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "BravePi Params",
        "mode": "link",
        "links": [
            "2578b4b9f2dab829",
            "5240e719352aa8cc",
            "a8e13308536f89cb",
            "b58c1bd435fb6d0f"
        ],
        "x": 1095,
        "y": 260,
        "wires": []
    },
    {
        "id": "f901eec93520198a",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Request Prams",
        "links": [
            "2719d595756d38b5",
            "4c2673b9c18691bb",
            "836e3befc2c83766",
            "f888826ad3651724"
        ],
        "x": 215,
        "y": 140,
        "wires": [
            [
                "b3b22f2a63c716a5"
            ]
        ]
    },
    {
        "id": "b3b22f2a63c716a5",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "パラメータ要求",
        "func": "if (msg.payload == null) {\n    return;\n}\n\nconst type = 0x00;\nconst deviceNumbers = Buffer.from([...Array(8)]\n    .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n    .map(x => parseInt(x, 16)))\n    .reverse();\nconst sensorType = [0, 0];\nconst command = 0x0D;\nconst flag = 0;\nconst data = [0];\nconst length = [data.length, 0];\n\nmsg.payload = Buffer.from([type, ...length, ...deviceNumbers, ...sensorType, command, flag, ...data]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "ef66e0f6627635ad"
            ]
        ]
    },
    {
        "id": "cef9259f21d87cd7",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Send Prams",
        "links": [
            "4f0d8cc9b47710f3",
            "b7f93746bb59eb58",
            "dd230e2c84bca84a"
        ],
        "x": 215,
        "y": 100,
        "wires": [
            [
                "70e70af07d0fdbb5",
                "e14bc4a6889a46ba"
            ]
        ]
    },
    {
        "id": "70e70af07d0fdbb5",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "パラメータ設定",
        "func": "const type = 0x00;\nconst deviceNumbers = Buffer.from([...Array(8)]\n    .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n    .map(x => parseInt(x, 16)))\n    .reverse();\nconst sensorType = [0, 0];\nconst command = 0x05;\nconst flag = 0;\nconst trueSensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\nconst timezone = Buffer.from(new Uint8Array([msg.payload.timezone]).buffer);\nconst txPower = Buffer.from(new Uint8Array([msg.payload.txPower]).buffer);\nconst advertiseInterval = Buffer.from(new Uint16Array([msg.payload.advertise]).buffer);\nconst extra = (() => {\n    switch (msg.payload.sensorType) {\n        case 257:\n            return [\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.chattering]).buffer),\n            ];\n        case 259:\n            return [\n                Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.samplingInterval]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.ch1Gain]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.ch2Gain]).buffer),\n                Buffer.from(new Int32Array([msg.payload.ch1HysteresisHigh]).buffer),\n                Buffer.from(new Int32Array([msg.payload.ch1HysteresisLow]).buffer),\n                Buffer.from(new Int32Array([msg.payload.ch2HysteresisHigh]).buffer),\n                Buffer.from(new Int32Array([msg.payload.ch2HysteresisLow]).buffer),\n            ];\n        case 261:\n            return [\n                Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.samplingInterval]).buffer),\n                Buffer.from(new Int16Array([msg.payload.hysteresisHigh]).buffer),\n                Buffer.from(new Int16Array([msg.payload.hysteresisLow]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.thermocoupleType]).buffer),\n            ];\n        case 262:\n            return [\n                Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.samplingInterval]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.hysteresisHigh]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.hysteresisLow]).buffer),\n            ];\n        case 263:\n            return [\n                Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.samplingInterval]).buffer),\n                Buffer.from(new Int32Array([msg.payload.hysteresisHigh]).buffer),\n                Buffer.from(new Int32Array([msg.payload.hysteresisLow]).buffer)\n            ];\n        case 260:\n        case 264:\n            return [\n                Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer),\n                Buffer.from(new Uint8Array([msg.payload.samplingInterval]).buffer),\n                Buffer.from(new Uint32Array([msg.payload.hysteresisHigh]).buffer),\n                Buffer.from(new Uint32Array([msg.payload.hysteresisLow]).buffer)\n            ];\n        default:\n            return Buffer.from([]);\n    }\n})();\nconst data = Buffer.concat([\n    trueSensorType,\n    timezone,\n    txPower,\n    advertiseInterval,\n    ...extra\n]);\nconst length = [data.length, 0];\nconst header = Buffer.from([\n    type,\n    ...length,\n    ...deviceNumbers,\n    ...sensorType,\n    command,\n    flag\n]);\n\nmsg.payload = Buffer.concat([header, data]);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "ef66e0f6627635ad"
            ]
        ]
    },
    {
        "id": "e14bc4a6889a46ba",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "b3b22f2a63c716a5"
            ]
        ]
    },
    {
        "id": "9779a81a7923c617",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BravePi通信開始",
        "links": [
            "2840b613a7aa2f83",
            "46515f158a9768af",
            "76ec862b25824cb1",
            "91f647435d1f6c28",
            "a7b403b7e7b0660f",
            "3be9f2d3c21c2f8a"
        ],
        "x": 215,
        "y": 200,
        "wires": [
            [
                "1a010d8e6f6df476"
            ]
        ]
    },
    {
        "id": "ba1a2aab64783bd3",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "送受信ログ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "7fab3a5815c02838",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 24",
        "links": [
            "366b354d9138e657"
        ],
        "x": 95,
        "y": 2000,
        "wires": [
            [
                "64b56952d2b34039"
            ]
        ]
    },
    {
        "id": "64b56952d2b34039",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "分岐処理",
        "func": "const i2cDistance = msg.payload.find(x => x.accessType === 1 && x.sensorType === 260);\nif (i2cDistance) {\n    msg.payload = i2cDistance.outputInterval;\n} else {\n    msg.payload = 1000;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2000,
        "wires": [
            [
                "5f4f3fae94d1e21a",
                "090f86b687ee436f"
            ]
        ]
    },
    {
        "id": "090f86b687ee436f",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 2040,
        "wires": [
            [
                "5fa130868b090321"
            ]
        ]
    },
    {
        "id": "5f4f3fae94d1e21a",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2000,
        "wires": [
            [
                "5fa130868b090321"
            ]
        ]
    },
    {
        "id": "d4a11d2be3da5635",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 2040,
        "wires": [
            [
                "5f4f3fae94d1e21a"
            ]
        ]
    },
    {
        "id": "f0d619ee68f8a93a",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 25",
        "links": [
            "366b354d9138e657"
        ],
        "x": 95,
        "y": 1920,
        "wires": [
            [
                "21d4d04e1bd7c978"
            ]
        ]
    },
    {
        "id": "21d4d04e1bd7c978",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "分岐処理",
        "func": "const i2cIlluminance = msg.payload.find(x => x.accessType === 1 && x.sensorType === 264);\nif (i2cIlluminance) {\n    msg.payload = i2cIlluminance.outputInterval;\n} else {\n    msg.payload = 1000;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1920,
        "wires": [
            [
                "d0dc36f5d3d0610a",
                "65f31adeba73cc56"
            ]
        ]
    },
    {
        "id": "65f31adeba73cc56",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 1960,
        "wires": [
            [
                "36fdbbf0efac7bb3"
            ]
        ]
    },
    {
        "id": "d0dc36f5d3d0610a",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kill",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1920,
        "wires": [
            [
                "36fdbbf0efac7bb3"
            ]
        ]
    },
    {
        "id": "793ef15aee05d4c0",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "kill",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1960,
        "wires": [
            [
                "d0dc36f5d3d0610a"
            ]
        ]
    },
    {
        "id": "ac4eee1e6b9b6872",
        "type": "catch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "scope": [
            "53016c6cf322bdb7"
        ],
        "uncaught": false,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "1a010d8e6f6df476"
            ]
        ]
    },
    {
        "id": "4c69e290c7b7d39b",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Update Sleep",
        "links": [
            "3e43284f51d30d6d",
            "06c64847ad06b117"
        ],
        "x": 115,
        "y": 4160,
        "wires": [
            [
                "14dfa008059dee6a"
            ]
        ]
    },
    {
        "id": "231be7c2fbb399b2",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "スリープ値更新",
        "func": "const devices = flow.get('devices') || {};\nconst sameTypes = devices[msg.sleep.accessType];\nif (sameTypes == null) {\n    return;\n}\nconst device = sameTypes[msg.sleep.key];\nif (device == null) {\n    return;\n}\nif (device.sensorType !== msg.sleep.sensorType) {\n    return;\n}\n\ndevice.advertiseInterval = msg.sleep.advertiseInterval;\ndevice.uplinkInterval = msg.sleep.uplinkInterval;\n\nreturn [{ sleep: device }];",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 4160,
        "wires": []
    },
    {
        "id": "ed991652a586911c",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "スリープ更新",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `ble_device_configs`\nSET\n  `advertise_interval` = :advertiseInterval,\n  `uplink_interval` = :uplinkInterval\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 460,
        "y": 4160,
        "wires": [
            [
                "2dd82442bf6e1280"
            ]
        ]
    },
    {
        "id": "2dd82442bf6e1280",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 630,
        "y": 4160,
        "wires": [
            [
                "231be7c2fbb399b2"
            ]
        ]
    },
    {
        "id": "14dfa008059dee6a",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sleep",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 4160,
        "wires": [
            [
                "ed991652a586911c"
            ]
        ]
    },
    {
        "id": "6b7eae0fd1f64816",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "db",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "init",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 3360,
        "wires": [
            [
                "3768a6288e38c984"
            ]
        ]
    },
    {
        "id": "971a02248283ad0f",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Raw Data",
        "mode": "link",
        "links": [
            "b3f6c20f2ca45d50"
        ],
        "x": 1295,
        "y": 3500,
        "wires": []
    },
    {
        "id": "4ba453409dbd3e6c",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2780,
        "wires": [
            [
                "6157a7cc9bc49e76"
            ],
            [
                "9f913684c594148c"
            ]
        ]
    },
    {
        "id": "9f913684c594148c",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2820,
        "wires": [
            [
                "4ba453409dbd3e6c"
            ]
        ]
    },
    {
        "id": "aa9911d218c1d8f6",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2860,
        "wires": [
            [
                "d326ec3d9199c365"
            ],
            [
                "7af2f0af211372cb"
            ]
        ]
    },
    {
        "id": "7af2f0af211372cb",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2900,
        "wires": [
            [
                "aa9911d218c1d8f6"
            ]
        ]
    },
    {
        "id": "6c612eebb9cea998",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 3100,
        "wires": [
            [
                "bdbca114ba01ae60"
            ],
            [
                "d0c764fd0632e484"
            ]
        ]
    },
    {
        "id": "d0c764fd0632e484",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 3140,
        "wires": [
            [
                "6c612eebb9cea998"
            ]
        ]
    },
    {
        "id": "2c4453ae0f9f5a4e",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 3020,
        "wires": [
            [
                "65dd42e6ae82dbd1"
            ],
            [
                "b5207ced9025bc35"
            ]
        ]
    },
    {
        "id": "b5207ced9025bc35",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 3060,
        "wires": [
            [
                "2c4453ae0f9f5a4e"
            ]
        ]
    },
    {
        "id": "6939102dd2d5753b",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2940,
        "wires": [
            [
                "a00ea48dcb272ae4"
            ],
            [
                "b92b55d2958726ae"
            ]
        ]
    },
    {
        "id": "b92b55d2958726ae",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2980,
        "wires": [
            [
                "6939102dd2d5753b"
            ]
        ]
    },
    {
        "id": "136891c2a668d0e6",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 450,
        "y": 3780,
        "wires": [
            [
                "4c12a5b595113e65"
            ],
            [
                "a15e19e8dc0416f2"
            ],
            [
                "a15e19e8dc0416f2"
            ],
            [
                "fb670826b9657060"
            ]
        ]
    },
    {
        "id": "0e8090cfad19e767",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "JSONデコード",
        "func": "let dest = msg.topic || msg.port;\nif (!dest.startsWith('/dev/ttyACM')) {\n    const slashIndex = dest.indexOf('/');\n    dest = dest.substring(slashIndex + 1);\n}\n\nif (msg.payload == null) {\n    resetBuffer();\n    return;\n}\n\nupdateBuffer();\n\nwhile (true) {\n\n    const contextBuffer = context.get('buffer') || {};\n\n    /** @type Buffer */\n    const buffer = contextBuffer[dest] || Buffer.from([]);\n    if (buffer.length < 1) {\n        break;\n    }\n\n    let isContinue = false;\n\n    // デコード\n    const protocol = buffer.readUint8(0);\n    const type = buffer.readUint8(1);\n    if (protocol == 0x01) {\n        if (type == 0x00) {\n            isContinue = generalResponse(contextBuffer);\n        } else if (type == 0x01) {\n            isContinue = downlinkResponse(contextBuffer);\n        } else if (type === 0x02) {\n            isContinue = jigInfoResponse(contextBuffer);\n        } else if (type === 0x03) {\n            isContinue = dfuResponse(contextBuffer);\n        } else if (type === 0xFF) {\n            isContinue = errorResponse(contextBuffer);\n        }\n    } else {\n        resetBuffer();\n    }\n    if (!isContinue) {\n        const buffer = contextBuffer[dest];\n        if (buffer.length > 270) {\n            resetBuffer();\n        }\n        break;\n    }\n}\n\n/**\n * @param {{string: Buffer}} contextBuffer\n */\nfunction generalResponse(contextBuffer) {\n\n    // 必要最低限の長さに満たない場合終了\n    const buffer = contextBuffer[dest];\n    if (buffer.length < 22) {\n        return false;\n    }\n\n    // デコード\n    const response = {\n        dataLength: buffer.readUint16LE(2),\n        unixTime: buffer.readUint32LE(4),\n        deviceNumber: buffer.readBigUInt64LE(8).toString(16).toLowerCase(),\n        sensorType: buffer.readUint16LE(16),\n        rssi: buffer.readInt8(18),\n        order: buffer.readUint16LE(19),\n    };\n\n    // データ領域を取得\n    const dataBuffer = buffer.subarray(21);\n\n    // データ領域がデータサイズに満たない場合終了\n    if (dataBuffer.length < response.dataLength) {\n        return false;\n    }\n\n    // 区切られたデバイスIDを生成\n    response.key = generateSeparatedDeviceNumber(response.deviceNumber);\n\n    const contextStack = context.get('stack') || {};\n    const stack = contextStack[dest] || Buffer.from([]);\n    const merged = Buffer.concat([stack, dataBuffer.subarray(0, response.dataLength)]);\n\n    if (response.order !== 0xFFFF) {\n        contextBuffer[dest] = dataBuffer.subarray(response.dataLength);\n        contextStack[dest] = merged;\n        context.set('buffer', contextBuffer);\n        context.set('stack', contextStack);\n        return true;\n    }\n\n    if (response.sensorType == 0) {\n        response.sensorType = merged.readUint16LE(0);\n        response.firmwareVersion = [...Array(3)].map((_, i) => merged.readUint8(2 + i)).join('.');\n        response.timeZone = merged.readUint8(5);\n        response.bleMode = merged.readUint8(6);\n        response.txPower = merged.readUint8(7);\n        response.advertise = merged.readUint16LE(8);\n\n        const decodeData = (() => {\n            switch (response.sensorType) {\n                case 289: // 照度(JIG)\n                    return {\n                        uplink: merged.readUint32LE(10),\n                        readMode: merged.readUint8(14),\n                        sampling: merged.readUint8(15),\n                        hysteresis: [{\n                            high: merged.readUint32LE(16),\n                            low: merged.readUint32LE(20),\n                            min: 40,\n                            max: 83865,\n                        }],\n                    };\n                case 290: // 加速度(JIG)\n                    return {\n                        uplink: merged.readUint32LE(10),\n                        readMode: merged.readUint8(14),\n                        sampling: merged.readUint8(15),\n                        hysteresis: [{\n                            high: merged.readUint8(16),\n                            low: merged.readUint8(17),\n                            min: 0,\n                            max: 12,\n                        }]\n                    };\n                case 291: // 温湿度(JIG)\n                    return {\n                        uplink: merged.readUint32LE(10),\n                        readMode: merged.readUint8(14),\n                        sampling: merged.readUint8(15),\n                        hysteresis: [{\n                            high: merged.readInt32LE(16),\n                            low: merged.readInt32LE(20),\n                            min: -40,\n                            max: 125,\n                        }, {\n                            high: merged.readInt32LE(24),\n                            low: merged.readInt32LE(28),\n                            min: 0,\n                            max: 100,\n                        }]\n                    };\n                case 292: // 気圧(JIG)\n                    return {\n                        uplink: merged.readUint32LE(10),\n                        readMode: merged.readUint8(14),\n                        sampling: merged.readUint8(15),\n                        hysteresis: [{\n                            high: merged.readUint32LE(16),\n                            low: merged.readUint32LE(20),\n                            min: 260,\n                            max: 1260,\n                        }],\n                    };\n                case 293: // 測距(JIG)\n                    return {\n                        uplink: merged.readUint32LE(10),\n                        readMode: merged.readUint8(14),\n                        sampling: merged.readUint8(15),\n                        hysteresis: [{\n                            high: merged.readUint16LE(16),\n                            low: merged.readUint16LE(18),\n                            min: 40,\n                            max: 1100,\n                        }],\n                    };\n                case 296: // 接点出力(JIG)\n                    return {\n                        alive: merged.readUint8(10),\n                    };\n                default:\n                    return {};\n            }\n        })();\n\n        contextBuffer[dest] = dataBuffer.subarray(response.dataLength);\n        contextStack[dest] = Buffer.from([]);\n        context.set('buffer', contextBuffer);\n        context.set('stack', contextStack);\n\n        msg.payload = {\n            ...response,\n            time: moment().valueOf(),\n            accessType: (dest.startsWith('/dev/ttyACM') ? 4 : 3),\n            ...decodeData,\n        };\n        node.send([msg, null, null, null, null, null]);\n    } else {\n\n        // function decodeBravePi() {\n        //     const dataNum = merged.readUint16LE(1);\n        //     const range = [...Array(dataNum)].map((_, x) => x);\n        //     const result = {};\n        //     switch (response.sensorType) {\n        //         case 257:\n        //         case 258:\n        //             // 接点入出力は1byte\n        //             result.values = range.map(x => merged.readUint8(3 + x));\n        //             break;\n        //         case 260:\n        //             // 距離センサーの場合は unsigned 16bit\n        //             result.values = range.map(x => merged.readUint16LE(3 + x * 2)).filter(x => x <= 2000);\n        //             break;\n        //         case 259:\n        //             // ADCセンサーの場合は unsigned 16bit が 2ch分\n        //             const adc = [...Array(dataNum * 2)].map((_, x) => merged.readInt16LE(3 + x * 2));\n        //             result.values = range.flatMap(x => [adc[2 * x], adc[2 * x + 1]]);\n        //             break;\n        //         case 263:\n        //             // 差圧の場合はfloat\n        //             result.values = range.map(x => merged.readFloatLE(3 + x * 4));\n        //             break;\n        //         case 262:\n        //             // 加速度の場合は32bit floatを3個ずつ\n        //             const data = [...Array(dataNum * 3)].map((_, x) => merged.readFloatLE(3 + x * 4));\n        //             result.values = range.flatMap(x => [\n        //                 data[3 * x],\n        //                 data[3 * x + 1],\n        //                 data[3 * x + 2],\n        //                 Math.abs(Math.sqrt(data[3 * x] ** 2 + data[3 * x + 1] ** 2 + data[3 * x + 2] ** 2) - 1000.0)\n        //             ]).map(x => x / 1000.0);\n        //             break;\n        //         default:\n        //             // その他は 32bit float\n        //             result.values = range.map(x => merged.readFloatLE(3 + x * 4));\n        //             break;\n        //     }\n        //     return result;\n        // }\n\n        function decodeBraveJig() {\n            const sampling = merged.readUint8(1);\n            const time = merged.readUint32LE(2) * 1000;\n            const result = {\n                sampling,\n                time,\n                dest,\n            };\n            const dataNum = merged.readUint16LE(6);\n            const range = [...Array(dataNum)].map((_, x) => x);\n            switch (response.sensorType) {\n                case 289:\n                    // 照度\n                    result.values = range.map(x => merged.readFloatLE(8 + x * 4));\n                    result.channelNum = 1;\n                    break;\n                case 290:\n                    // 加速度\n                    const data = [...Array(dataNum * 3)].map((_, x) => merged.readFloatLE(8 + x * 4));\n                    result.values = range.flatMap(x => [\n                        data[3 * x],\n                        data[3 * x + 1],\n                        data[3 * x + 2],\n                        Math.abs(Math.sqrt(data[3 * x] ** 2 + data[3 * x + 1] ** 2 + data[3 * x + 2] ** 2) - 1000.0)\n                    ]).map(x => x / 1000.0);\n                    result.channelNum = 4;\n                    break;\n                case 291:\n                    // 温湿度\n                    const env = [...Array(dataNum * 2)].map((_, x) => merged.readFloatLE(8 + x * 4));\n                    result.values = range.flatMap(x => [\n                        env[2 * x],\n                        env[2 * x + 1]\n                    ]);\n                    result.channelNum = 2;\n                    break;\n                case 292:\n                    // 気圧\n                    result.values = range.map(x => merged.readFloatLE(8 + x * 4));\n                    result.channelNum = 1;\n                    break;\n                case 293:\n                    // 測距\n                    result.values = range.map(x => merged.readUint16LE(8 + x * 2));\n                    result.channelNum = 1;\n                    break;\n                case 294:\n                case 295:\n                    // result.channelNum = 2;\n                    // result.readMode = result.sampling;\n                    // delete result.sampling;\n                    if (result.sampling === 1) {\n                        // 接点入出力(パルスカウント)\n                        result.values = [\n                            merged.readUint16LE(8),\n                            merged.readUint32LE(10),\n                            merged.readUint16LE(14),\n                            merged.readUint32LE(16),\n                        ];\n                        result.sensorType = 295;\n                        result.channelNum = 4;\n                    } else {\n                        // 接点入出力(瞬時値、検知)\n                        result.values = [\n                            merged.readUint8(8),\n                            merged.readUint8(9),\n                        ];\n                        result.sensorType = 294;\n                        result.channelNum = 2;\n                    }\n                    break;\n                case 296:\n                    // 接点出力\n                    const output = [...Array(dataNum * 2)].map((_, x) => merged.readUint8(8 + x));\n                    result.values = range.flatMap(x => [\n                        output[x],\n                        output[x + 1]\n                    ]);\n                    result.channelNum = 2;\n                    break;\n                default:\n                    result.values = [];\n                    break;\n            }\n            return result;\n        }\n\n        // データ領域をデコード\n        const battery = merged.readUInt8(0);\n        const accessType = dest.startsWith('/dev/ttyACM') ? 4 : 3;\n        // if (response.sensorType < 289) {\n        //     const decodeData = decodeBravePi();\n        //     contextBuffer[dest] = dataBuffer.subarray(response.dataLength);\n        //     contextStack[dest] = Buffer.from([]);\n        //     context.set('buffer', contextBuffer);\n        //     context.set('stack', contextStack);\n        //     const payload = {\n        //         ...response,\n        //         accessType,\n        //         battery,\n        //         ...decodeData,\n        //     };\n        //     node.send([null, { payload }, null, null, null, null, null, null]);\n        // } else {\n        const decodeData = decodeBraveJig();\n        const dataNum = merged.readUint16LE(6);\n        contextBuffer[dest] = dataBuffer.subarray(response.dataLength);\n        contextStack[dest] = Buffer.from([]);\n        context.set('buffer', contextBuffer);\n        context.set('stack', contextStack);\n        const time = moment(decodeData.time);\n        const values = [...decodeData.values];\n        const interval = (() => {\n            if (decodeData.sampling === 0) {\n                return 1000;\n            } else if (decodeData.sampling === 1) {\n                return 500;\n            } else if (decodeData.sampling === 2) {\n                return 200;\n            } else if (decodeData.sampling === 3) {\n                return 100;\n            } else if (decodeData.sampling === 4) {\n                return 50;\n            } else if (decodeData.sampling === 5) {\n                return 10;\n            } else {\n                return 1000;\n            }\n        })();\n        const startTime = moment(time);\n        for (let i = 0; i < dataNum; i++) {\n            const localTime = moment(startTime).add(i * interval, 'ms');\n            const payload = {\n                ...response,\n                accessType,\n                battery,\n                ...decodeData,\n                // time: localTime.valueOf(),\n                values: values.slice(i * decodeData.channelNum, (i + 1) * decodeData.channelNum),\n                received: true,\n            };\n            if (moment('2024/01/01') < localTime) {\n                payload.time = localTime.valueOf();\n            } else {\n                payload.time = moment().valueOf();\n            }\n            node.send([null, { payload }, null, null, null, null, null, null]);\n        }\n        // }\n    }\n    return true;\n}\n\n/**\n * @param {{string: Buffer}} contextBuffer\n */\nfunction downlinkResponse(contextBuffer) {\n\n    /** @type Buffer */\n    const buffer = contextBuffer[dest];\n    if (buffer.length < 20) {\n        // 最小サイズに満たない場合は終了\n        return false;\n    }\n\n    const unixTime = buffer.readUint32LE(2);\n    const deviceNumber = buffer.readBigUInt64LE(6).toString(16).toLowerCase();\n    const deviceId = generateSeparatedDeviceNumber(deviceNumber);\n    const sensorId = buffer.readUint16LE(14);\n    const order = buffer.readUint16LE(16);\n    const cmd = buffer.readUint8(18);\n    const result = buffer.readUint8(19);\n    contextBuffer[dest] = buffer.subarray(20);\n    context.set('buffer', contextBuffer);\n    msg.payload = {\n        unixTime,\n        time: moment().valueOf(),\n        deviceNumber,\n        deviceId,\n        sensorId,\n        order,\n        cmd,\n        result,\n        dest,\n    };\n    node.send([null, null, null, null, null, null, msg, null]);\n    return true;\n}\n\n/**\n * @param {{string: Buffer}} contextBuffer\n */\nfunction jigInfoResponse(contextBuffer) {\n\n    /** @type Buffer */\n    const buffer = contextBuffer[dest];\n    if (buffer.length < 16) {\n        // 最小サイズに満たない場合は終了\n        return false;\n    }\n\n    const unixTime = buffer.readUint32LE(2);\n    const cmd = buffer.readUint8(6);\n    const routerDeviceId = generateSeparatedDeviceNumber(buffer.readBigUInt64LE(7).toString(16).toLowerCase());\n    const accessType = (dest.startsWith('/dev/ttyACM') ? 4 : 3);\n    const dataIndex = 15;\n    if (cmd === 0) {\n        // 停止コマンドレスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, msg, null, null, null, null, null]);\n    } else if (cmd === 1) {\n        // 開始コマンドレスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, msg, null, null, null, null]);\n    } else if (cmd === 2) {\n        // FWバージョンレスポンス\n        if (buffer.length < 18) {\n            return false;\n        }\n        const major = buffer.readUint8(dataIndex);\n        const minor = buffer.readUint8(dataIndex + 1);\n        const build = buffer.readUint8(dataIndex + 2);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 3);\n        context.set('buffer', contextBuffer);\n        const version = `${major}.${minor}.${build}`;\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            version,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, msg, null, null, null]);\n    } else if (cmd <= 102) {\n        // フィルターレスポンス\n        if (buffer.length < 24) {\n            return false;\n        }\n        const index = buffer.readUint8(dataIndex);\n        const deviceNumber = buffer.readBigUInt64LE(dataIndex + 1).toString(16).toLowerCase();\n        const deviceId = generateSeparatedDeviceNumber(deviceNumber);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 9);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            index,\n            deviceNumber,\n            deviceId,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, msg, null, null]);\n    } else if (cmd === 103) {\n        // スキャンモードレスポンス\n        const scanMode = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            scanMode,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd === 104) {\n        // スキャンモードLongRange変更レスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd === 105) {\n        // スキャンモードLegacy変更レスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd === 106) {\n        // デバイスID全削除レスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd <= 206) {\n        // デバイスID削除レスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd == 207) {\n        // デバイスID全取得レスポンス\n        const number = buffer.readUint8(dataIndex);\n        const filterDevices = [...Array(number)]\n            .map((_, i) => dataIndex + 1 + i * 8)\n            .map(i => generateSeparatedDeviceNumber(buffer.readBigUInt64LE(i).toString(16).toLowerCase()));\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1 + number * 8);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            filterDevices,\n            dest,\n            accessType,\n        };\n        node.send([null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg]);\n    } else if (cmd == 208) {\n        // Keep Aliveレスポンス\n        const result = buffer.readUint8(dataIndex);\n        contextBuffer[dest] = buffer.subarray(dataIndex + 1);\n        context.set('buffer', contextBuffer);\n        msg.payload = {\n            unixTime,\n            time: moment().valueOf(),\n            cmd,\n            routerDeviceId,\n            result,\n            dest,\n            accessType,\n        };\n        // 何もしない\n    } else {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * @param {{string: Buffer}} contextBuffer\n */\nfunction errorResponse(contextBuffer) {\n    /** @type Buffer */\n    const buffer = contextBuffer[dest];\n    if (buffer.length < 7) {\n        // 最小サイズに満たない場合は終了\n        return false;\n    }\n    const unixTime = buffer.readUint32LE(2);\n    const reason = buffer.readUint8(6);\n    const accessType = (dest.startsWith('/dev/ttyACM') ? 4 : 3);\n    contextBuffer[dest] = buffer.subarray(7);\n    context.set('buffer', contextBuffer);\n    msg.payload = {\n        unixTime,\n        time: moment().valueOf(),\n        reason,\n        dest,\n        accessType,\n    };\n    node.send([null, null, null, null, null, null, null, null, null, null, null, msg]);\n    return true;\n}\n\n/**\n * @param {{string: Buffer}} contextBuffer\n */\nfunction dfuResponse(contextBuffer) {\n\n    /** @type Buffer */\n    const buffer = contextBuffer[dest];\n    if (buffer.length < 7) {\n        // 最小サイズに満たない場合は終了\n        return false;\n    }\n    const unixTime = buffer.readUint32LE(2);\n    const result = buffer.readUint8(6);\n    const accessType = (dest.startsWith('/dev/ttyACM') ? 4 : 3);\n    contextBuffer[dest] = buffer.subarray(7);\n    context.set('buffer', contextBuffer);\n\n    msg.payload = {\n        unixTime,\n        time: moment().valueOf(),\n        result,\n        dest,\n        accessType,\n    };\n    node.send([null, null, null, null, null, null, null, msg]);\n    return true;\n}\n\n/**\n *\n */\nfunction resetBuffer() {\n    const contextBuffer = context.get('buffer') || {};\n    const contextStack = context.get('stack') || {};\n    delete contextBuffer[dest];\n    delete contextStack[dest];\n    context.set('buffer', contextBuffer);\n    context.set('stack', contextStack);\n}\n\n/**\n *\n */\nfunction updateBuffer() {\n    const contextBuffer = context.get('buffer') || {};\n    const old = contextBuffer[dest] || Buffer.from([]);\n    contextBuffer[dest] = Buffer.concat([old, msg.payload]);\n    context.set('buffer', contextBuffer);\n}\n\n/**\n * @param {string} deviceNumber\n */\nfunction generateSeparatedDeviceNumber(deviceNumber) {\n    const str = ('0000000000000000' + deviceNumber).slice(-16);\n    return [...Array(8)]\n        .map((_, x) => str.substring(x * 2, x * 2 + 2))\n        .join('')\n        .toLowerCase();\n}",
        "outputs": 15,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 840,
        "y": 1200,
        "wires": [
            [
                "39f671880ef7e48b"
            ],
            [
                "3926b2f55cef2891"
            ],
            [
                "d2cb9b338bcf0b93"
            ],
            [
                "7d137d4855fecb7b"
            ],
            [
                "aecd89f1ee2c7cd8"
            ],
            [
                "655f8085bcc333d1"
            ],
            [
                "81d738d84e859b92"
            ],
            [
                "9d1e26b9746594ba"
            ],
            [
                "55bb206890c979e9"
            ],
            [
                "e8c463032545e057"
            ],
            [
                "87f2d1546c36c483"
            ],
            [
                "b73ee17b96d35836",
                "8baa42399f958039"
            ],
            [
                "84dd437da3a0631b"
            ],
            [
                "0cb65c8cd5097bda"
            ],
            [
                "6e6d3ee13e422737"
            ]
        ]
    },
    {
        "id": "3926b2f55cef2891",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Sensor Response",
        "mode": "link",
        "links": [
            "4fd2d7848388bb44"
        ],
        "x": 1035,
        "y": 940,
        "wires": []
    },
    {
        "id": "39f671880ef7e48b",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Parameter Response",
        "mode": "link",
        "links": [
            "55a0ad498cb1cf3c"
        ],
        "x": 1035,
        "y": 900,
        "wires": []
    },
    {
        "id": "4a8e068a599ee613",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "4fd2d7848388bb44"
        ],
        "x": 1175,
        "y": 2140,
        "wires": []
    },
    {
        "id": "bf01bf08a9f6aa1c",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "センサー",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 300,
        "wires": []
    },
    {
        "id": "0c5a7de862cc48b9",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "PI",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "8b3913a5b05b8da9",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "JIG",
        "info": "",
        "x": 110,
        "y": 480,
        "wires": []
    },
    {
        "id": "6bbe36f307af6906",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "I2C",
        "info": "",
        "x": 110,
        "y": 1800,
        "wires": []
    },
    {
        "id": "65e3bc624bcaaae6",
        "type": "file",
        "z": "baa69f6c03978bf4",
        "name": "送受信ログ",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 970,
        "y": 180,
        "wires": [
            [
                "ba1a2aab64783bd3"
            ]
        ]
    },
    {
        "id": "df3e7f5b37d33c55",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "ログメッセージ作成",
        "func": "const now = moment();\nconst hex = msg.payload.toString('hex');\nconst text = [...Array(hex.length / 2)].map((_, i) => hex.slice(i * 2, i * 2 + 2)).join(' ');\nmsg.payload = `${now.format('YYYY-MM-DD HH:mm:ss.SSS')} [TX] ${text}`;\nmsg.filename = `.node-red/logs/pi.${now.format('YYYY-MM-DD')}.log`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "65e3bc624bcaaae6"
            ]
        ]
    },
    {
        "id": "486097bd85c9aad3",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "ログローテート",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "548ff269169d6171"
            ]
        ]
    },
    {
        "id": "8c378c45dfa7250a",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "ログメッセージ作成",
        "func": "const now = moment();\nconst hex = msg.payload.toString('hex');\nconst text = [...Array(hex.length / 2)].map((_, i) => hex.slice(i * 2, i * 2 + 2)).join(' ');\nmsg.payload = `${now.format('YYYY-MM-DD HH:mm:ss.SSS')} [RX] ${text}`;\nmsg.filename = `.node-red/logs/pi.${now.format('YYYY-MM-DD')}.log`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "65e3bc624bcaaae6"
            ]
        ]
    },
    {
        "id": "548ff269169d6171",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "1週間を超えたログファイルを削除",
        "func": "const now = moment();\nconst oneWeekBefore = now.subtract(7, 'days');\nconst path = '.node-red/logs';\nfs.readdir(path, (err, files) => {\n    if (err) {\n        return;\n    }\n    for (const file of files) {\n        const split = file.split('.');\n        if (split.length !== 3) {\n            continue;\n        }\n        const date = moment(split[1]);\n        if (date < oneWeekBefore) {\n            fs.rm(`${path}/${file}`, () => { });\n        }\n    }\n});",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 440,
        "y": 400,
        "wires": []
    },
    {
        "id": "ef2ade8716087151",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "受信ログ",
        "func": "if (msg.payload) {\n    const now = moment();\n    const hex = msg.payload.toString('hex');\n    const text = [...Array(hex.length / 2)].map((_, i) => hex.slice(i * 2, i * 2 + 2)).join(' ');\n    const dest = msg.topic || msg.port;\n    msg.payload = `${now.format('YYYY-MM-DD HH:mm:ss.SSS')} [RX] ${dest} | ${text}`;\n    msg.filename = `.node-red/logs/jig.${now.format('YYYY-MM-DD')}.log`;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 820,
        "y": 1540,
        "wires": [
            [
                "90791c1671d17b20"
            ]
        ]
    },
    {
        "id": "90791c1671d17b20",
        "type": "file",
        "z": "baa69f6c03978bf4",
        "name": "送受信ログ",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 990,
        "y": 1540,
        "wires": [
            [
                "ac8c6ef69b92762c"
            ]
        ]
    },
    {
        "id": "ac8c6ef69b92762c",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "受信ログ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1540,
        "wires": []
    },
    {
        "id": "b1893ca196c89864",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node-red:common.status.not-connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 680,
        "wires": [
            [
                "bb4b0425bfd00aca"
            ],
            [
                "ec0758cc440a52fd"
            ]
        ]
    },
    {
        "id": "715dd58a58c79c28",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM0",
        "scope": [
            "e1151542174e8f49"
        ],
        "x": 110,
        "y": 520,
        "wires": [
            [
                "c7dd95e5fab30269",
                "d27f30c884c6f746"
            ]
        ]
    },
    {
        "id": "c5cd54149136fa4b",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM1",
        "scope": [
            "064c381540502e35"
        ],
        "x": 110,
        "y": 560,
        "wires": [
            [
                "985d6ec4038c8f07"
            ]
        ]
    },
    {
        "id": "533f59add8bae15e",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM2",
        "scope": [
            "152d7fdf6303b2d9"
        ],
        "x": 110,
        "y": 600,
        "wires": [
            [
                "2a5f156341f2f1ea"
            ]
        ]
    },
    {
        "id": "1c49e76dda658bd2",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM3",
        "scope": [
            "37c939c60d46b0f5"
        ],
        "x": 110,
        "y": 640,
        "wires": [
            [
                "b0c4d896ba653ea8"
            ]
        ]
    },
    {
        "id": "44d90dc588b73edd",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM4",
        "scope": [
            "a1dde1c497344e5a"
        ],
        "x": 110,
        "y": 680,
        "wires": [
            [
                "93b2f622d4296c63"
            ]
        ]
    },
    {
        "id": "6a85eaa99832350a",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM5",
        "scope": [
            "56c6640094884947"
        ],
        "x": 110,
        "y": 720,
        "wires": [
            [
                "d76eae5892f12fe5"
            ]
        ]
    },
    {
        "id": "766f18fa8b00ae87",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM6",
        "scope": [
            "937e11cc982b3480"
        ],
        "x": 110,
        "y": 760,
        "wires": [
            [
                "f0b37019a7223ff5"
            ]
        ]
    },
    {
        "id": "fa179be44836253b",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM7",
        "scope": [
            "31a1285d7af13baa"
        ],
        "x": 110,
        "y": 800,
        "wires": [
            [
                "78531dc2c0b6a2b6"
            ]
        ]
    },
    {
        "id": "7c68bc0b3dc49d0d",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM8",
        "scope": [
            "727c4cf0dfb3b73d"
        ],
        "x": 110,
        "y": 840,
        "wires": [
            [
                "59887cafe04d047e"
            ]
        ]
    },
    {
        "id": "ecc0e96f8d207e51",
        "type": "status",
        "z": "baa69f6c03978bf4",
        "name": "ACM9",
        "scope": [
            "59e69603b35fe40b"
        ],
        "x": 110,
        "y": 880,
        "wires": [
            [
                "80cff689e8e0de4d"
            ]
        ]
    },
    {
        "id": "bb4b0425bfd00aca",
        "type": "exec",
        "z": "baa69f6c03978bf4",
        "command": "ls -l /dev/serial/by-id/ | grep BraveJIG_Router | grep",
        "addpay": "port",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ポート確認",
        "x": 650,
        "y": 660,
        "wires": [
            [
                "a60447ac041c429f"
            ],
            [],
            []
        ]
    },
    {
        "id": "a60447ac041c429f",
        "type": "split",
        "z": "baa69f6c03978bf4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "40e64d37b525349f"
            ]
        ]
    },
    {
        "id": "40e64d37b525349f",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "Connect",
        "func": "if (msg.payload.endsWith(msg.port)) {\n    const bravejig = global.get('bravejig') || {};\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const start = Buffer.from(new Uint8Array([protocol, type, 1]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    msg.payload = Buffer.concat([start, local, utc]);\n    msg.topic = `/dev/${msg.port}`;\n    bravejig[msg.topic] = true;\n    global.set('bravejig', bravejig);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 960,
        "y": 660,
        "wires": [
            [
                "155b1d40ef115610"
            ]
        ]
    },
    {
        "id": "d02e1d0844cfc945",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "バッファクリア",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1360,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "5325f5bf3a5122d5",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "送信ログ",
        "func": "const now = moment();\nconst hex = msg.payload.toString('hex');\nconst text = [...Array(hex.length / 2)].map((_, i) => hex.slice(i * 2, i * 2 + 2)).join(' ');\nconst dest = msg.topic || msg.port;\nmsg.payload = `${now.format('YYYY-MM-DD HH:mm:ss.SSS')} [TX] ${dest} | ${text}`;\nmsg.filename = `.node-red/logs/jig.${now.format('YYYY-MM-DD')}.log`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 1080,
        "wires": [
            [
                "5d683a8f8624e3b3"
            ]
        ]
    },
    {
        "id": "5d683a8f8624e3b3",
        "type": "file",
        "z": "baa69f6c03978bf4",
        "name": "送受信ログ",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 390,
        "y": 1080,
        "wires": [
            [
                "d1988aa387cb9547"
            ]
        ]
    },
    {
        "id": "d1988aa387cb9547",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "送信ログ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c736deb7cd8cd111",
        "type": "rpi-gpio out",
        "z": "baa69f6c03978bf4",
        "name": "BCM06",
        "pin": "6",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 3660,
        "wires": []
    },
    {
        "id": "1924cae183c49de2",
        "type": "rpi-gpio out",
        "z": "baa69f6c03978bf4",
        "name": "BCM13",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 3700,
        "wires": []
    },
    {
        "id": "344e8da3fc16a2f9",
        "type": "rpi-gpio out",
        "z": "baa69f6c03978bf4",
        "name": "BCM17",
        "pin": "17",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 3540,
        "wires": []
    },
    {
        "id": "e0351aa40972a2b5",
        "type": "rpi-gpio out",
        "z": "baa69f6c03978bf4",
        "name": "BCM24",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 3620,
        "wires": []
    },
    {
        "id": "b0d7d2a5fa04e3d3",
        "type": "rpi-gpio out",
        "z": "baa69f6c03978bf4",
        "name": "BCM27",
        "pin": "27",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 3580,
        "wires": []
    },
    {
        "id": "a2b27f9ce35601ef",
        "type": "rpi-gpio in",
        "z": "baa69f6c03978bf4",
        "name": "BCM16",
        "pin": "16",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 130,
        "y": 3120,
        "wires": [
            [
                "6c612eebb9cea998"
            ]
        ]
    },
    {
        "id": "5a72ca07937dc2bf",
        "type": "rpi-gpio in",
        "z": "baa69f6c03978bf4",
        "name": "BCM25",
        "pin": "25",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 130,
        "y": 2960,
        "wires": [
            [
                "6939102dd2d5753b"
            ]
        ]
    },
    {
        "id": "4d3a1f9bedcf13d2",
        "type": "rpi-gpio in",
        "z": "baa69f6c03978bf4",
        "name": "BCM05",
        "pin": "5",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 130,
        "y": 3040,
        "wires": [
            [
                "2c4453ae0f9f5a4e"
            ]
        ]
    },
    {
        "id": "b3a5f8e490613492",
        "type": "rpi-gpio in",
        "z": "baa69f6c03978bf4",
        "name": "BCM23",
        "pin": "23",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 130,
        "y": 2880,
        "wires": [
            [
                "aa9911d218c1d8f6"
            ]
        ]
    },
    {
        "id": "e416d6e45f230303",
        "type": "rpi-gpio in",
        "z": "baa69f6c03978bf4",
        "name": "BCM18",
        "pin": "18",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 130,
        "y": 2800,
        "wires": [
            [
                "4ba453409dbd3e6c"
            ]
        ]
    },
    {
        "id": "6c3f0bb1a129e222",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG TX",
        "links": [
            "9f218287a9a4affe",
            "8f7c2696ef3742f6",
            "1104056b53591903",
            "33aa78664a5052b0",
            "c256891dce1540fb",
            "d1dddb1a42dc4b7b",
            "868c3c8f1904809c"
        ],
        "x": 75,
        "y": 1220,
        "wires": [
            [
                "8eaacc091e6f44a5",
                "5325f5bf3a5122d5"
            ]
        ]
    },
    {
        "id": "8eaacc091e6f44a5",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/dev/ttyACM0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/dev/ttyACM9",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 11,
        "x": 210,
        "y": 1220,
        "wires": [
            [
                "541b8a2a93c94bed"
            ],
            [
                "eeec894640186490"
            ],
            [
                "45cf51041b374993"
            ],
            [
                "6ec794ce26ed1dc9"
            ],
            [
                "26ce900e1a4786c9"
            ],
            [
                "64f863ef3686ec29"
            ],
            [
                "1c65baf35cb18c22"
            ],
            [
                "2f85066e11c670f1"
            ],
            [
                "3b8bcb5db5d1ef6f"
            ],
            [
                "69beb916281757d9"
            ],
            [
                "301a68c406d8e23d"
            ]
        ]
    },
    {
        "id": "155b1d40ef115610",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG TX With Clear",
        "mode": "link",
        "links": [
            "2cb664837a9e2e41"
        ],
        "x": 1085,
        "y": 660,
        "wires": []
    },
    {
        "id": "2cb664837a9e2e41",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG TX With Clear",
        "links": [
            "155b1d40ef115610",
            "0efec88a2ce774f3"
        ],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "8eaacc091e6f44a5",
                "5325f5bf3a5122d5",
                "d02e1d0844cfc945"
            ]
        ]
    },
    {
        "id": "69beb916281757d9",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "e28ec53368199a20",
        "x": 400,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3b8bcb5db5d1ef6f",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "dfe751d749b1d618",
        "x": 400,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2f85066e11c670f1",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "b4907ecab88b32fe",
        "x": 400,
        "y": 1260,
        "wires": []
    },
    {
        "id": "1c65baf35cb18c22",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "d18cd67068644dbb",
        "x": 400,
        "y": 1240,
        "wires": []
    },
    {
        "id": "64f863ef3686ec29",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "330ec84549af6ed3",
        "x": 400,
        "y": 1220,
        "wires": []
    },
    {
        "id": "26ce900e1a4786c9",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "42f4312850451f83",
        "x": 400,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6ec794ce26ed1dc9",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "c6f8db9345018ba4",
        "x": 400,
        "y": 1180,
        "wires": []
    },
    {
        "id": "45cf51041b374993",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "1136a96fa7b3b064",
        "x": 400,
        "y": 1160,
        "wires": []
    },
    {
        "id": "eeec894640186490",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "bd413d977cd00ded",
        "x": 400,
        "y": 1140,
        "wires": []
    },
    {
        "id": "541b8a2a93c94bed",
        "type": "serial out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "699eb9dfc526271a",
        "x": 400,
        "y": 1120,
        "wires": []
    },
    {
        "id": "59e69603b35fe40b",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "e28ec53368199a20",
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "727c4cf0dfb3b73d",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "dfe751d749b1d618",
        "x": 570,
        "y": 1280,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "31a1285d7af13baa",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "b4907ecab88b32fe",
        "x": 570,
        "y": 1260,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "937e11cc982b3480",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "d18cd67068644dbb",
        "x": 570,
        "y": 1240,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "56c6640094884947",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "330ec84549af6ed3",
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "a1dde1c497344e5a",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "42f4312850451f83",
        "x": 570,
        "y": 1200,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "37c939c60d46b0f5",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "c6f8db9345018ba4",
        "x": 570,
        "y": 1180,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "152d7fdf6303b2d9",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "1136a96fa7b3b064",
        "x": 570,
        "y": 1160,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "064c381540502e35",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "bd413d977cd00ded",
        "x": 570,
        "y": 1140,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "e1151542174e8f49",
        "type": "serial in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "serial": "699eb9dfc526271a",
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "5c2de68289634b2e"
            ]
        ]
    },
    {
        "id": "aecd89f1ee2c7cd8",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "FWVersion",
        "mode": "link",
        "links": [
            "91ff09a1f3c0b6f0",
            "e998cf12099ce031"
        ],
        "x": 1035,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7d137d4855fecb7b",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Start Response",
        "mode": "link",
        "links": [],
        "x": 1035,
        "y": 1020,
        "wires": []
    },
    {
        "id": "655f8085bcc333d1",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Filter",
        "mode": "link",
        "links": [
            "2d48ee79f59ed8a0"
        ],
        "x": 1035,
        "y": 1100,
        "wires": []
    },
    {
        "id": "81d738d84e859b92",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Downlink Response",
        "mode": "link",
        "links": [
            "4873f01ef09a3ba1",
            "210a7b30ee81e6d9"
        ],
        "x": 1035,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9d1e26b9746594ba",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "DFU Response",
        "mode": "link",
        "links": [
            "e04270dd3125ba93"
        ],
        "x": 1035,
        "y": 1180,
        "wires": []
    },
    {
        "id": "55bb206890c979e9",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "ScanMode",
        "mode": "link",
        "links": [
            "982fdd4b2472dee7"
        ],
        "x": 1035,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e8c463032545e057",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "ScanModeLongRange",
        "mode": "link",
        "links": [
            "fdd34fff50ab1de9"
        ],
        "x": 1035,
        "y": 1260,
        "wires": []
    },
    {
        "id": "87f2d1546c36c483",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "ScanModeLegacy",
        "mode": "link",
        "links": [
            "36c6efc2884d2010"
        ],
        "x": 1035,
        "y": 1300,
        "wires": []
    },
    {
        "id": "74211f3aa1cb4a87",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "センサー設定",
        "info": "",
        "x": 1130,
        "y": 900,
        "wires": []
    },
    {
        "id": "ba7e82439f08053b",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "センサー値",
        "info": "",
        "x": 1120,
        "y": 940,
        "wires": []
    },
    {
        "id": "2d0302a886f494f2",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "通信開始",
        "info": "",
        "x": 1120,
        "y": 1020,
        "wires": []
    },
    {
        "id": "dd0802761d30a614",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "FWバージョン",
        "info": "",
        "x": 1140,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3c4e51dd717a0160",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "ペアリング設定",
        "info": "",
        "x": 1140,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d8593ce135a7b84d",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "ダウンリンク",
        "info": "",
        "x": 1130,
        "y": 1140,
        "wires": []
    },
    {
        "id": "60100eec85403e77",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "DFU",
        "info": "",
        "x": 1110,
        "y": 1180,
        "wires": []
    },
    {
        "id": "303a3e6085345a07",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "スキャンモード",
        "info": "",
        "x": 1140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b054c353428ccbd5",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "LongRange設定",
        "info": "",
        "x": 1140,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e74b8a5a49f7aaa9",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "Legacy設定",
        "info": "",
        "x": 1130,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f648d5c362acb272",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "",
        "props": [
            {
                "p": "port",
                "v": "/dev/ttyACM1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 1400,
        "wires": [
            [
                "d02e1d0844cfc945"
            ]
        ]
    },
    {
        "id": "1adf875105257499",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "エラーレスポンス",
        "info": "",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b73ee17b96d35836",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Error Response",
        "mode": "link",
        "links": [
            "96ba54fbb83dcf89"
        ],
        "x": 1035,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4d7ae662ef384d73",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Load Database",
        "links": [
            "7af6a27771cd284e"
        ],
        "x": 345,
        "y": 3280,
        "wires": [
            [
                "6b7eae0fd1f64816"
            ]
        ]
    },
    {
        "id": "eb0d6ff377a9a020",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "ペアリング全削除",
        "info": "",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e36dae715da332cd",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "ペアリング削除",
        "info": "",
        "x": 1140,
        "y": 1460,
        "wires": []
    },
    {
        "id": "84dd437da3a0631b",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Delete All Pairing",
        "mode": "link",
        "links": [
            "d748abc08c291c15"
        ],
        "x": 1035,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0cb65c8cd5097bda",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Delete Pairing",
        "mode": "link",
        "links": [
            "ce07f3f2b8516f98"
        ],
        "x": 1035,
        "y": 1460,
        "wires": []
    },
    {
        "id": "8c3639f8ac7ed6ac",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "ペアリング全取得",
        "info": "",
        "x": 1150,
        "y": 1500,
        "wires": []
    },
    {
        "id": "6e6d3ee13e422737",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Filter All",
        "mode": "link",
        "links": [
            "544c50c808ac9992"
        ],
        "x": 1035,
        "y": 1500,
        "wires": []
    },
    {
        "id": "0c45ff7ed93d8326",
        "type": "split",
        "z": "baa69f6c03978bf4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1050,
        "y": 3480,
        "wires": [
            [
                "868614d1796f7137"
            ]
        ]
    },
    {
        "id": "bd3d23ff15b4528b",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 55",
        "links": [
            "a454455949cc254a"
        ],
        "x": 465,
        "y": 180,
        "wires": [
            [
                "ef66e0f6627635ad"
            ]
        ]
    },
    {
        "id": "41a0aaec675b2f30",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Count Up",
        "mode": "link",
        "links": [
            "6055d803aeaa3b40",
            "87ac166ccde292af",
            "8e3f85aa97c27e36",
            "c2a91d46e522404b",
            "c6ef1ce0da7c6c7b"
        ],
        "x": 415,
        "y": 3900,
        "wires": []
    },
    {
        "id": "8baa42399f958039",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "Keep Alive 要求",
        "func": "if (msg.payload.reason === 0x07) {\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const keepAlive = Buffer.from(new Uint8Array([protocol, type, 208]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    if (msg.payload.accessType === 4) {\n        msg.topic = msg.payload.dest;\n    } else if (msg.payload.accessType === 3) {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.concat([keepAlive, local, utc]);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1100,
        "y": 1380,
        "wires": [
            [
                "d1dddb1a42dc4b7b"
            ]
        ]
    },
    {
        "id": "d1dddb1a42dc4b7b",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 73",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 1215,
        "y": 1380,
        "wires": []
    },
    {
        "id": "05c605e05d28d50f",
        "type": "inject",
        "z": "baa69f6c03978bf4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 2720,
        "wires": [
            [
                "9abb7d8cf1107e9a"
            ]
        ]
    },
    {
        "id": "19f8f1ebcf7617eb",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Gpio Output Changed",
        "mode": "link",
        "links": [
            "07b1ce0416ced215",
            "87ac166ccde292af",
            "c6ef1ce0da7c6c7b",
            "d70c1a105d9a96f8",
            "b1e463e090ae7902"
        ],
        "x": 635,
        "y": 3660,
        "wires": []
    },
    {
        "id": "cbd7f5478cf70899",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "function 1",
        "func": "if (msg.payload.accessType === 1 && msg.payload.sensorType === 258) {\n    const devices = flow.get('devices') || {};\n    if (devices[1] && devices[1][msg.payload.key]) {\n        msg.payload = devices[1][msg.payload.key];\n        msg.payload.values = [0];\n        msg.payload.time = moment().valueOf();\n        msg.payload.text = msg.payload.getText();\n        return [msg, msg];\n    } else {\n        return [msg, null];\n    }\n} else {\n    return [msg, null];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 240,
        "y": 3540,
        "wires": [
            [
                "731a03b771597037"
            ],
            [
                "731a03b771597037",
                "4c12a5b595113e65"
            ]
        ]
    },
    {
        "id": "6710c0e3a6f22023",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "Gpio Output Toggle",
        "links": [
            "8bdd0fc565c9efed"
        ],
        "x": 115,
        "y": 3640,
        "wires": [
            [
                "f02144f772968883"
            ]
        ]
    },
    {
        "id": "e48c11a85a4281b6",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2740,
        "wires": [
            [
                "9abb7d8cf1107e9a"
            ]
        ]
    },
    {
        "id": "9abb7d8cf1107e9a",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "初期化済",
        "property": "init",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2700,
        "wires": [
            [
                "fd8e7568e141f32f"
            ],
            [
                "e48c11a85a4281b6"
            ]
        ]
    },
    {
        "id": "b8748f5ced42d8a8",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "init",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "init",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 3480,
        "wires": [
            [
                "366b354d9138e657",
                "0c45ff7ed93d8326"
            ]
        ]
    },
    {
        "id": "eeefea92631b5ae0",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "bravepi",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 3840,
        "wires": [
            [
                "473e2d713b61c172"
            ],
            [
                "4c702c7357f7eb05"
            ]
        ]
    },
    {
        "id": "4c702c7357f7eb05",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 3880,
        "wires": [
            [
                "eeefea92631b5ae0"
            ]
        ]
    },
    {
        "id": "ec0758cc440a52fd",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "Disconnect",
        "func": "const bravejig = global.get('bravejig') || {};\nbravejig[`/dev/${msg.port}`] = false;\nglobal.set('bravejig', bravejig);\nreturn msg;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 650,
        "y": 700,
        "wires": []
    },
    {
        "id": "c7dd95e5fab30269",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 520,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "985d6ec4038c8f07",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 560,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "2a5f156341f2f1ea",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 600,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "b0c4d896ba653ea8",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 640,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "93b2f622d4296c63",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "d76eae5892f12fe5",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM5",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 720,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "f0b37019a7223ff5",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM6",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 760,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "78531dc2c0b6a2b6",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM7",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 800,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "59887cafe04d047e",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM8",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 840,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "80cff689e8e0de4d",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "ttyACM9",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 880,
        "wires": [
            [
                "b1893ca196c89864"
            ]
        ]
    },
    {
        "id": "d27f30c884c6f746",
        "type": "debug",
        "z": "baa69f6c03978bf4",
        "name": "USB",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 480,
        "wires": []
    },
    {
        "id": "c6bd52f5c2ff2533",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "デバイス取得",
        "url": "/api/v2/device/:deviceId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 4340,
        "wires": [
            [
                "0216cb2834f6cdb3"
            ]
        ]
    },
    {
        "id": "0216cb2834f6cdb3",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "デバイス情報整形",
        "func": "const functions = global.get('functions');\nif (functions.isInteger(msg.req.params.deviceId)) {\n    const devices = flow.get('devices') || {};\n    const deviceId = Number(msg.req.params.deviceId);\n    msg.payload = Object.values(devices)\n        .flatMap(x => Object.values(x))\n        .filter(x => x.deviceId == deviceId)\n        .map(x => ({\n            deviceId: x.deviceId,\n            deviceName: x.deviceName,\n            accessType: x.accessType,\n            sensorType: x.sensorType,\n            key: x.key.toString(),\n            sensors: x.sensors.map(y => ({\n                channel: y.channel,\n                count: y.count,\n                toggle: Boolean(y.toggle),\n                hysteresisHigh: y.hysteresisHigh,\n                hysteresisLow: y.hysteresisLow,\n                offset: y.offset,\n                debounceHigh: y.debounceHigh,\n                debounceLow: y.debounceLow\n            }))\n        }))[0];\n    if (msg.payload) {\n        return msg;\n    }\n}\n\nmsg.payload = { deviceId: 'Not Found.' };\nmsg.statusCode = 404;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 4340,
        "wires": [
            [
                "ae763e28a471cf29"
            ]
        ]
    },
    {
        "id": "2395da5966679c1e",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "センサー値取得",
        "url": "/api/v2/device/:deviceId/sensor/value",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 4700,
        "wires": [
            [
                "ed7ade36736b6417"
            ]
        ]
    },
    {
        "id": "ed7ade36736b6417",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "センサー値整形",
        "func": "const functions = global.get('functions');\nif (functions.isInteger(msg.req.params.deviceId)) {\n    const devices = flow.get('devices') || {};\n    const deviceId = Number(msg.req.params.deviceId);\n    msg.payload = Object.values(devices)\n        .flatMap(x => Object.values(x))\n        .filter(x => x.deviceId == deviceId)\n        .map(x => ({\n            deviceId: x.deviceId,\n            deviceName: x.deviceName,\n            accessType: x.accessType,\n            sensorType: x.sensorType,\n            time: (x.time && moment(x.time)) || null,\n            values: x.rawValues ||x.values || null\n        }))[0];\n    if (msg.payload == null) {\n        msg.payload = { deviceId: 'Not Found.' };\n        msg.statusCode = 404;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 4700,
        "wires": [
            [
                "6105781db83af9aa"
            ]
        ]
    },
    {
        "id": "9b405f8852020a3a",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "デバイス登録",
        "url": "/api/v2/device",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 4380,
        "wires": [
            [
                "a55a48e27df0fe81"
            ]
        ]
    },
    {
        "id": "a55a48e27df0fe81",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\nconst devices = flow.get('devices') || {};\n\n// センサー種別チェック\nconst sensorTypes = global.get('sensorTypes') || {};\nif (sensorTypes[msg.payload.sensorType] == null) {\n    msg.payload = { sensorType: 'Invalid sensor type specified.' };\n    return [msg, null];\n}\nmsg.payload.sensorType = Number(msg.payload.sensorType);\n\n// デバイス名チェック\nif (!functions.isString(msg.payload.deviceName, x => 0 < x.length && x.length < 256)) {\n    msg.payload = { deviceName: 'Type must be a string and the maximum length is 255.' };\n    return [msg, null];\n}\nif (Object.values(devices).flatMap(x => Object.values(x)).find(x => x.deviceName === msg.payload.deviceName)) {\n    msg.payload = { deviceName: 'This device name is already in use.' };\n    return [msg, null];\n}\n\n// 通信種別チェック\nif (!functions.isInteger(msg.payload.accessType, x => 0 <= x && x <= 4)) {\n    msg.payload = { sensorType: 'Invalid access type specified.' };\n    return [msg, null];\n}\nmsg.payload.accessType = Number(msg.payload.accessType);\nswitch (msg.payload.accessType) {\n    case 0:\n    case 3:\n    case 4:\n        if (!functions.isString(msg.payload.key, x => x.match(/^[0-9a-fA-F]{16}$/g))) {\n            msg.payload = { key: 'Invalid device number specified.' };\n            return [msg, null];\n        }\n        msg.payload.deviceNumber = ('0000000000000000' + msg.payload.key.replace(/:/g, '')).slice(-16);\n        break;\n    case 1:\n        if (msg.payload.sensorType === 257 || msg.payload.sensorType === 258) {\n            if (!functions.isInteger(msg.payload.key, x => 0 <= x && x <= 4)) {\n                msg.payload = { key: 'Invalid GPIO index specified.' };\n                return [msg, null];\n            }\n            msg.payload.key = Number(msg.payload.key);\n        } else {\n            if (!functions.isString(msg.payload.key, x => x.match(/^0x[0-9a-fA-F]{2}$/g))) {\n                msg.payload = { key: 'Invalid I2C address specified.' };\n                return [msg, null];\n            }\n            msg.payload.address = parseInt(msg.payload.key, 16);\n        }\n        break;\n    case 2:\n        msg.payload.key = msg.payload.deviceName;\n        break;\n    default:\n        return [msg, null];\n}\n\n// 保存チェック\nif (!functions.isBoolean(msg.payload.isSaveData)) {\n    msg.payload = { isSaveData: 'Type must be a boolean.' };\n    return [msg, null];\n}\nif (!functions.isBoolean(msg.payload.isSaveCount)) {\n    msg.payload = { isSaveCount: 'Type must be a boolean.' };\n    return [msg, null];\n}\nmsg.payload.isSaveData = Boolean(msg.payload.isSaveData);\nmsg.payload.isSaveCount = Boolean(msg.payload.isSaveCount);\n\n// センサーチェック\nif (!Array.isArray(msg.payload.sensors)) {\n    msg.payload = { sensors: 'Type must be an array.' };\n    return [msg, null];\n}\n\nconst sensorTypeData = sensorTypes[msg.payload.sensorType];\nif (msg.payload.sensors.length !== sensorTypeData.channels.length) {\n    msg.payload = { sensors: 'Length mismatch.' };\n    return [msg, null];\n}\n\n// センサーしきい値チェック\nfor (let i = 0; i < msg.payload.sensors.length; i++) {\n    const sensor = msg.payload.sensors[i];\n    const channel = sensorTypeData.channels[i];\n    if (!functions.isBoolean(sensor.toggle)) {\n        msg.payload = { sensors: { toggle: 'Type must be a boolean.' } };\n        return [msg, null];\n    }\n    sensor.toggle = Boolean(sensor.toggle);\n    if ([257, 294, 295].includes(msg.payload.sensorType)) {\n        if (!functions.isNumber(sensor.debounceHigh)) {\n            msg.payload = { sensors: { debounceHigh: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        if (!functions.isNumber(sensor.debounceLow)) {\n            msg.payload = { sensors: { debounceLow: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        sensor.hysteresisHigh = 0.5;\n        sensor.hysteresisLow = 0.5;\n        sensor.offset = 0;\n    } else if ([258, 296].includes(msg.payload.sensorType)) {\n        sensor.hysteresisHigh = 0.5;\n        sensor.hysteresisLow = 0.5;\n        sensor.offset = 0;\n    } else {\n        if (!functions.isNumber(sensor.hysteresisHigh)) {\n            msg.payload = { sensors: { hysteresisHigh: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        if (!functions.isNumber(sensor.hysteresisLow)) {\n            msg.payload = { sensors: { hysteresisLow: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        if (!functions.isNumber(sensor.offset)) {\n            msg.payload = { sensors: { offset: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        if (!functions.isNumber(sensor.debounceHigh)) {\n            msg.payload = { sensors: { debounceHigh: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        if (!functions.isNumber(sensor.debounceLow)) {\n            msg.payload = { sensors: { debounceLow: 'Type must be a number.' } };\n            return [msg, null];\n        }\n        sensor.hysteresisHigh = functions.clamp(channel.hysteresisMin, channel.hysteresisMax, Number(sensor.hysteresisHigh));\n        sensor.hysteresisLow = functions.clamp(channel.hysteresisMin, channel.hysteresisMax, Number(sensor.hysteresisLow));\n        sensor.offset = functions.clamp(-channel.offsetRange, channel.offsetRange, Number(sensor.offset));\n    }\n    if (sensor.hysteresisHigh < sensor.hysteresisLow) {\n        msg.payload = { nonFieldError: 'HysteresisHigh must be less than or equal to HysteresisLow' };\n        return [msg, null];\n    }\n    sensor.debounceHigh = Number(sensor.debounceHigh);\n    sensor.debounceLow = Number(sensor.debounceLow);\n}\n\nmsg.device = msg.payload;\nmsg.sensors = msg.payload.sensors;\nreturn [null, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 360,
        "y": 4380,
        "wires": [
            [
                "619d970bfc616578"
            ],
            [
                "7b8980b273f7ea2a"
            ]
        ]
    },
    {
        "id": "bd10c111f75f7722",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "全デバイス取得",
        "url": "/api/v2/device",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 4300,
        "wires": [
            [
                "50ec31c548c40804"
            ]
        ]
    },
    {
        "id": "50ec31c548c40804",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "全デバイス情報整形",
        "func": "const devices = flow.get('devices') || {};\nconst filters = [(_) => true];\nif (msg.payload.deviceName != null) {\n    filters.push((x) => x.deviceName === msg.payload.deviceName);\n}\nif (msg.payload.accessType != null) {\n    filters.push((x) => x.accessType === Number(msg.payload.accessType));\n}\nif (msg.payload.sensorType != null) {\n    filters.push((x) => x.sensorType === Number(msg.payload.sensorType));\n}\n\nmsg.payload = Object.values(devices)\n    .flatMap(x => Object.values(x))\n    .filter(x => filters.every(f => f(x)))\n    .map(x => ({\n        deviceId: x.deviceId,\n        deviceName: x.deviceName,\n        accessType: x.accessType,\n        sensorType: x.sensorType,\n        isSaveData: Boolean(x.isSaveData),\n        isSaveCount: Boolean(x.isSaveCount),\n        key: x.key.toString(),\n        sensors: x.sensors.map(y => ({\n            channel: y.channel,\n            count: y.count,\n            toggle: Boolean(y.toggle),\n            hysteresisHigh: y.hysteresisHigh,\n            hysteresisLow: y.hysteresisLow,\n            offset: y.offset,\n            debounceHigh: y.debounceHigh,\n            debounceLow: y.debounceLow\n        }))\n    }));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 4300,
        "wires": [
            [
                "ae763e28a471cf29"
            ]
        ]
    },
    {
        "id": "f6723cba363fc214",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "デバイス用WebAPI",
        "info": "",
        "x": 190,
        "y": 4260,
        "wires": []
    },
    {
        "id": "ae763e28a471cf29",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 4300,
        "wires": []
    },
    {
        "id": "619d970bfc616578",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "Bad Request",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 4360,
        "wires": [
            [
                "ae763e28a471cf29"
            ]
        ]
    },
    {
        "id": "5edafdbe671ec203",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 350,
        "y": 4460,
        "wires": [
            [
                "58976a6a4b98c8df"
            ]
        ]
    },
    {
        "id": "58976a6a4b98c8df",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "add",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 4460,
        "wires": [
            [
                "6e394688459388e0"
            ]
        ]
    },
    {
        "id": "8ae1670df02ec9e3",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "デバイス情報整形",
        "func": "msg.payload = {\n    deviceId: msg.payload.deviceId,\n    deviceName: msg.payload.deviceName,\n    accessType: msg.payload.accessType,\n    sensorType: msg.payload.sensorType,\n    key: msg.payload.key,\n    sensors: msg.payload.sensors.map((y, i) => ({\n        channel: msg.payload.channels[i].channel,\n        count: 0,\n        toggle: Boolean(y.toggle),\n        hysteresisHigh: y.hysteresisHigh,\n        hysteresisLow: y.hysteresisLow,\n        offset: y.offset,\n        debounceHigh: y.debounceHigh,\n        debounceLow: y.debounceLow\n    }))\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 4460,
        "wires": [
            [
                "6be162904e05fa80"
            ]
        ]
    },
    {
        "id": "6e394688459388e0",
        "type": "subflow:cb5ec79ce8b445f4",
        "z": "baa69f6c03978bf4",
        "name": "",
        "x": 700,
        "y": 4460,
        "wires": [
            [
                "8ae1670df02ec9e3",
                "2bf0e71a789037b3"
            ]
        ]
    },
    {
        "id": "6be162904e05fa80",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 4480,
        "wires": []
    },
    {
        "id": "7b8980b273f7ea2a",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "デバイス登録SQL",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `devices` (\n    `device_name`,\n    `sensor_type_id`,\n    `access_type`,\n    `is_save_data`,\n    `is_save_count`\n  )\nVALUES\n  (\n    :deviceName,\n    :sensorType,\n    :accessType,\n    :isSaveData,\n    :isSaveCount\n  );",
        "output": "str",
        "x": 590,
        "y": 4400,
        "wires": [
            [
                "5edafdbe671ec203"
            ]
        ]
    },
    {
        "id": "0c2127a7f94d3a39",
        "type": "catch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "scope": [
            "5edafdbe671ec203",
            "155fb4673e34caae",
            "79f499662945b692",
            "399ff4a62b35ad02",
            "31070855a4d6bbbf"
        ],
        "uncaught": false,
        "x": 690,
        "y": 4500,
        "wires": [
            [
                "be054ed9f0a0efa7"
            ]
        ]
    },
    {
        "id": "be054ed9f0a0efa7",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "Internal Server Error",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 4500,
        "wires": [
            [
                "6be162904e05fa80"
            ]
        ]
    },
    {
        "id": "2bf0e71a789037b3",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "541c3dde2ed80ccb",
            "da39fb27a6475876"
        ],
        "x": 815,
        "y": 4420,
        "wires": []
    },
    {
        "id": "d1fc5b231a0f6e5b",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "デバイス削除",
        "url": "/api/v2/device/:deviceId",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 4600,
        "wires": [
            [
                "fa2ac028136ff136"
            ]
        ]
    },
    {
        "id": "7b862508355f855d",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "デバイス削除",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DELETE FROM\n  `devices`\nWHERE\n  `device_id` = :deviceId;",
        "output": "str",
        "x": 600,
        "y": 4560,
        "wires": [
            [
                "155fb4673e34caae"
            ]
        ]
    },
    {
        "id": "fa2ac028136ff136",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\n\n// デバイスIDチェック\nif (functions.isInteger(msg.req.params.deviceId)) {\n    msg.payload = {\n        deviceId: Number(msg.req.params.deviceId)\n    };\n    return [msg, null];\n}\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 4600,
        "wires": [
            [
                "7b862508355f855d"
            ],
            [
                "b61dfa102e476785"
            ]
        ]
    },
    {
        "id": "2489a5fa9c781614",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.affectedRows",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 4560,
        "wires": [
            [
                "7cdfbcfd74f40dae",
                "6bd750f47369849d"
            ],
            [
                "230c0b54c523e69b"
            ]
        ]
    },
    {
        "id": "230c0b54c523e69b",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "404",
                "tot": "num"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4620,
        "wires": [
            [
                "04d7f216dc6c2b13"
            ]
        ]
    },
    {
        "id": "7cdfbcfd74f40dae",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 4540,
        "wires": [
            [
                "6d45aa6d9467939e"
            ]
        ]
    },
    {
        "id": "6bd750f47369849d",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "541c3dde2ed80ccb",
            "da39fb27a6475876"
        ],
        "x": 1055,
        "y": 4580,
        "wires": []
    },
    {
        "id": "155fb4673e34caae",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 770,
        "y": 4560,
        "wires": [
            [
                "2489a5fa9c781614"
            ]
        ]
    },
    {
        "id": "0af07a28e47a3c11",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "センサー値登録",
        "url": "/api/v2/device/:deviceId/sensor/value",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 4660,
        "wires": [
            [
                "60e9ed5681ac1328"
            ]
        ]
    },
    {
        "id": "60e9ed5681ac1328",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\nif (!functions.isInteger(msg.req.params.deviceId)) {\n    msg.payload = { deviceId: 'Not Found.' };\n    msg.statusCode = 404;\n    return [null, msg];\n}\nconst deviceId = Number(msg.req.params.deviceId);\nconst devices = flow.get('devices') || {};\nconst sensorTypes = global.get('sensorTypes') || {};\n\nif (devices[2] == null) {\n    msg.payload = { deviceId: 'Invalid device ID specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nif (msg.payload.time) {\n    const time = moment(msg.payload.time);\n    if (time.isValid()) {\n        msg.payload.time = time.valueOf();\n    } else {\n        msg.payload = { time: 'Invalid time specified.' };\n        msg.statusCode = 400;\n        return [null, msg];\n    }\n} else {\n    msg.payload.time = moment().valueOf();\n}\n\nconst device = Object.values(devices[2]).find(x => x.deviceId === deviceId);\nif (device == null) {\n    msg.payload = { deviceId: 'Not Found.' };\n    msg.statusCode = 404;\n    return [null, msg];\n}\nif (sensorTypes[device.sensorType] == null) {\n    msg.payload = { sensorType: 'Invalid sensor type specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nif (!Array.isArray(msg.payload.values)) {\n    msg.payload = { sensors: 'Type must be an array.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nif (!msg.payload.values.every(x => functions.isNumber(x))) {\n    msg.payload = { sensors: 'Each sensor value must be a number.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nif (msg.payload.values.length !== sensorTypes[device.sensorType].channels.length) {\n    msg.payload = { sensors: 'Length mismatch.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nmsg.payload = {\n    deviceId,\n    accessType: 2,\n    sensorType: device.sensorType,\n    key: device.deviceName,\n    ...msg.payload\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 4660,
        "wires": [
            [
                "3efa3109d4673f08"
            ],
            [
                "6105781db83af9aa"
            ]
        ]
    },
    {
        "id": "04d7f216dc6c2b13",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 4640,
        "wires": []
    },
    {
        "id": "3efa3109d4673f08",
        "type": "subflow:c91ae0a3d8355cfb",
        "z": "baa69f6c03978bf4",
        "name": "",
        "x": 590,
        "y": 4660,
        "wires": [
            [
                "febad7c919b2facd",
                "09f1d5dcfce92cd8"
            ]
        ]
    },
    {
        "id": "09f1d5dcfce92cd8",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "b3f6c20f2ca45d50"
        ],
        "x": 735,
        "y": 4700,
        "wires": []
    },
    {
        "id": "febad7c919b2facd",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 4660,
        "wires": [
            [
                "04d7f216dc6c2b13"
            ]
        ]
    },
    {
        "id": "6105781db83af9aa",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 4700,
        "wires": []
    },
    {
        "id": "6d45aa6d9467939e",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 4540,
        "wires": []
    },
    {
        "id": "8a8031c3dee1e03d",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "全センサー種別取得",
        "url": "/api/v2/sensor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 4880,
        "wires": [
            [
                "2925fae3e72fa5bd"
            ]
        ]
    },
    {
        "id": "2925fae3e72fa5bd",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "全センサー種別取得",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nmsg.payload = Object.values(sensorTypes);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 4880,
        "wires": [
            [
                "993d83ba30cddfe2"
            ]
        ]
    },
    {
        "id": "f962078aefae0633",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別用WebAPI",
        "info": "",
        "x": 200,
        "y": 4840,
        "wires": []
    },
    {
        "id": "993d83ba30cddfe2",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 4900,
        "wires": []
    },
    {
        "id": "374a8230d1ecaa5a",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別取得",
        "url": "/api/v2/sensor/:sensorType",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 4920,
        "wires": [
            [
                "699ff9faa2e59e7a"
            ]
        ]
    },
    {
        "id": "699ff9faa2e59e7a",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別取得",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nif (sensorTypes[msg.req.params.sensorType]) {\n    msg.payload = sensorTypes[msg.req.params.sensorType];\n} else {\n    msg.payload = { sensorType: 'Not Found.' };\n    msg.statusCode = 404;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 430,
        "y": 4920,
        "wires": [
            [
                "993d83ba30cddfe2"
            ]
        ]
    },
    {
        "id": "945d1e220a4b983e",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別登録",
        "url": "/api/v2/sensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 4980,
        "wires": [
            [
                "ec7d3c8475355594"
            ]
        ]
    },
    {
        "id": "95a3088d147e6c9c",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `sensor_types`\nVALUES\n  (\n    :sensorType,\n    :sensorTypeText,\n    :measurement\n  );",
        "output": "str",
        "x": 650,
        "y": 5000,
        "wires": [
            [
                "79f499662945b692"
            ]
        ]
    },
    {
        "id": "ec7d3c8475355594",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\n\n// センサー種別チェック\nif (!functions.isInteger(msg.payload.sensorType, x => 70000 <= x && x < 70010)) {\n    msg.payload = { sensorType: 'The sensor type is out of range.' };\n    return [msg, null];\n}\nmsg.payload.sensorType = Number(msg.payload.sensorType);\n\nconst sensorTypes = global.get('sensorTypes') || {};\nif (sensorTypes[msg.payload.sensorType]) {\n    msg.payload = { sensorType: 'The sensor type is already registered.' };\n    return [msg, null];\n}\n\n// センサー種別名チェック\nif (!functions.isString(msg.payload.sensorTypeText, x => 0 < x.length && x.length < 256)) {\n    msg.payload = { sensorType: 'The maximum length is 255.' };\n    return [msg, null];\n}\n\n// テーブル名チェック\nif (!functions.isString(msg.payload.measurement, x => 0 < x.length && x.length < 64)) {\n    msg.payload = { measurement: 'The maximum length is 255.' };\n    return [msg, null];\n}\n\nif (!msg.payload.measurement.match(/^[a-z]{1,63}$/g)) {\n    msg.payload = { measurement: 'The input contains invalid characters or exceeds the maximum length.' };\n    return [msg, null];\n}\n\nif (Object.values(sensorTypes).find(x => x.measurement === msg.payload.measurement)) {\n    msg.payload = { measurement: 'The measurement is already used.' };\n    return [msg, null];\n}\n\n// チャンネルチェック\nif (!Array.isArray(msg.payload.channels)) {\n    msg.payload = { channels: 'Type must be an array.' };\n    return [msg, null];\n}\nif (msg.payload.channels.length === 0) {\n    msg.payload = { channels: 'Length must be greater than 0.' };\n    return [msg, null];\n}\nif (msg.payload.channels.length !== new Set(msg.payload.channels.filter(c => c.channel).map(c => c.channel)).size) {\n    msg.payload = { channels: { channel: 'All channel properties must be different.' } };\n    return [msg, null];\n}\n\nfor (let i = 0; i < msg.payload.channels.length; i++) {\n    const channel = msg.payload.channels[i];\n    // 単位チェック\n    if (!functions.isString(channel.unit, x => x.length < 64)) {\n        msg.payload = { channels: { unit: 'The maximum length is 63.' } };\n        return [msg, null];\n    }\n    // 小数点以下桁数チェック\n    if (!functions.isInteger(channel.fraction, x => 0 <= x && x <= 10)) {\n        msg.payload = { channels: { fraction: 'The maximum length is 10.' } };\n        return [msg, null];\n    }\n    channel.fraction = Number(channel.fraction);\n\n    // ヒステリシスチェック\n    if (!functions.isNumber(channel.hysteresisMin)) {\n        msg.payload = { channels: { hysteresisMin: 'Type must be a number.' } };\n        return [msg, null];\n    }\n    if (!functions.isNumber(channel.hysteresisMax)) {\n        msg.payload = { channels: { hysteresisMax: 'Type must be a number.' } };\n        return [msg, null];\n    }\n    if (!functions.isNumber(channel.hysteresisStep)) {\n        msg.payload = { channels: { hysteresisStep: 'Type must be a number.' } };\n        return [msg, null];\n    }\n    if (!functions.isNumber(channel.hysteresisDefault)) {\n        msg.payload = { channels: { hysteresisDefault: 'Type must be a number.' } };\n        return [msg, null];\n    }\n    channel.hysteresisMin = Number(channel.hysteresisMin);\n    channel.hysteresisMax = Number(channel.hysteresisMax);\n    channel.hysteresisStep = Number(channel.hysteresisStep);\n    channel.hysteresisDefault = Math.max(Math.min(channel.hysteresisMax, channel.hysteresisDefault), channel.hysteresisMin);\n\n    if (channel.hysteresisMin > channel.hysteresisMax) {\n        msg.payload = { channels: { nonFieldError: 'HysteresisHigh must be less than or equal to HysteresisLow.' } };\n        return [msg, null];\n    }\n    if (channel.hysteresisMax - channel.hysteresisMin < channel.hysteresisStep) {\n        msg.payload = { channels: { nonFieldError: 'HysteresisStep must be less than (hysteresisMax - hysteresisMin).' } };\n        return [msg, null];\n    }\n    if (!functions.isNumber(channel.offsetRange)) {\n        msg.payload = { channels: { offsetRange: 'Type must be a number.' } };\n        return [msg, null];\n    }\n    channel.offsetRange = Math.abs(Number(channel.offsetRange));\n    channel.channelIndex = i;\n}\n\nmsg.channels = msg.payload.channels.map(c => ({\n    sensorType: msg.payload.sensorType,\n    ...c\n}));\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 4980,
        "wires": [
            [
                "befbe25df6927b8e"
            ],
            [
                "95a3088d147e6c9c"
            ]
        ]
    },
    {
        "id": "befbe25df6927b8e",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "Bad Request",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 4960,
        "wires": [
            [
                "993d83ba30cddfe2"
            ]
        ]
    },
    {
        "id": "79f499662945b692",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 830,
        "y": 5000,
        "wires": [
            [
                "1caada7d98e7e8ad"
            ]
        ]
    },
    {
        "id": "a90706c8a91ef92e",
        "type": "split",
        "z": "baa69f6c03978bf4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1210,
        "y": 5000,
        "wires": [
            [
                "0b579989e35124d7"
            ]
        ]
    },
    {
        "id": "1caada7d98e7e8ad",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "channels",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 5000,
        "wires": [
            [
                "a90706c8a91ef92e"
            ]
        ]
    },
    {
        "id": "0b579989e35124d7",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "チャンネル登録",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `sensor_channels`(\n    `sensor_type_id`, \n    `channel`,\n    `channel_name`,\n    `channel_index`,\n    `unit`,\n    `fraction`,\n    `hysteresis_min`,\n    `hysteresis_max`,\n    `hysteresis_step`,\n    `hysteresis_default`,\n    `offset_range`\n  )\nVALUES (\n  :sensorType, \n  :channel,\n  :channelName,\n  :channelIndex,\n  :unit,\n  :fraction,\n  :hysteresisMin,\n  :hysteresisMax,\n  :hysteresisStep,\n  :hysteresisDefault,\n  :offsetRange\n);",
        "output": "str",
        "x": 660,
        "y": 5060,
        "wires": [
            [
                "399ff4a62b35ad02"
            ]
        ]
    },
    {
        "id": "399ff4a62b35ad02",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 830,
        "y": 5060,
        "wires": [
            [
                "ca9af40f836d02f3"
            ]
        ]
    },
    {
        "id": "ca9af40f836d02f3",
        "type": "join",
        "z": "baa69f6c03978bf4",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 970,
        "y": 5060,
        "wires": [
            [
                "0ded2155f7b9a803",
                "d1d16f1332419303"
            ]
        ]
    },
    {
        "id": "0ded2155f7b9a803",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "d46e1b7e3b22f12a"
        ],
        "x": 1095,
        "y": 5100,
        "wires": []
    },
    {
        "id": "c18e57b3ef825b40",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 5100,
        "wires": []
    },
    {
        "id": "a9647adf2ffbdcc5",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別削除",
        "url": "/api/v2/sensor/:sensorType",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 5140,
        "wires": [
            [
                "447be9bb02155fd0"
            ]
        ]
    },
    {
        "id": "447be9bb02155fd0",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\n\nif (functions.isInteger(msg.req.params.sensorType, x => 70000 <= x && x < 70010)) {\n    msg.payload = {\n        sensorType: Number(msg.req.params.sensorType)\n    };\n    return [msg, null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 5140,
        "wires": [
            [
                "43d3579ecf59d6d8"
            ],
            [
                "57ccc71712747663"
            ]
        ]
    },
    {
        "id": "43d3579ecf59d6d8",
        "type": "template",
        "z": "baa69f6c03978bf4",
        "name": "センサー種別削除",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DELETE FROM\n  `sensor_types`\nWHERE\n  `sensor_type_id` = :sensorType;",
        "output": "str",
        "x": 650,
        "y": 5120,
        "wires": [
            [
                "31070855a4d6bbbf"
            ]
        ]
    },
    {
        "id": "451c9e316b491554",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.affectedRows",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 5120,
        "wires": [
            [
                "d1d16f1332419303",
                "0ded2155f7b9a803"
            ],
            [
                "6ef45a596aa1c27d"
            ]
        ]
    },
    {
        "id": "31070855a4d6bbbf",
        "type": "mysql",
        "z": "baa69f6c03978bf4",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 830,
        "y": 5120,
        "wires": [
            [
                "451c9e316b491554"
            ]
        ]
    },
    {
        "id": "d1d16f1332419303",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 5060,
        "wires": [
            [
                "c18e57b3ef825b40"
            ]
        ]
    },
    {
        "id": "6ef45a596aa1c27d",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "404",
                "tot": "num"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 5140,
        "wires": [
            [
                "c18e57b3ef825b40"
            ]
        ]
    },
    {
        "id": "dd07426752cbb06c",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "接点出力制御用WebAPI",
        "info": "",
        "x": 200,
        "y": 5240,
        "wires": []
    },
    {
        "id": "a1a7390537f47a5f",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "全センサー値取得",
        "url": "/api/v2/device/sensor/value",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 4740,
        "wires": [
            [
                "a647eb33f348addb"
            ]
        ]
    },
    {
        "id": "a647eb33f348addb",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "センサー値整形",
        "func": "const devices = flow.get('devices') || {};\nconst filters = [(_) => true];\nif (msg.payload.deviceName != null) {\n    filters.push((x) => x.deviceName === msg.payload.deviceName);\n}\nif (msg.payload.accessType != null) {\n    filters.push((x) => x.accessType === Number(msg.payload.accessType));\n}\nif (msg.payload.sensorType != null) {\n    filters.push((x) => x.sensorType === Number(msg.payload.sensorType));\n}\n\nmsg.payload = Object.values(devices)\n    .flatMap(x => Object.values(x))\n    .filter(x => filters.every(f => f(x)))\n    .map(x => ({\n        deviceId: x.deviceId,\n        deviceName: x.deviceName,\n        accessType: x.accessType,\n        sensorType: x.sensorType,\n        time: (x.time && moment(x.time)) || null,\n        values: x.rawValues || x.values || null\n    }));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 4740,
        "wires": [
            [
                "6105781db83af9aa"
            ]
        ]
    },
    {
        "id": "473e2d713b61c172",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "BravePI 接点出力制御",
        "func": "const txQueue = context.get('tx') || [];\ncontext.set('tx', txQueue);\n\nif (msg.topic === 'tx') {\n    // topicがtxの場合送信データをキューに追加\n    txQueue.push(msg.payload);\n}\n\nif (msg.topic === 'rx') {\n    // topicがrxの場合かつ受信データが送信データと一致した場合\n    const rx = context.get('busy');\n    if (rx && rx.deviceNumber === msg.payload.deviceNumber) {\n        // タイムアウト処理を削除、busyデータを消去\n        clearTimeout(rx.timeoutId);\n        context.set('busy');\n    }\n}\n\n// busyデータを取得\nconst rx = context.get('busy');\nif (rx) {\n    // 送信処理中なら一定時間待ってからもう一度\n    return [null, null, {}];\n}\nconst data = txQueue.shift();\nif (data == null) {\n    // キューが空であれば終了\n    return;\n}\n\nconst timeoutId = setTimeout(() => {\n    // タイムアウトによりbusyデータを消去\n    context.set('busy');\n    // BravePI再起動 + 一定時間待ってからもう一度\n    node.send([null, {}, {}]);\n}, 10000);\n\n// 接点出力送信\nconst payload = {\n    deviceNumber: data.deviceNumber,\n    sensorType: 258,\n    request: data.requests[0],\n    signalOutTime: data.sensors[0].signalOutTime,\n    timeoutId: `${timeoutId}`,\n};\ncontext.set('busy', payload);\nreturn [{ payload }, null, null];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3860,
        "wires": [
            [
                "38c8a28ddfb75c2b"
            ],
            [
                "3be9f2d3c21c2f8a"
            ],
            [
                "634ff92f03be6738"
            ]
        ]
    },
    {
        "id": "3be9f2d3c21c2f8a",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "9779a81a7923c617"
        ],
        "x": 1135,
        "y": 3860,
        "wires": []
    },
    {
        "id": "38c8a28ddfb75c2b",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "接点出力送信",
        "func": "const type = 0x00;\nconst deviceNumbers = Buffer.from([...Array(8)]\n    .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n    .map(x => parseInt(x, 16)))\n    .reverse();\nconst sensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\nconst command = 0x11;\nconst flag = 0;\nconst signalMode = Buffer.from(new Uint8Array([msg.payload.request]).buffer);\nconst signalOutTime = Buffer.from(new Uint16Array([msg.payload.request ? msg.payload.signalOutTime : 0]).buffer);\n\nconst data = Buffer.concat([\n    signalMode,\n    signalOutTime,\n]);\n\nconst length = [data.length, 0];\nconst header = Buffer.from([\n    type,\n    ...length,\n    ...deviceNumbers,\n    ...sensorType,\n    command,\n    flag\n]);\n\nmsg.payload = Buffer.concat([header, data]);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1200,
        "y": 3820,
        "wires": [
            [
                "a454455949cc254a"
            ]
        ]
    },
    {
        "id": "a454455949cc254a",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "bd3d23ff15b4528b"
        ],
        "x": 1335,
        "y": 3820,
        "wires": []
    },
    {
        "id": "6d4d55e10ee45b5e",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "17f21be15633e2aa"
            ]
        ]
    },
    {
        "id": "e6863cc5cf92de3c",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "0617fe5ec68da1d2"
        ],
        "x": 1225,
        "y": 360,
        "wires": []
    },
    {
        "id": "17f21be15633e2aa",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "e6863cc5cf92de3c"
            ]
        ]
    },
    {
        "id": "0617fe5ec68da1d2",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BravePI Output",
        "links": [
            "e6863cc5cf92de3c"
        ],
        "x": 745,
        "y": 3800,
        "wires": [
            [
                "473e2d713b61c172"
            ]
        ]
    },
    {
        "id": "634ff92f03be6738",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 3900,
        "wires": [
            [
                "473e2d713b61c172"
            ]
        ]
    },
    {
        "id": "7a3079333bc30f4d",
        "type": "http in",
        "z": "baa69f6c03978bf4",
        "name": "接点出力制御",
        "url": "/api/v2/device/:deviceId/output",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 5280,
        "wires": [
            [
                "c713131da228f84b"
            ]
        ]
    },
    {
        "id": "c90588d286584ebf",
        "type": "http response",
        "z": "baa69f6c03978bf4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 5340,
        "wires": []
    },
    {
        "id": "fddf10c0e7f07a1a",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "b3f6c20f2ca45d50"
        ],
        "x": 735,
        "y": 5220,
        "wires": []
    },
    {
        "id": "edef95579d5e16d9",
        "type": "udp in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "iface": "",
        "port": "13895",
        "ipv": "udp4",
        "multicast": "false",
        "group": "0.0.0.0",
        "datatype": "buffer",
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "6020f256fbf7295e"
            ]
        ]
    },
    {
        "id": "b60b2b41d933b549",
        "type": "udp out",
        "z": "baa69f6c03978bf4",
        "name": "",
        "addr": "",
        "iface": "",
        "port": "13895",
        "ipv": "udp4",
        "outport": "13895",
        "base64": false,
        "multicast": "broad",
        "x": 1070,
        "y": 1580,
        "wires": []
    },
    {
        "id": "20ab33e3890566a8",
        "type": "mqtt in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "topic": "DwlResp/+",
        "qos": "0",
        "datatype": "buffer",
        "broker": "124495b5a0aade14",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 1020,
        "wires": [
            [
                "b6e52bc6fa12b747"
            ]
        ]
    },
    {
        "id": "6111c9147b89eae2",
        "type": "aedes broker",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG ブローカー",
        "mqtt_port": "51883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "c6815d356357f64d"
            ],
            []
        ]
    },
    {
        "id": "c50130cadabfa991",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "通信開始",
        "func": "if (msg.payload.client.id.startsWith('nodered')) {\n    return;\n}\nconst bravejig = global.get('bravejig') || {};\nconst now = moment();\nconst protocol = 0x01;\nconst type = 0x01;\nconst start = Buffer.from(new Uint8Array([protocol, type, 1]).buffer);\nconst local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\nconst utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\nbravejig[msg.payload.client.id] = true;\nnode.status({ fill: 'green', shape: 'dot', text: JSON.stringify({ text: msg.payload.client.id, time: moment().format() }) });\nmsg.topic = `JIReq/${msg.payload.client.id}`;\nmsg.payload = Buffer.concat([start, local, utc]);\nglobal.set('bravejig', bravejig);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 540,
        "y": 1460,
        "wires": [
            [
                "0efec88a2ce774f3"
            ]
        ]
    },
    {
        "id": "ba32247489712936",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "87ac166ccde292af"
        ],
        "x": 1295,
        "y": 3460,
        "wires": []
    },
    {
        "id": "c713131da228f84b",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "リクエスト検証",
        "func": "const functions = global.get('functions');\nif (!functions.isInteger(msg.req.params.deviceId)) {\n    msg.payload = { deviceId: 'Not Found.' };\n    msg.statusCode = 404;\n    return [null, msg];\n}\nconst deviceId = Number(msg.req.params.deviceId);\nconst devices = flow.get('devices') || {};\nconst sensorTypes = global.get('sensorTypes') || {};\n\nconst device = Object.values(devices)\n    .flatMap(x => Object.values(x))\n    .find(x => x.deviceId === deviceId);\nif (device == null) {\n    msg.payload = { deviceId: 'Not Found.' };\n    msg.statusCode = 404;\n    return [null, msg];\n}\nif (device.sensorType !== 258 && device.sensorType !== 296) {\n    msg.payload = { sensorType: 'Device sensor type is not output device.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nif (!Array.isArray(msg.payload.values)) {\n    msg.payload = { sensors: 'Type must be an array.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nif (!msg.payload.values.every(x => functions.isNumber(x, v => v === 0 || v === 1))) {\n    msg.payload = { sensors: 'Each sensor value must be 0 or 1.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nif (msg.payload.values.length !== sensorTypes[device.sensorType].channels.length) {\n    msg.payload = { sensors: 'Length mismatch.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nmsg.payload = {\n    ...device,\n    ...msg.payload,\n};\n\nif (msg.payload.accessType === 1) {\n    msg.payload.time = moment().valueOf();\n} else {\n    msg.payload.requests = msg.payload.values;\n    delete msg.payload.values;\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 420,
        "y": 5280,
        "wires": [
            [
                "9a14f0c4f3d00f67",
                "347ea843a612deb7"
            ],
            [
                "c90588d286584ebf"
            ]
        ]
    },
    {
        "id": "9a14f0c4f3d00f67",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 5240,
        "wires": [
            [
                "69d72b4cd88565a2"
            ],
            [
                "fddf10c0e7f07a1a"
            ],
            [
                "bbaa4d6f196fea48"
            ],
            [
                "bbaa4d6f196fea48"
            ]
        ]
    },
    {
        "id": "69d72b4cd88565a2",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "adac53072e42f11b"
        ],
        "x": 735,
        "y": 5180,
        "wires": []
    },
    {
        "id": "a1c7b2691d434e03",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 3920,
        "wires": [
            [
                "473e2d713b61c172"
            ]
        ]
    },
    {
        "id": "adac53072e42f11b",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BravePI Output",
        "links": [
            "69d72b4cd88565a2",
            "f3c0aa04af09eeb9"
        ],
        "x": 575,
        "y": 3920,
        "wires": [
            [
                "a1c7b2691d434e03"
            ]
        ]
    },
    {
        "id": "347ea843a612deb7",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 5300,
        "wires": [
            [
                "c90588d286584ebf"
            ]
        ]
    },
    {
        "id": "868614d1796f7137",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "分岐",
        "func": "if (msg.payload.sensorType === 258 && msg.payload.accessType === 0) {\n    return [msg, null, null];\n} else if (msg.payload.sensorType === 296 && (msg.payload.accessType === 3 || msg.payload.accessType === 4)) {\n    return [null, msg, null];\n} else {\n    return [null, null, msg];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 3480,
        "wires": [
            [
                "ba32247489712936"
            ],
            [],
            [
                "971a02248283ad0f"
            ]
        ]
    },
    {
        "id": "e8553e3eb9951f6f",
        "type": "mqtt in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "topic": "JIResp/+",
        "qos": "0",
        "datatype": "buffer",
        "broker": "124495b5a0aade14",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "b6e52bc6fa12b747"
            ]
        ]
    },
    {
        "id": "52deb76043308e36",
        "type": "mqtt in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "topic": "UlReq/+",
        "qos": "0",
        "datatype": "buffer",
        "broker": "124495b5a0aade14",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 980,
        "wires": [
            [
                "b6e52bc6fa12b747"
            ]
        ]
    },
    {
        "id": "0efec88a2ce774f3",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 51",
        "mode": "link",
        "links": [
            "2cb664837a9e2e41"
        ],
        "x": 655,
        "y": 1460,
        "wires": []
    },
    {
        "id": "93c218394c1c7d3d",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 3",
        "links": [
            "24bba03849e36d61"
        ],
        "x": 75,
        "y": 1080,
        "wires": [
            [
                "5325f5bf3a5122d5"
            ]
        ]
    },
    {
        "id": "14f16683491d82fe",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "検証 & レスポンス",
        "func": "/** @type Buffer */\nconst buffer = msg.payload;\nconst name = buffer.subarray(0, 8).toString('utf8');\nif (name !== 'bravejig') {\n    return;\n}\n\nconst ip = getMostSimilarPrefix(msg.ip, getLocalAddress());\nif (ip) {\n    const parts = ip.split('.').map(Number);\n    const server = Buffer.from(new Uint8Array(parts).buffer);\n    const port = Buffer.from(new Uint8Array([202, 171]).buffer);\n    node.status({ fill: 'green', shape: 'dot', text: JSON.stringify({ ip }) });\n    msg.payload = Buffer.concat([\n        buffer.subarray(0, 8),\n        server,\n        port,\n    ]);\n    msg.topic = `${ip}:13895`;\n    return msg;\n}\n\nfunction getMostSimilarPrefix(base, candidates) {\n    let bestMatch = '';\n    let maxPrefixLength = 0;\n    for (const candidate of candidates) {\n        let len = 0;\n        while (len < base.length && len < candidate.length && base[len] === candidate[len]) {\n            len++;\n        }\n        if (len > maxPrefixLength) {\n            maxPrefixLength = len;\n            bestMatch = candidate;\n        }\n    }\n    return bestMatch;\n}\n\nfunction getLocalAddress() {\n    const interfaces = os.networkInterfaces();\n    const addresses = Object.values(interfaces)\n        .flatMap(x => x)\n        .filter(x => !x.internal && x.family === 'IPv4')\n        // .filter(x => !x.address.startsWith('172.18.0.'))\n        .map(x => x.address);\n    return addresses;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 850,
        "y": 1580,
        "wires": [
            [
                "24bba03849e36d61",
                "b60b2b41d933b549"
            ]
        ]
    },
    {
        "id": "6020f256fbf7295e",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fromip",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 1560,
        "wires": [
            [
                "14f16683491d82fe",
                "ef2ade8716087151"
            ]
        ]
    },
    {
        "id": "24bba03849e36d61",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 54",
        "mode": "link",
        "links": [
            "93c218394c1c7d3d"
        ],
        "x": 1015,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c6815d356357f64d",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "clientReady",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "clientDisconnect",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1480,
        "wires": [
            [
                "c50130cadabfa991"
            ],
            [
                "62b88af0a5d1e4af"
            ]
        ]
    },
    {
        "id": "62b88af0a5d1e4af",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "通信終了",
        "func": "const bravejig = global.get('bravejig') || {};\nif (bravejig[msg.payload.client.id]) {\n    bravejig[msg.payload.client.id] = false;\n    global.set('bravejig', bravejig);\n    node.status({ fill: 'red', shape: 'dot', text: JSON.stringify({ text: msg.payload.client.id, time: moment().format() }) });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 540,
        "y": 1500,
        "wires": []
    },
    {
        "id": "cd7fde907e143c3a",
        "type": "mqtt in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "topic": "ErrResp/+",
        "qos": "0",
        "datatype": "buffer",
        "broker": "124495b5a0aade14",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 960,
        "wires": [
            [
                "b6e52bc6fa12b747"
            ]
        ]
    },
    {
        "id": "120ce18733ee7855",
        "type": "mqtt in",
        "z": "baa69f6c03978bf4",
        "name": "",
        "topic": "DfuResp/+",
        "qos": "2",
        "datatype": "buffer",
        "broker": "124495b5a0aade14",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 940,
        "wires": [
            [
                "b6e52bc6fa12b747"
            ]
        ]
    },
    {
        "id": "fdcfbaa666347f7b",
        "type": "comment",
        "z": "baa69f6c03978bf4",
        "name": "通信停止",
        "info": "",
        "x": 1120,
        "y": 980,
        "wires": []
    },
    {
        "id": "d2cb9b338bcf0b93",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "Stop Response",
        "mode": "link",
        "links": [
            "91d57dec157fab97"
        ],
        "x": 1035,
        "y": 980,
        "wires": []
    },
    {
        "id": "b2ed06e9b6f58573",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "接点出力送信",
        "func": "const protocol = 0x01;\nconst type = 0x00;\nconst unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\nconst deviceNumbers = Buffer.from([...Array(8)]\n    .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n    .map(x => parseInt(x, 16)))\n    .reverse();\nconst sensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\nconst command = 0x11;\nconst order = Buffer.from(new Uint16Array([0xFFFF]).buffer);\nconst data = Buffer.concat([\n    Buffer.from(new Uint8Array([msg.payload.requests[0]]).buffer),\n    Buffer.from(new Uint16Array([msg.payload.signalOutTimes[0]]).buffer),\n    Buffer.from(new Uint8Array([msg.payload.requests[1]]).buffer),\n    Buffer.from(new Uint16Array([msg.payload.signalOutTimes[1]]).buffer),\n]);\nconst length = Buffer.from(new Uint16Array([data.length]).buffer);\n\nif (msg.payload.accessType === 4) {\n    msg.topic = msg.payload.dest;\n} else if (msg.payload.accessType === 3) {\n    msg.topic = `DwlReq/${msg.payload.dest}`;\n}\nmsg.payload = Buffer.from([\n    protocol,\n    type,\n    ...length,\n    ...unixTime,\n    ...deviceNumbers,\n    ...sensorType,\n    command,\n    ...order,\n    ...data\n]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1200,
        "y": 3780,
        "wires": [
            [
                "868c3c8f1904809c"
            ]
        ]
    },
    {
        "id": "210a7b30ee81e6d9",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "link in 10",
        "links": [
            "81d738d84e859b92"
        ],
        "x": 575,
        "y": 3720,
        "wires": [
            [
                "07cd975dec0fb9f7"
            ]
        ]
    },
    {
        "id": "07cd975dec0fb9f7",
        "type": "switch",
        "z": "baa69f6c03978bf4",
        "name": "",
        "property": "payload.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "17",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 3720,
        "wires": [
            [
                "67712606f35be758"
            ]
        ]
    },
    {
        "id": "868c3c8f1904809c",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 1335,
        "y": 3780,
        "wires": []
    },
    {
        "id": "07bad945dc18c477",
        "type": "function",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG 接点出力制御",
        "func": "const txQueue = context.get('tx') || [];\ncontext.set('tx', txQueue);\n\nif (msg.topic === 'tx') {\n    // topicがtxの場合送信データをキューに追加\n    txQueue.push(msg.payload);\n}\n\nif (msg.topic === 'rx') {\n    // topicがrxの場合かつ受信データが送信データと一致した場合\n    const rx = context.get('busy');\n    if (rx && rx.deviceNumber === msg.payload.deviceNumber) {\n        // タイムアウト処理を削除、busyデータを消去\n        clearTimeout(rx.timeoutId);\n        context.set('busy');\n    }\n}\n\n// busyデータを取得\nconst rx = context.get('busy');\nif (rx) {\n    // 送信処理中なら一定時間待ってからもう一度\n    return [null, {}];\n}\nconst data = txQueue.shift();\nif (data == null || data.dest == null) {\n    // キューが空であれば終了\n    return;\n}\n\nconst timeoutId = setTimeout(() => {\n    // タイムアウトによりbusyデータを消去\n    context.set('busy');\n    node.send([null, {}]);\n}, 10000);\n\n// 接点出力送信\nconst payload = {\n    deviceNumber: data.deviceNumber,\n    sensorType: 296,\n    accessType: data.accessType,\n    requests: data.requests,\n    signalOutTimes: data.sensors.map(s => s.signalOutTime),\n    timeoutId: `${timeoutId}`,\n    dest: data.dest,\n};\ncontext.set('busy', payload);\nreturn [{ payload }, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3780,
        "wires": [
            [
                "b2ed06e9b6f58573"
            ],
            [
                "e5a98219eecbe159"
            ]
        ]
    },
    {
        "id": "e5a98219eecbe159",
        "type": "delay",
        "z": "baa69f6c03978bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 3820,
        "wires": [
            [
                "07bad945dc18c477"
            ]
        ]
    },
    {
        "id": "f02144f772968883",
        "type": "subflow:c91ae0a3d8355cfb",
        "z": "baa69f6c03978bf4",
        "name": "",
        "env": [
            {
                "name": "input",
                "value": "sensorType",
                "type": "str"
            },
            {
                "name": "output",
                "value": "unit",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 3640,
        "wires": [
            [
                "4c12a5b595113e65"
            ]
        ]
    },
    {
        "id": "53b0c7784d9ae6c5",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 3760,
        "wires": [
            [
                "07bad945dc18c477"
            ]
        ]
    },
    {
        "id": "b25fbc9474ab8e42",
        "type": "link in",
        "z": "baa69f6c03978bf4",
        "name": "BraveJIG Output",
        "links": [
            "e901464e61aa5c34",
            "bbaa4d6f196fea48"
        ],
        "x": 575,
        "y": 3760,
        "wires": [
            [
                "53b0c7784d9ae6c5"
            ]
        ]
    },
    {
        "id": "67712606f35be758",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 3720,
        "wires": [
            [
                "07bad945dc18c477"
            ]
        ]
    },
    {
        "id": "bbaa4d6f196fea48",
        "type": "link out",
        "z": "baa69f6c03978bf4",
        "name": "link out 56",
        "mode": "link",
        "links": [
            "b25fbc9474ab8e42"
        ],
        "x": 735,
        "y": 5260,
        "wires": []
    },
    {
        "id": "2978147c7ad74fb1",
        "type": "change",
        "z": "baa69f6c03978bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.bcm",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.values[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 3620,
        "wires": [
            [
                "ad117ebf2c33ed50"
            ]
        ]
    },
    {
        "id": "c6ef1ce0da7c6c7b",
        "type": "link in",
        "z": "5991e0363629fd30",
        "name": "Sensor Data Response",
        "links": [
            "41a0aaec675b2f30",
            "19f8f1ebcf7617eb",
            "f93ad3863a0e95a2"
        ],
        "x": 75,
        "y": 360,
        "wires": [
            [
                "12daa84811af7ff3"
            ]
        ]
    },
    {
        "id": "7cbd0a49d247a69f",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "03e82e73d56ea971",
        "name": "照度グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"illuminance-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('illuminance-realtime', [264, 289]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4266ca640af97e95",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "97ed516a1493322c",
        "name": "熱電対グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"temperature-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('temperature-realtime', 261);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "8a4b8bc221729a4a",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "a33549fc7f53f910",
        "name": "測距グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"distance-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('distance-realtime', [260, 293]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2eda8772da43a977",
        "type": "link in",
        "z": "5991e0363629fd30",
        "name": "All Device Response",
        "links": [
            "71ed9cce9eab05ba",
            "366b354d9138e657"
        ],
        "x": 255,
        "y": 160,
        "wires": [
            [
                "4338737dc656420c",
                "bc5085ec3a2a3a3e"
            ]
        ]
    },
    {
        "id": "c554f7c10cbd99d7",
        "type": "link out",
        "z": "5991e0363629fd30",
        "name": "All Device Request",
        "mode": "link",
        "links": [
            "e7ba768d9aaf0d9b"
        ],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "60f43b7b72d53838",
        "type": "ui_ui_control",
        "z": "5991e0363629fd30",
        "name": "",
        "events": "all",
        "x": 880,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4338737dc656420c",
        "type": "function",
        "z": "5991e0363629fd30",
        "name": "登録種別を表示",
        "func": "const show = new Set();\n\nfor (const payload of msg.payload) {\n    if (payload.sensorType < 65536) {\n        show.add(`ダッシュボード_${payload.sensorTypeName}`);\n        if (payload.isSaveCount) {\n            show.add(`ダッシュボード_${payload.sensorTypeName}_カウント`);\n        }\n        if (payload.sensorType === 262 && payload.accessType === 1) {\n            show.add('ダッシュボード_スペクトログラム');\n        }\n    } else {\n        show.add(`ダッシュボード_拡張${payload.sensorType - 70000}`);\n        if (payload.isSaveCount) {\n            show.add(`ダッシュボード_拡張${payload.sensorType - 70000}_カウント`);\n        }\n    }\n}\n\nmsg.payload = {\n    group: {\n        show: Array.from(show)\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "60f43b7b72d53838"
            ]
        ]
    },
    {
        "id": "bf8c186f35ec5453",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "077aae774e979adc",
        "name": "差圧グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"pressure-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('pressure-realtime', 263);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "a9fbb3abcb4fea7f",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "6e4f25cdd6124a8c",
        "name": "ADCグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"voltage-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('voltage-realtime', 259);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "86e29599cf578540",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "55557d66b0e6ec0f",
        "name": "加速度グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"acceleration-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('acceleration-realtime', [262, 290]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4f37f24aa616e5bc",
        "type": "change",
        "z": "5991e0363629fd30",
        "name": "カメラを表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"ダッシュボード_カメラ\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 120,
        "wires": [
            [
                "60f43b7b72d53838"
            ]
        ]
    },
    {
        "id": "c6af0d96f389d71d",
        "type": "change",
        "z": "5991e0363629fd30",
        "name": "非表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"ダッシュボード_カメラ\",\"ダッシュボード_スペクトログラム\",\"ダッシュボード_接点入力\",\"ダッシュボード_接点入力_カウント\",\"ダッシュボード_接点出力\",\"ダッシュボード_接点出力_カウント\",\"ダッシュボード_ADC\",\"ダッシュボード_ADC_カウント\",\"ダッシュボード_測距\",\"ダッシュボード_測距_カウント\",\"ダッシュボード_熱電対\",\"ダッシュボード_熱電対_カウント\",\"ダッシュボード_加速度\",\"ダッシュボード_加速度_カウント\",\"ダッシュボード_差圧\",\"ダッシュボード_差圧_カウント\",\"ダッシュボード_照度\",\"ダッシュボード_照度_カウント\",\"ダッシュボード_温湿度\",\"ダッシュボード_温湿度_カウント\",\"ダッシュボード_気圧\",\"ダッシュボード_気圧_カウント\",\"ダッシュボード_拡張0\",\"ダッシュボード_拡張0_カウント\",\"ダッシュボード_拡張1\",\"ダッシュボード_拡張1_カウント\",\"ダッシュボード_拡張2\",\"ダッシュボード_拡張2_カウント\",\"ダッシュボード_拡張3\",\"ダッシュボード_拡張3_カウント\",\"ダッシュボード_拡張4\",\"ダッシュボード_拡張4_カウント\",\"ダッシュボード_拡張5\",\"ダッシュボード_拡張5_カウント\",\"ダッシュボード_拡張6\",\"ダッシュボード_拡張6_カウント\",\"ダッシュボード_拡張7\",\"ダッシュボード_拡張7_カウント\",\"ダッシュボード_拡張8\",\"ダッシュボード_拡張8_カウント\",\"ダッシュボード_拡張9\",\"ダッシュボード_拡張9_カウント\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "2bdae21c93567281",
                "c554f7c10cbd99d7",
                "60f43b7b72d53838"
            ]
        ]
    },
    {
        "id": "07fc3b16cff43f4f",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "63fc741b.4c4a6c",
        "name": "カメラ表示",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div class=\"text-center\">\n    <img ng-src=\"{{src}}\" style=\"height: 260px;\">\n</div>\n<script>\n    (function(scope) {\n        const src = `http://${location.hostname}:51890/?action=stream`;\n        scope.src = src;\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5dd70da8c2d858c1",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "5991e0363629fd30",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "ダッシュボード",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "c6af0d96f389d71d"
            ],
            []
        ]
    },
    {
        "id": "b89569607e0e2ac4",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "01a647a60eecfc02",
        "name": "スペクトログラム",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"spectrogram-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeHeatmap('spectrogram-realtime');\n        scope.$watch('msg.payload', (payload) => {\n            if (payload) {\n                if (Array.isArray(payload)) {\n                    const target = payload.find(x => x.accessType === 1 && x.sensorType === 262);\n                    if (target) {\n                        chart.init(target.deviceName);\n                    }\n                } else {\n                    if (payload.sensorType === 262) {\n                        chart.add(payload);\n                    }\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "af1fc3dc1ff48966",
        "type": "link in",
        "z": "5991e0363629fd30",
        "name": "link in 5",
        "links": [
            "a6024f11a05b7075"
        ],
        "x": 475,
        "y": 600,
        "wires": [
            [
                "b89569607e0e2ac4"
            ]
        ]
    },
    {
        "id": "5c9ac5b623a8fe4a",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "3a94735d22c17cc1",
        "name": "照度カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"illuminance-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('illuminance-count', [264, 289]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c596955abb37f37f",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "a7784d9b75859d43",
        "name": "接点入力グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"gpio-input-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeGpioChart('gpio-input-realtime', [257, 294, 295]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "dafb0f602f940f05",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "767efd572c44ad48",
        "name": "接点入力カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"gpio-input-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('gpio-input-count', [257, 294, 295]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bd0e300bc81f7fb8",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "34100d0ea17ad327",
        "name": "測距カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"distance-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('distance-count', 260);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "dae8341c538f8f8f",
        "type": "switch",
        "z": "5991e0363629fd30",
        "name": "センサー識別",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "257",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "294",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "258",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "296",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "259",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "260",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "293",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "261",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "262",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "290",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "263",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "264",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "289",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "291",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "292",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 16,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "2d5bc8c58a052fd2"
            ],
            [
                "2d5bc8c58a052fd2"
            ],
            [
                "971f9366fc2cb029"
            ],
            [
                "971f9366fc2cb029"
            ],
            [
                "5d275a24c5ddcc27"
            ],
            [
                "42c8431b583bf850"
            ],
            [
                "42c8431b583bf850"
            ],
            [
                "57bc87b92932021d"
            ],
            [
                "9ee9c7596d476a5b"
            ],
            [
                "9ee9c7596d476a5b"
            ],
            [
                "16786823dc4e2faf"
            ],
            [
                "36a3647b66a0f7b6"
            ],
            [
                "36a3647b66a0f7b6"
            ],
            [
                "e2426fabcde8e07e"
            ],
            [
                "0a162316095b4195"
            ],
            [
                "85591182d102b8b1"
            ]
        ]
    },
    {
        "id": "9480cea22558c9d8",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "7af0771c18ab4a41",
        "name": "熱電対カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"temperature-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('temperature-count', 261);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "fd17ee49215559da",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "24aea29c9154d101",
        "name": "加速度カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"acceleration-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('acceleration-count', 262);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c3aeffaf206174cb",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "1eb0a11f681f6bd0",
        "name": "差圧カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"pressure-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('pressure-count', 263);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "fe16493cd7257765",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "68fe794bde8b666c",
        "name": "ADCカウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"voltage-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('voltage-count', 259);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2bdae21c93567281",
        "type": "switch",
        "z": "5991e0363629fd30",
        "name": "",
        "property": "camera",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "4f37f24aa616e5bc"
            ]
        ]
    },
    {
        "id": "d473457853b8ca0b",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "29764148aa53d75a",
        "name": "接点出力グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"gpio-output-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeGpioChart('gpio-output-realtime', [258, 296]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "cdcccd76d2c21941",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "a73faab220117f12",
        "name": "接点出力カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"gpio-output-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('gpio-output-count', [258, 296]);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bc5085ec3a2a3a3e",
        "type": "delay",
        "z": "5991e0363629fd30",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 200,
        "wires": [
            [
                "2d5bc8c58a052fd2",
                "971f9366fc2cb029",
                "5d275a24c5ddcc27",
                "42c8431b583bf850",
                "57bc87b92932021d",
                "9ee9c7596d476a5b",
                "16786823dc4e2faf",
                "36a3647b66a0f7b6",
                "b89569607e0e2ac4",
                "e66a51b64fdb41e7",
                "d3f046fbfba01c2c",
                "4db83d6bb1426831",
                "5ab4dc3ee694e62f",
                "41b5997260fa5d1f",
                "6b8b2a322007e0e8",
                "f5155c9073d06dde",
                "be2b29cd9b544cb9",
                "8d3e78c5b2af14f5",
                "03e7d657606ddd05",
                "0a162316095b4195",
                "e2426fabcde8e07e"
            ]
        ]
    },
    {
        "id": "69f7ee92d3a9d03f",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "2729d526d96a8347",
        "name": "拡張グラフ0",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-0\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70000;\n        const chart = new RealtimeLineChart('extra-realtime-0', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "85591182d102b8b1",
        "type": "switch",
        "z": "5991e0363629fd30",
        "name": "",
        "property": "payload.sensorType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "70000",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70001",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70002",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70003",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70004",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70005",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70006",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70007",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70008",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "70009",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 10,
        "x": 430,
        "y": 820,
        "wires": [
            [
                "e66a51b64fdb41e7"
            ],
            [
                "d3f046fbfba01c2c"
            ],
            [
                "4db83d6bb1426831"
            ],
            [
                "5ab4dc3ee694e62f"
            ],
            [
                "41b5997260fa5d1f"
            ],
            [
                "6b8b2a322007e0e8"
            ],
            [
                "f5155c9073d06dde"
            ],
            [
                "be2b29cd9b544cb9"
            ],
            [
                "8d3e78c5b2af14f5"
            ],
            [
                "03e7d657606ddd05"
            ]
        ]
    },
    {
        "id": "ced23ad6b5a37f80",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "e068733a681da3f1",
        "name": "拡張カウントグラフ0",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-0\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70000;\n        const chart = new RealtimeCountChart('extra-count-0', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "5f482bfd43a3d213",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "b0831c77c41c6183",
        "name": "拡張グラフ1",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-1\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70001;\n        const chart = new RealtimeLineChart('extra-realtime-1', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "56aae8ca29d903b3",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "952e6087ea9f35f2",
        "name": "拡張グラフ2",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-2\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70002;\n        const chart = new RealtimeLineChart('extra-realtime-2', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "43bbbb7db9589186",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "b0cc3b4537efc51c",
        "name": "拡張グラフ3",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-3\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70003;\n        const chart = new RealtimeLineChart('extra-realtime-3', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "11ebbe710d069c6e",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "a134bf5bc2b6cbb4",
        "name": "拡張グラフ4",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-4\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70004;\n        const chart = new RealtimeLineChart('extra-realtime-4', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2071f003bb488a21",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "ffd15755660f7d2c",
        "name": "拡張グラフ5",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-5\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70005;\n        const chart = new RealtimeLineChart('extra-realtime-5', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "2e61326c6bab3dcf",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "9582c26a3dd7a066",
        "name": "拡張グラフ6",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-6\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70006;\n        const chart = new RealtimeLineChart('extra-realtime-6', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "da850a84169aeb3c",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "8255db4898c6086b",
        "name": "拡張グラフ7",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-7\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70007;\n        const chart = new RealtimeLineChart('extra-realtime-7', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf96d9bee6b1da2",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "66950d396fa8dfa6",
        "name": "拡張グラフ8",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-8\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70008;\n        const chart = new RealtimeLineChart('extra-realtime-8', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "44f605ab327f3af7",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "a13eb88e57643e2a",
        "name": "拡張グラフ9",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}}</p>\n</div>\n<div id=\"extra-realtime-9\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70009;\n        const chart = new RealtimeLineChart('extra-realtime-9', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e7f4c56e566cbd1a",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "e1b99fbee429a233",
        "name": "拡張カウントグラフ1",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-1\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70001;\n        const chart = new RealtimeCountChart('extra-count-1', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "25354f756ef14efd",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "4eb878d82b172fce",
        "name": "拡張カウントグラフ2",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-2\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70002;\n        const chart = new RealtimeCountChart('extra-count-2', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4b7af78c204338f4",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "bca6f6c7660a8b8c",
        "name": "拡張カウントグラフ3",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-3\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70003;\n        const chart = new RealtimeCountChart('extra-count-3', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "8a203ecd2c9b30d0",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "11148d19331b709f",
        "name": "拡張カウントグラフ4",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-4\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70004;\n        const chart = new RealtimeCountChart('extra-count-4', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3080a28270f4d6b9",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "751a5d6e79b84e36",
        "name": "拡張カウントグラフ5",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-5\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70005;\n        const chart = new RealtimeCountChart('extra-count-5', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "bf21c88292410537",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "2351af779d17d551",
        "name": "拡張カウントグラフ6",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-6\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70006;\n        const chart = new RealtimeCountChart('extra-count-6', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "47658311f203dd65",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "c36c8d00345fa0b4",
        "name": "拡張カウントグラフ7",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-7\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70007;\n        const chart = new RealtimeCountChart('extra-count-7', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "0afeca115dcf17f3",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "d919a082d3abf0b1",
        "name": "拡張カウントグラフ8",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-8\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70008;\n        const chart = new RealtimeCountChart('extra-count-8', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "505dc5dbfb67a5f7",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "3fcc1645a76bdd2b",
        "name": "拡張カウントグラフ9",
        "order": 1,
        "width": "8",
        "height": "6",
        "format": "<div class=\"group-header\">\n    <p>{{title}} カウント</p>\n</div>\n<div id=\"extra-count-9\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const sensorType = 70009;\n        const chart = new RealtimeCountChart('extra-count-9', sensorType);\n        scope.$watch('msg', (msg) => {\n            if (msg.payload) {\n                if (Array.isArray(msg.payload)) {\n                    scope.title = msg.payload.filter(x => x.sensorType === sensorType)[0].sensorTypeText;\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "28f78c2b8f3f52da",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "01e62e79e78893cb",
        "name": "気圧グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"atmospheric-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('atmospheric-realtime', 292);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f1726b98bf2b8520",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "6db67bf10b10da23",
        "name": "気圧カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"atmospheric-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('atmospheric-count', 292);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "26e012b4bcdf71d0",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "ba253d82e3bf1fc9",
        "name": "温湿度グラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"environment-realtime\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeLineChart('environment-realtime', 291);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'value') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "de0057bf5847825c",
        "type": "ui_template",
        "z": "5991e0363629fd30",
        "group": "da9e66af1ee4505c",
        "name": "温湿度カウントグラフ",
        "order": 1,
        "width": "8",
        "height": "5",
        "format": "<div id=\"environment-count\" class=\"realtime-chart\"></div>\n<script>\n    (function(scope) {\n        const chart = new RealtimeCountChart('environment-count', 291);\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                if (Array.isArray(msg.payload)) {\n                    chart.init(msg.payload);\n                } else if (msg.topic === 'count') {\n                    chart.add(msg.payload);\n                }\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "12daa84811af7ff3",
        "type": "function",
        "z": "5991e0363629fd30",
        "name": "通信量削減",
        "func": "if (msg.payload.time) {\n    const payload = { ...msg.payload };\n    delete payload.deviceId;\n    delete payload.isSaveData;\n    delete payload.measurement;\n    delete payload.deviceConfigId;\n    delete payload.deviceNumber;\n    delete payload.advertiseInterval;\n    delete payload.uplinkInterval;\n    delete payload.key;\n    delete payload.getText;\n    delete payload.bcm;\n    delete payload.battery;\n    delete payload.sensorTypeText;\n    delete payload.rssi;\n    delete payload.dest;\n    delete payload.getTransfer;\n    delete payload.getSensorTypeText;\n    delete payload.exceededThreshold;\n    delete payload.transfer;\n    delete payload.text;\n    delete payload.received;\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 190,
        "y": 360,
        "wires": [
            [
                "dae8341c538f8f8f"
            ]
        ]
    },
    {
        "id": "b688590106b55852",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "b71bae1c56af92ef",
        "name": "登録済デバイステーブル",
        "order": 1,
        "width": "20",
        "height": "14",
        "format": "<div class=\"group-header\">\n    <p>登録済みデバイス</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"send({payload: devices, topic: 'list'})\" aria-label=\"list\">\n        <ui-icon icon=\"mi-add\"></ui-icon>\n    </md-button>\n    <md-tooltip>デバイス追加画面に移動します</md-tooltip>\n</div>\n<div class=\"m-2\">\n    <table class=\"table align-middle\">\n        <tr>\n            <th class=\"w-20\">センサー種別</th>\n            <th class=\"w-25\">デバイス名</th>\n            <th>値</th>\n            <th class=\"w-10\">バッテリー</th>\n            <th class=\"w-10 text-center\">受信時刻</th>\n            <th class=\"w-1\"></th>\n            <th class=\"w-1\"></th>\n        </tr>\n        <tr ng-repeat=\"device in devices | orderBy: 'sensorType'\">\n            <td>\n                {{device.sensorTypeText}}\n                <ui-icon ng-if=\"device.accessType == 0\" class=\"thema-icon\" icon=\"bluetooth\"></ui-icon>\n                <ui-icon ng-if=\"device.accessType == 2\" class=\"thema-icon\" icon=\"http\"></ui-icon>\n                <ui-icon ng-if=\"device.accessType == 3\" class=\"thema-icon\" icon=\"swap_vert\"></ui-icon>\n                <ui-icon ng-if=\"device.accessType == 4\" class=\"thema-icon\" icon=\"usb\"></ui-icon>\n            </td>\n            <td class=\"text-truncate w-max-0\">\n                {{device.deviceName}}\n                <md-tooltip>{{device.deviceName}}</md-tooltip>\n            </td>\n            <td class=\"fw-bold\" style=\"white-space: pre-wrap;\">{{device.received ? device.text : '--'}}</td>\n            <td>{{device.received && (device.accessType == 0 || device.accessType == 3 || device.accessType == 4) &&\n                device.battery ? device.battery + ' [%]': '--'}}</td>\n            <td class=\"text-center\">{{device.received && device.time ? (device.time | date: \"yyyy-MM-dd HH:mm:ss\") :\n                '--'}}</td>\n            <td>\n                <md-button class=\"btn-template\" ng-click=\"send({payload: device, outputs, topic: 'detail'})\"\n                    aria-label=\"detail\">\n                    <ui-icon icon=\"mi-forward\"></ui-icon>\n                </md-button>\n                <md-tooltip>デバイス詳細画面に移動します</md-tooltip>\n            </td>\n            <td>\n                <md-button class=\"btn-template\" ng-click=\"deleteDevice(device)\" aria-label=\"delete\">\n                    <ui-icon icon=\"mi-delete\"></ui-icon>\n                </md-button>\n                <md-tooltip>デバイスを削除します</md-tooltip>\n            </td>\n        </tr>\n    </table>\n</div>\n<script>\n    (function(scope) {\n        scope.devices = [];\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            if (Array.isArray(msg.payload)) {\n                scope.devices = msg.payload;\n                scope.outputs = msg.payload\n                    .filter(x => x.sensorType === 258 || x.sensorType === 296)\n                    .flatMap(x => x.sensors.map(s => ({ device:x, sensor:s, outputText: (x.deviceName + (s.channel?('-'+s.channel):'')) })))\n            } else if (typeof msg.payload === 'object') {\n                const device = scope.devices.find(x => x.deviceName === msg.payload.deviceName);\n                if (device) {\n                    device.values = msg.payload.values;\n                    device.battery = msg.payload.battery;\n                    device.text = msg.payload.text;\n                    device.time = msg.payload.time;\n                    device.unit = msg.payload.unit;\n                    device.fraction = msg.payload.fraction;\n                    device.received = msg.payload.received;\n                    device.sensors = msg.payload.sensors;\n                }\n            }\n        });\n\n        scope.deleteDevice = function(device) {\n            scope.send({\n                payload: device, \n                topic: 'delete'\n            });\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "50d630819d3b806d"
            ]
        ]
    },
    {
        "id": "45491683f6a3f8e5",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "デバイス一覧画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"デバイス_デバイス登録\",\"デバイス_デバイス一覧\",\"デバイス_センサー情報\",\"デバイス_センサー設定\",\"デバイス_その他設定\"],\"show\":[\"デバイス_登録済デバイス\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "1abda9237993ba29"
            ]
        ]
    },
    {
        "id": "1abda9237993ba29",
        "type": "ui_ui_control",
        "z": "81159351db9223bf",
        "name": "",
        "events": "all",
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "50d630819d3b806d",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "分岐",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "list",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b0ec6f9dea1e1670"
            ],
            [
                "3022c0024a1b2906"
            ],
            [
                "2840b613a7aa2f83",
                "ac24ac5025f8f158"
            ]
        ]
    },
    {
        "id": "e655481719a3d247",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "2679f0fb63ef5447",
        "name": "デバイス一覧",
        "order": 1,
        "width": "14",
        "height": "10",
        "format": "<ul class=\"nav nav-pills nav-justified w-80\">\n    <li class=\"nav-item ms-2 mt-2\">\n        <button class=\"nav-link active\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-ble\" type=\"button\" aria-controls=\"nav-ble\" aria-selected=\"false\">\n            Bluetooth\n        </button>\n        <md-tooltip>BravePIトランスミッターに接続されたセンサー一覧を表示します</md-tooltip>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-i2c\" type=\"button\" aria-controls=\"nav-i2c\" aria-selected=\"false\">\n            I2C\n        </button>\n        <md-tooltip>BravePIメインボードに接続されたセンサー一覧を表示します</md-tooltip>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-gpio-in\" type=\"button\" aria-controls=\"nav-gpio-in\" aria-selected=\"false\">\n            接点入力\n        </button>\n        <md-tooltip>BravePIメインボードの接点入力一覧を表示します</md-tooltip>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-gpio-out\" type=\"button\" aria-controls=\"nav-gpio-out\" aria-selected=\"false\">\n            接点出力\n        </button>\n        <md-tooltip>BravePIメインボードの接点出力一覧を表示します</md-tooltip>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-usb\" type=\"button\" aria-controls=\"nav-usb\" aria-selected=\"false\">\n            USB\n        </button>\n        <md-tooltip>BraveJIG USBルーターのモジュール一覧を表示します</md-tooltip>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-lan\" type=\"button\" aria-controls=\"nav-lan\" aria-selected=\"false\">\n            LAN\n        </button>\n        <md-tooltip>BraveJIG LANルーターのモジュール一覧を表示します</md-tooltip>\n    </li>\n</ul>\n\n<div class=\"tab-content\">\n    <div class=\"tab-pane show active\" id=\"nav-ble\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">デバイスID</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">受信時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: { accessType: 0 } | orderBy: ['sensorType', 'key'] \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}\n                        <ui-icon ng-if=\"device.accessType == 0\" class=\"thema-icon\" icon=\"mi-bluetooth\"></ui-icon>\n                    </td>\n                    <td>{{device.key}}</td>\n                    <td style=\"white-space: pre-wrap\">{{device.text}}</td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"tab-pane\" id=\"nav-i2c\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">I2Cアドレス</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">受信時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: i2cFilter | orderBy: 'sensorType' \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}\n                        <ui-icon ng-if=\"!device.accessType\" class=\"bluetooth\" icon=\"mi-bluetooth\"></ui-icon>\n                    </td>\n                    <td>{{device.key}}</td>\n                    <td style=\"white-space: pre-wrap\">{{device.text}}</td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"tab-pane\" id=\"nav-gpio-in\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">ピン番号</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">受信時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: { sensorType: 257, accessType: 1 } | orderBy: 'key' \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\"\n                            ng-disabled=\"usedGpioDevices.has(device.key)\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}</td>\n                    <td>{{device.transfer}}</td>\n                    <td>{{device.text}}</td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"tab-pane\" id=\"nav-gpio-out\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">ピン番号</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">更新時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: { sensorType: 258, accessType: 1 } | orderBy: 'key' \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\"\n                            ng-disabled=\"usedGpioDevices.has(device.key)\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}</td>\n                    <td>{{device.transfer}}</td>\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <span style=\"width: 36px;\">{{device.text}}</span>\n                            <md-switch class=\"ms-2 pt-1 mt-0 mb-0 d-inline-block\" ng-model=\"device.values[0]\"\n                                ng-checked=\"device.values[0]\" ng-change=\"send({topic: 'toggle', payload: device})\"\n                                aria-label=\"init-state\" ng-if=\"!usedGpioDevices.has(device.key)\">\n                            </md-switch>\n                        </div>\n                    </td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"tab-pane\" id=\"nav-usb\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">デバイスID</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">受信時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: { accessType: 4 } | orderBy: 'key' \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\"\n                            ng-disabled=\"usedGpioDevices.has(device.key)\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}</td>\n                    <td>{{device.key}}</td>\n                    <td style=\"white-space: pre-wrap\">{{device.text}}</td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"tab-pane\" id=\"nav-lan\">\n        <div class=\"m-1\">\n            <table class=\"table align-middle\">\n                <tr>\n                    <th class=\"w-1\"></th>\n                    <th class=\"w-25\">センサー種別</th>\n                    <th class=\"w-25\">デバイスID</th>\n                    <th>値</th>\n                    <th class=\"w-15 text-center\">受信時刻</th>\n                </tr>\n                <tr ng-repeat=\"device in findDevices | filter: { accessType: 3 } | orderBy: 'key' \">\n                    <td>\n                        <md-button ng-click=\"send({payload: device, topic: 'check'})\" aria-label=\"check\"\n                            ng-disabled=\"usedGpioDevices.has(device.key)\">\n                            <ui-icon icon=\"mi-check\"></ui-icon>\n                        </md-button>\n                    </td>\n                    <td>{{device.sensorTypeText}}</td>\n                    <td>{{device.key}}</td>\n                    <td style=\"white-space: pre-wrap\">{{device.text}}</td>\n                    <td class=\"text-center\" style=\"padding-top: 5px; padding-bottom: 5px;\">{{device.time ? (device.time\n                        | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<div class=\"top-right\">\n    <md-button ng-click=\"send({topic: 'return'})\" aria-label=\"return\">\n        <ui-icon icon=\"mi-keyboard_return\"></ui-icon>\n    </md-button>\n    <md-tooltip>登録済デバイス一覧画面に戻ります</md-tooltip>\n</div>\n<script>\n    (function(scope) {\n        let ready = false;\n        const registeredDevices = new Set([]);\n        scope.usedGpioDevices = new Set([]);\n        scope.findDevices = [];\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            if (Array.isArray(msg.payload)) {\n                for (const payload of msg.payload) {\n                    if (payload.accessType === 1 && (payload.sensorType === 257 || payload.sensorType === 258)) {\n                        scope.usedGpioDevices.add(payload.key);\n                    } else {\n                        registeredDevices.add(getKey(payload));\n                    }\n                }\n                scope.findDevices = scope.findDevices.filter(x => !registeredDevices.has(getKey(x)));\n                ready = true;\n            } else {\n                if (ready){\n                    if (registeredDevices.has(getKey(msg.payload))) {\n                        return;\n                    }\n                    const find = scope.findDevices.find(x => getKey(x) === getKey(msg.payload));\n                    if (find == null) {\n                        scope.findDevices.push(msg.payload);\n                    } else {\n                        find.sensorTypeText = msg.payload.sensorTypeText;\n                        find.text = msg.payload.text;\n                        find.time = msg.payload.time;\n                        find.battery = msg.payload.battery;\n                        find.tooltip = msg.payload.tooltip;\n                        find.rssi = msg.payload.rssi;\n                    }\n                }\n            }\n        });\n\n        function getKey(payload) {\n            if (payload.sensorType === 258) {\n                return payload.key + ':258';\n            } else {\n                return payload.key;\n            }\n        }\n\n        scope.i2cFilter = function(device) {\n            return device.accessType === 1 && (device.sensorType !== 257 && device.sensorType !== 258);\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "c86c2331f49fa8a0"
            ]
        ]
    },
    {
        "id": "c86c2331f49fa8a0",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "分岐",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "toggle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "91693d170cad8e26"
            ],
            [
                "f74e738a34a36bab"
            ],
            [
                "d490154c20ba1edc"
            ]
        ]
    },
    {
        "id": "126edd647b9fbb58",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "81159351db9223bf",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "デバイス",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 80,
        "wires": [
            [
                "45491683f6a3f8e5",
                "11ff59d932d21517"
            ],
            []
        ]
    },
    {
        "id": "1655ca6dcd41b1ae",
        "type": "ui_ui_control",
        "z": "81159351db9223bf",
        "name": "",
        "events": "all",
        "x": 880,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "fdda14611425e94f",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "link in 1",
        "links": [
            "f74e738a34a36bab",
            "0fcd838dab033581"
        ],
        "x": 185,
        "y": 40,
        "wires": [
            [
                "45491683f6a3f8e5",
                "11ff59d932d21517"
            ]
        ]
    },
    {
        "id": "f74e738a34a36bab",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "登録済みデバイス画面表示",
        "mode": "link",
        "links": [
            "fdda14611425e94f"
        ],
        "x": 555,
        "y": 380,
        "wires": []
    },
    {
        "id": "2840b613a7aa2f83",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "デバイス追加画面表示",
        "mode": "link",
        "links": [
            "541c3dde2ed80ccb",
            "9779a81a7923c617",
            "d70c1a105d9a96f8"
        ],
        "x": 595,
        "y": 240,
        "wires": []
    },
    {
        "id": "ac24ac5025f8f158",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "デバイス追加画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"デバイス_登録済デバイス\"],\"show\":[\"デバイス_デバイス登録\",\"デバイス_デバイス一覧\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 280,
        "wires": [
            [
                "1655ca6dcd41b1ae"
            ]
        ]
    },
    {
        "id": "541c3dde2ed80ccb",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "Reload Device",
        "links": [
            "2840b613a7aa2f83",
            "dae37113175bf72d",
            "2bf0e71a789037b3",
            "6bd750f47369849d"
        ],
        "x": 235,
        "y": 420,
        "wires": [
            [
                "bb6fbd392d474deb",
                "4c9f273c4603348d",
                "d490154c20ba1edc"
            ]
        ]
    },
    {
        "id": "c97bacb2279af991",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 420,
        "wires": [
            [
                "6acc4a78c557486f"
            ]
        ]
    },
    {
        "id": "f7c3fa4df5d48a2f",
        "type": "catch",
        "z": "81159351db9223bf",
        "name": "",
        "scope": [
            "dd58de1cbf8fe133"
        ],
        "uncaught": false,
        "x": 830,
        "y": 540,
        "wires": [
            [
                "79d9d0c0d994f20d"
            ]
        ]
    },
    {
        "id": "d70c1a105d9a96f8",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "Raw Data Response",
        "links": [
            "19f8f1ebcf7617eb",
            "2840b613a7aa2f83",
            "366b354d9138e657",
            "d460bb123636ad70"
        ],
        "x": 95,
        "y": 320,
        "wires": [
            [
                "f29af09712ec1603"
            ]
        ]
    },
    {
        "id": "11ff59d932d21517",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "All Device Request",
        "mode": "link",
        "links": [
            "e7ba768d9aaf0d9b"
        ],
        "x": 255,
        "y": 40,
        "wires": []
    },
    {
        "id": "07b1ce0416ced215",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "Registered Devices",
        "links": [
            "19f8f1ebcf7617eb",
            "366b354d9138e657",
            "71ed9cce9eab05ba",
            "f93ad3863a0e95a2"
        ],
        "x": 95,
        "y": 220,
        "wires": [
            [
                "b688590106b55852"
            ]
        ]
    },
    {
        "id": "0e596951f0079c6f",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "a0a2fc2d5b7cbd5a",
        "name": "センサー情報",
        "order": 1,
        "width": "8",
        "height": "15",
        "format": "<div class=\"group-header\">\n    <p>センサー情報</p>\n</div>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div>センサー種別</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div>デバイス名</div>\n    <div>{{ device.deviceName }}</div>\n    <div>通信</div>\n    <div>{{ device.transfer }}</div>\n    <div ng-if=\"showAccessType\">{{ (device.accessType == 0 || device.accessType == 3 || device.accessType == 4) ?\n        'デバイスID' : 'I2Cアドレス' }}</div>\n    <div ng-if=\"showAccessType\">{{ device.key }}</div>\n    <div ng-if=\"device.accessType == 0 || device.accessType == 3 || device.accessType == 4\">バッテリー</div>\n    <div ng-if=\"device.accessType == 0 || device.accessType == 3 || device.accessType == 4\">{{ device.batteryText }}\n    </div>\n    <div ng-if=\"device.accessType == 0 || device.accessType == 3 || device.accessType == 4\">RSSI</div>\n    <div ng-if=\"device.accessType == 0 || device.accessType == 3 || device.accessType == 4\">{{ device.rssiText }}</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div ng-if=\"device.accessType <= 1 && device.sensorType == 258\">\n        <span style=\"width: 36px;\">{{ device.received ? device.text : '--' }}</span>\n        <md-switch class=\"mt-0 mb-0 ms-2\" ng-change=\"sendGpioOutput()\" ng-model=\"device.values[0]\"\n            ng-disabled=\"disabled\" ng-checked=\"device.values[0]\"></md-switch>\n    </div>\n    <div ng-if=\"device.accessType >= 3 && device.sensorType == 296\" style=\"white-space: pre-wrap\">\n        <span style=\"width: 96px;\">{{ device.received ? device.text : '--' }}</span>\n        <div class=\"d-grid\">\n            <md-switch class=\"mt-0 mb-0 ms-2\" ng-change=\"sendGpioOutput()\" ng-model=\"device.values[0]\"\n                ng-disabled=\"disabled\" ng-checked=\"device.values[0]\"></md-switch>\n            <md-switch class=\"mt-0 mb-0 ms-2\" ng-change=\"sendGpioOutput()\" ng-model=\"device.values[1]\"\n                ng-disabled=\"disabled\" ng-checked=\"device.values[1]\"></md-switch>\n        </div>\n    </div>\n    <div ng-if=\"device.sensorType != 258 && device.sensorType != 296\" style=\"white-space: pre-wrap\">{{ device.received ?\n        device.text : '--' }}</div>\n    <div ng-if=\"device.sensorType != 258 && device.sensorType != 296\">カウンター</div>\n    <div ng-if=\"device.sensorType != 258 && device.sensorType != 296\" style=\"white-space: pre-wrap\">{{ countText }}</div>\n    <div>受信時刻</div>\n    <div>{{device.received && device.time ? (device.time | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</div>\n</div>\n<script>\n    (function(scope) {\n        scope.disabled = true;\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            if (msg.topic === 'detail') {\n                scope.device = msg.payload;\n            }\n            if (scope.device && scope.device.deviceName === msg.payload.deviceName) {\n                scope.countText = msg.payload.sensors.map(x => {\n                    const name = x.displayName || x.channel;\n                    return name ? `${name} : ${x.count}` : x.count;\n                }).join('\\n');\n                scope.device.batteryText = (msg.payload.received && msg.payload.battery)? `${msg.payload.battery} [%]` : '--';\n                scope.device.rssiText = (msg.payload.received && msg.payload.rssi < 0) ? `${msg.payload.rssi} [dBm]` : '--';\n                scope.device.time = msg.payload.time;\n                scope.device.text = msg.payload.text;\n                scope.device.values = msg.payload.values.map(v => Boolean(v));\n                scope.showAccessType = isShowAccessType();\n                scope.disabled = false;\n            }\n        });\n\n        scope.sendGpioOutput = function () {\n            scope.disabled = true;\n            scope.send({ payload: scope.device });\n        };\n\n        function isShowAccessType() {\n            switch (scope.device.accessType) {\n                case 0:\n                case 3:\n                case 4:\n                    return true;\n                case 1:\n                    return scope.device.sensorType != 257 && scope.device.sensorType != 258;\n                default:\n                    return false;\n            }\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 260,
        "y": 860,
        "wires": [
            [
                "a1726441d64b9aa0"
            ]
        ]
    },
    {
        "id": "d955841395580c76",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "デバイス設定画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"デバイス_登録済デバイス\"],\"show\":[\"デバイス_センサー情報\",\"デバイス_センサー設定\",\"デバイス_その他設定\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 820,
        "wires": [
            [
                "665c773754abea0a"
            ]
        ]
    },
    {
        "id": "665c773754abea0a",
        "type": "ui_ui_control",
        "z": "81159351db9223bf",
        "name": "",
        "events": "all",
        "x": 480,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a40ccc3721ba1438",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "link in 4",
        "links": [
            "b8dcc16dd4680231"
        ],
        "x": 95,
        "y": 780,
        "wires": [
            [
                "0e596951f0079c6f",
                "623e200a3a4a3499",
                "d18f3a5ebf960573",
                "d955841395580c76"
            ]
        ]
    },
    {
        "id": "b8dcc16dd4680231",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "デバイス詳細画面表示",
        "mode": "link",
        "links": [
            "a40ccc3721ba1438"
        ],
        "x": 815,
        "y": 140,
        "wires": []
    },
    {
        "id": "0fcd838dab033581",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "登録済みデバイス画面表示",
        "mode": "link",
        "links": [
            "fdda14611425e94f"
        ],
        "x": 615,
        "y": 740,
        "wires": []
    },
    {
        "id": "87ac166ccde292af",
        "type": "link in",
        "z": "81159351db9223bf",
        "name": "Sensor Data Response",
        "links": [
            "19f8f1ebcf7617eb",
            "41a0aaec675b2f30",
            "ba32247489712936",
            "f93ad3863a0e95a2"
        ],
        "x": 95,
        "y": 860,
        "wires": [
            [
                "0e596951f0079c6f"
            ]
        ]
    },
    {
        "id": "623e200a3a4a3499",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "877afb70205958bf",
        "name": "センサー設定",
        "order": 1,
        "width": "8",
        "height": "15",
        "format": "<div class=\"group-header\" style=\"margin-bottom: 1.25rem !important;\">\n    <p>センサー設定</p>\n</div>\n<div class=\"mb-2 me-3 ms-3 mt-4\">\n    <form name=\"config\">\n        <div class=\"row input-form\">\n            <div class=\"col-12\" ng-if=\"msg.payload.sensors[0].channel\">\n                <md-input-container class=\"d-block\">\n                    <label>チャンネル</label>\n                    <md-select ng-model=\"sensor\" ng-change=\"changeChannel(sensor);\">\n                        <md-option ng-value=\"sensor\" ng-repeat=\"sensor in msg.payload.sensors\">\n                            {{ sensor.displayName || sensor.channel }}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"msg.payload.sensorType == 259\">\n                <md-input-container>\n                    <label for=\"adc-display-name\">表示名</label>\n                    <input id=\"adc-display-name\" ng-model=\"sensor.displayName\" type=\"text\" aria-label=\"adc-display-name\" maxlength=\"63\" />\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"msg.payload.sensorType == 259\">\n                <md-input-container>\n                    <label for=\"adc-display-unit\">表示単位</label>\n                    <input id=\"adc-display-unit\" ng-model=\"sensor.displayUnit\" type=\"text\" aria-label=\"adc-display-unit\" maxlength=\"63\" />\n                </md-input-container>\n            </div>\n            <div class=\"col-12\" ng-if=\"msg.payload.sensorType == 261 && msg.payload.accessType == 1\">\n                <md-input-container class=\"d-block\">\n                    <label>熱電対種別</label>\n                    <md-select ng-model=\"sensor.thermocoupleType\">\n                        <md-option ng-value=\"$index\" ng-repeat=\"thermocouple in msg.payload.thermocouples\">\n                            {{ thermocouple }}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"isSensor(msg.payload)\">\n                <md-input-container class=\"mb-0 mt-0\">\n                    <label for=\"hysteresis-high\">立上り{{ sensor.displayUnit ? ' [' + sensor.displayUnit + ']' : '' }}</label>\n                    <input id=\"hysteresis-high\"\n                    ng-model=\"sensor.hysteresisHigh\"\n                    ng-change=\"onChangeRise()\"\n                    type=\"number\"\n                    aria-label=\"HysteresisHigh\"\n                    min=\"{{ hysteresisMin * (sensor.magnification == null ? 1 : sensor.magnification) }}\"\n                    max=\"{{ hysteresisMax * (sensor.magnification == null ? 1 : sensor.magnification) }}\"\n                    required>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"debounceHigh\">立上りデバウンス [s]</label>\n                    <input id=\"debounceHigh\"\n                    ng-model=\"sensor.debounceHigh\"\n                    type=\"number\"\n                    aria-label=\"debounceHigh\"\n                    min=\"0\"\n                    max=\"300\"\n                    required/>\n                    <md-tooltip>立上りを検知した際のデバウンス時間</md-tooltip>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"isSensor(msg.payload)\">\n                <md-input-container class=\"mb-0 mt-0\">\n                    <label for=\"hysteresis-high\">立下り{{ sensor.displayUnit ? ' [' + sensor.displayUnit + ']' : '' }}</label>\n                    <input id=\"hysteresis-low\"\n                    ng-model=\"sensor.hysteresisLow\"\n                    ng-change=\"onChangeFall()\"\n                    type=\"number\"\n                    aria-label=\"HysteresisLow\"\n                    min=\"{{ hysteresisMin * (sensor.magnification == null ? 1 : sensor.magnification) }}\"\n                    max=\"{{ hysteresisMax * (sensor.magnification == null ? 1 : sensor.magnification) }}\"\n                    required>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"debounceLow\">立下りデバウンス [s]</label>\n                    <input id=\"debounceLow\"\n                    ng-model=\"sensor.debounceLow\"\n                    type=\"number\"\n                    aria-label=\"debounceLow\"\n                    min=\"0\"\n                    max=\"300\"\n                    required />\n                    <md-tooltip>立下りを検知した際のデバウンス時間</md-tooltip>\n                </md-input-container>\n            </div>\n            <!-- <div class=\"col-12\" ng-if=\"msg.payload.sensorType == 258 || msg.payload.sensorType == 296\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"signalOutTime\">出力時間 [ms]</label>\n                    <input id=\"signalOutTime\"\n                        ng-model=\"sensor.signalOutTime\"\n                        type=\"number\"\n                        aria-label=\"signalOutTime\"\n                        step=\"1\"\n                        min=\"0\"\n                        max=\"65535\"/>\n                    <md-tooltip>接点出力をHighにする時間 (0の場合は出力維持)</md-tooltip>\n                </md-input-container>\n            </div> -->\n            <div class=\"col-6\" ng-if=\"offsetRange != 0\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"offset\">オフセット{{ sensor.displayUnit ? ' [' + sensor.displayUnit + ']' : '' }}</label>\n                    <input id=\"offset\"\n                        ng-model=\"sensor.offset\"\n                        type=\"number\"\n                        aria-label=\"offset\"\n                        min=\"{{ -offsetRange }}\"\n                        max=\"{{ offsetRange }}\"\n                        required />\n                    <md-tooltip>センサー値を補正するオフセット値</md-tooltip>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"msg.payload.sensorType == 259\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"magnification\">係数</label>\n                    <input id=\"magnification\"\n                    ng-model=\"sensor.magnification\"\n                    ng-change=\"onChangeMagnification()\"\n                    type=\"number\"\n                    aria-label=\"magnification\"\n                    min=\"-1000000.0\"\n                    max=\"1000000.0\"\n                    required/>\n                    <md-tooltip>取得した値に乗算する係数</md-tooltip>\n                </md-input-container>\n            </div>\n            <div class=\"col-12\" ng-if=\"msg.payload.sensorType === 258 && msg.payload.accessType === 1\">\n                <md-input-container>\n                    <span>初期出力</span>\n                    <div class=\"float-end\">\n                        <md-switch class=\"mt-0\" ng-model=\"sensor.initState\" ng-checked=\"sensor.initState\"\n                            aria-label=\"init-state\">\n                        </md-switch>\n                        <md-tooltip>【OFF：初期の接点出力をLow】【ON：初期の接点出力をHigh】にします</md-tooltip>\n                    </div>\n                </md-input-container>\n            </div>\n            <div class=\"col-12\">\n                <md-input-container ng-if=\"msg.payload.sensorType !== 258 && msg.payload.sensorType !== 296\">\n                    <span>トリガー反転</span>\n                    <div class=\"float-end\">\n                        <md-switch class=\"mt-0\" ng-model=\"sensor.toggle\" ng-checked=\"sensor.toggle\" aria-label=\"retain\">\n                        </md-switch>\n                        <md-tooltip ng-if=\"device.sensorType !== 257\">\n                            【OFF：立上り値を上回る】【ON：立下り値を下回る】 とカウントアップやメール送信等を行います\n                        </md-tooltip>\n                        <md-tooltip ng-if=\"device.sensorType === 257\">\n                            【OFF：入力がHighになる】【ON：入力がLowになる】 とカウントアップやメール送信等を行います\n                        </md-tooltip>\n                    </div>\n                </md-input-container>\n                <md-input-container ng-if=\"msg.payload.sensorType === 258 || msg.payload.sensorType === 296\">\n                    <span>出力反転</span>\n                    <div class=\"float-end\">\n                        <md-switch class=\"mt-0\" ng-model=\"sensor.toggle\" ng-checked=\"sensor.toggle\" aria-label=\"retain\">\n                        </md-switch>\n                        <md-tooltip>\n                            他センサーのトリガーによる接点出力のON/OFFを反転させます\n                        </md-tooltip>\n                    </div>\n                </md-input-container>\n            </div>\n            <div class=\"col-12\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container>\n                    <label>接点出力デバイス</label>\n                    <md-select ng-model=\"sensor.gpioOutputSensors\" multiple=\"true\">\n                        <md-option ng-value=\"o\" ng-repeat=\"o in outputs\">\n                            {{o.outputText}}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-12\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container>\n                    <label>MQTTトピック</label>\n                    <md-select ng-model=\"sensor.mqttTopics\" multiple=\"true\">\n                        <md-option ng-value=\"t\" ng-repeat=\"t in msg.topics\">{{ t.topic }}</md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container>\n                    <label for=\"extra-key\">MQTT追加キー</label>\n                    <input id=\"extra-key\" ng-model=\"extra.key\" type=\"text\" aria-label=\"extra-key\" ng-change=\"onChangeExtraKey(extra.key)\" />\n                </md-input-container>\n            </div>\n            <div class=\"col-6\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container>\n                    <label for=\"extra-value\">MQTT追加バリュー</label>\n                    <input id=\"extra-value\" ng-model=\"extra.value\" type=\"text\" aria-label=\"extra-value\" ng-change=\"onChangeExtraValue(extra.value)\" />\n                </md-input-container>\n            </div>\n            <div class=\"col-12\" ng-if=\"!isOutput(msg.payload)\">\n                <md-input-container>\n                    <label>送信先メールアドレス</label>\n                    <md-select ng-model=\"sensor.mailAddresses\" multiple=\"true\">\n                        <md-option ng-value=\"m\" ng-repeat=\"m in msg.mailAddresses\">{{ m.to }}</md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-12 mt-0\">\n                <md-input-container class=\"bottom-left\">\n                    <md-button class=\"btn-template btn-danger\" ng-click=\"clearCount()\" aria-label=\"update\">\n                        クリア\n                        <md-tooltip>カウンターをクリアします</md-tooltip>\n                    </md-button>\n                </md-input-container>\n                <md-input-container class=\"bottom-right\">\n                    <md-button class=\"btn-template\" ng-click=\"sendNext()\" aria-label=\"update\"\n                        ng-disabled=\"disabled || config.$invalid\">\n                        更新\n                        <md-tooltip>センサー設定を更新します</md-tooltip>\n                    </md-button>\n                </md-input-container>\n            </div>\n        </div>\n    </form>\n</div>\n<script>\n    (function(scope) {\n        scope.disabled = false;\n        scope.extra = {\n            key: '',\n            value: '',\n        };\n        \n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                scope.device = msg.payload || {};\n                scope.outputs = msg.outputs;\n                scope.topics = msg.topics;\n                scope.mailAddresses = msg.mailAddresses;\n                scope.sensor = msg.payload.sensors[0];\n                scope.changeChannel(scope.sensor);                \n            }\n        });\n        scope.onChangeMagnification = function() {           \n            const channel = scope.device.channels.find(c => c.channel === scope.sensor.channel);\n            const limitHigh = Math.trunc(scope.sensor.magnification * channel.hysteresisMax);\n            const limitLow = Math.trunc(scope.sensor.magnification * channel.hysteresisMin);\n            scope.sensor.hysteresisHigh = Math.min(limitHigh, Math.max(limitLow, scope.sensor.hysteresisHigh));\n            scope.onChangeRise();\n            scope.sensor.hysteresisLow = Math.min(limitHigh, Math.max(limitLow, scope.sensor.hysteresisLow));\n            scope.onChangeFall();\n        };\n        scope.onChangeRise = function() {\n            if (scope.sensor.hysteresisHigh == null) {\n                scope.disabled = true;\n                return;\n            }\n            scope.disabled = false;\n            scope.sensor.hysteresisLow = Math.min(scope.sensor.hysteresisLow, scope.sensor.hysteresisHigh);\n        };\n        scope.onChangeFall = function() {\n            if (scope.sensor.hysteresisLow == null) {\n                scope.disabled = true;\n                return;\n            }\n            scope.disabled = false;\n            scope.sensor.hysteresisHigh = Math.max(scope.sensor.hysteresisLow, scope.sensor.hysteresisHigh);\n        };\n        scope.isSensor = function(device) {\n            const notSensors = [257, 258, 294, 295, 296];\n            return !notSensors.includes(device.sensorType);\n        };\n        scope.isInput = function(device) {\n            return device.sensorType === 257;\n        };\n        scope.isOutput = function(device) {\n            const outputs = [258, 296];\n            return outputs.includes(device.sensorType);\n        };\n        scope.sendNext = function() {\n            scope.send({\n                topic: 'update',\n                payload: {\n                    ...scope.sensor,\n                    ...scope.device\n                }\n            });\n        };\n        scope.clearCount = function() {\n            scope.send({\n                topic: 'clear',\n                payload: {\n                    ...scope.sensor,\n                    ...scope.device\n                }\n            });\n        };\n        scope.onChangeExtraKey = function(key) {\n            if (scope.extra.key.length && scope.extra.value.length) {\n                scope.sensor.extraMqtt = JSON.stringify({\n                    [scope.extra.key]: scope.extra.value\n                });\n            } else {\n                scope.sensor.extraMqtt = '{}';\n            }\n        };\n\n        scope.onChangeExtraValue = function(value) {\n            if (scope.extra.key.length && scope.extra.value.length) {\n                scope.sensor.extraMqtt = JSON.stringify({\n                    [scope.extra.key]: scope.extra.value\n                });\n            } else {\n                scope.sensor.extraMqtt = '{}';\n            }\n        };\n\n        scope.changeChannel = function(sensor) {\n            scope.sensor = sensor;\n            const channel = scope.device.channels.find(c => c.channel === sensor.channel);\n            scope.sensor.displayUnit = scope.sensor.displayUnit || channel.unit;\n            scope.hysteresisMin = channel.hysteresisMin;\n            scope.hysteresisMax = channel.hysteresisMax;\n            scope.hysteresisStep = channel.hysteresisStep;\n            scope.offsetRange = channel.offsetRange;\n            scope.sensor.gpioOutputSensors = scope.outputs\n                .filter(x => sensor.gpioOutputSensors.find(y => y.sensor.sensorId === x.sensor.sensorId));\n            scope.sensor.mqttTopics = scope.topics\n                .filter(x => scope.sensor.mqttTopics.find(y => y.mqttTopicId === x.mqttTopicId));\n            scope.sensor.mailAddresses = scope.mailAddresses\n                .filter(x => scope.sensor.mailAddresses.find(y => y.mailAddressId === x.mailAddressId));            \n            const extra = JSON.parse(scope.sensor.extraMqtt);\n            scope.extra.key = Object.keys(extra)[0] || '';\n            scope.extra.value = Object.values(extra)[0] || '';\n        }\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 260,
        "y": 700,
        "wires": [
            [
                "ff6bd5ecb0581937"
            ]
        ]
    },
    {
        "id": "0be708bf719e0d2c",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "Delete Device Request",
        "mode": "link",
        "links": [
            "a3312e2aa2d01cea"
        ],
        "x": 1315,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd58de1cbf8fe133",
        "type": "mysql",
        "z": "81159351db9223bf",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "b25ecfe11f9c0b6c"
            ]
        ]
    },
    {
        "id": "6acc4a78c557486f",
        "type": "template",
        "z": "81159351db9223bf",
        "name": "デバイス登録SQL",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `devices` (\n    `device_name`,\n    `sensor_type_id`,\n    `access_type`\n  )\nVALUES\n  (\n    :deviceName,\n    :sensorType,\n    :accessType\n  );",
        "output": "str",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "dd58de1cbf8fe133"
            ]
        ]
    },
    {
        "id": "ff6bd5ecb0581937",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "clear",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 700,
        "wires": [
            [
                "dcddabdc0c0edabb"
            ],
            [
                "93169e0f464f1d7a"
            ],
            [
                "0fcd838dab033581"
            ]
        ]
    },
    {
        "id": "03b425d845fc45f5",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "デバイス設定更新",
        "mode": "link",
        "links": [
            "da39fb27a6475876"
        ],
        "x": 825,
        "y": 740,
        "wires": []
    },
    {
        "id": "d490154c20ba1edc",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "00effd5807f5c7d1",
        "name": "デバイス登録フォーム",
        "order": 1,
        "width": "6",
        "height": "9",
        "format": "<div class=\"ms-3 me-3 mt-2\">\n    <div class=\"row input-form\">\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\">\n                <label>センサー</label>\n                <md-select ng-model=\"form.sensorType\" aria-label=\"sensorType\" ng-required=\"true\"\n                    ng-change=\"changeAccessType()\">\n                    <md-option ng-value=\"type.sensorType\" ng-repeat=\"type in sensorTypes\">{{type.sensorTypeName}}\n                    </md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\">\n                <label>通信</label>\n                <md-select ng-model=\"form.accessType\" aria-label=\"accessType\" ng-required=\"true\"\n                    ng-change=\"changeAccessType()\">\n                    <md-option value=\"0\">Bluetooth</md-option>\n                    <md-option value=\"1\">I2C / GPIO</md-option>\n                    <md-option value=\"4\">USB</md-option>\n                    <md-option value=\"3\">LAN</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\" ng-if=\"showText()\">\n                <label>{{form.label}}</label>\n                <input type=\"text\" ng-model=\"form.key\" ng-required=\"true\" aria-label=\"key\" ng-change=\"validate()\" />\n            </md-input-container>\n            <md-input-container class=\"d-block\" ng-if=\"showInputSelect()\">\n                <label>{{form.label}}</label>\n                <md-select ng-model=\"form.key\" aria-label=\"accessType\" ng-required=\"true\">\n                    <md-option ng-value=\"input.value\" ng-repeat=\"input in inputs\">{{input.text}}</md-option>\n                </md-select>\n            </md-input-container>\n            <md-input-container class=\"d-block\" ng-if=\"showOutputSelect()\">\n                <label>{{form.label}}</label>\n                <md-select ng-model=\"form.key\" aria-label=\"accessType\" ng-required=\"true\">\n                    <md-option ng-value=\"output.value\" ng-repeat=\"output in outputs\">{{output.text}}</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\">\n                <label>デバイス名</label>\n                <input type=\"text\" ng-model=\"form.deviceName\" ng-required=\"true\" aria-label=\"deviceName\" ng-change=\"validate()\" />\n            </md-input-container>\n        </div>\n    </div>\n</div>\n<md-button ng-click=\"send({payload: form})\" style=\"height: 48px;\" ng-disabled=\"disabled\" aria-label=\"register\"\n    class=\"md-raised ps-4 pe-4\">\n    <ui-icon icon=\"add\" class=\"white-icon\"></ui-icon>\n    デバイス登録\n    <md-tooltip>デバイスを新規登録します。</md-tooltip>\n</md-button>\n<script>\n    (function(scope) {\n        scope.disabled = true;\n        scope.inputs = [];\n        scope.outputs = [];\n        scope.sensorTypes = [];\n        scope.form = {\n            sensorType: 289,\n            accessType: 4,\n            key: '',\n            deviceName: '',\n            label: 'デバイスID',\n            dest: '',\n        };\n        const outputs = [{\n                text: 'BCM GPIO 17',\n                value: '0'\n            },\n            {\n                text: 'BCM GPIO 27',\n                value: '1'\n            },\n            {\n                text: 'BCM GPIO 24',\n                value: '2'\n            },\n            {\n                text: 'BCM GPIO 06',\n                value: '3'\n            },\n            {\n                text: 'BCM GPIO 13',\n                value: '4'\n            },\n        ];\n        const inputs = [{\n                text: 'BCM GPIO 18',\n                value: '0'\n            },\n            {\n                text: 'BCM GPIO 23',\n                value: '1'\n            },\n            {\n                text: 'BCM GPIO 25',\n                value: '2'\n            },\n            {\n                text: 'BCM GPIO 05',\n                value: '3'\n            },\n            {\n                text: 'BCM GPIO 16',\n                value: '4'\n            },\n        ];\n\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            switch (msg.topic) {\n                case 'check':\n                    scope.form.sensorType = msg.payload.sensorType;\n                    scope.form.accessType = msg.payload.accessType;\n                    scope.form.dest = msg.payload.dest;\n                    scope.changeAccessType();\n                    scope.form.key = msg.payload.key;\n                    scope.validate();                    \n                    break;\n                case 'add':\n                    console.log(msg);\n                    scope.form.key = '';\n                    scope.form.deviceName = '';\n                    scope.inputs = scope.inputs.filter(x => x.value != msg.payload.key);\n                    scope.outputs = scope.outputs.filter(x => x.value != msg.payload.key);\n                    scope.changeAccessType();\n                    break;\n                case 'list':\n                    scope.inputs = inputs.filter(x => !msg.payload.find(y => y.key == x.value));\n                    scope.outputs = outputs.filter(x => !msg.payload.find(y => y.key == x.value));\n                    scope.changeAccessType();\n                    break;\n                case 'sensorTypes':\n                    scope.sensorTypes = Object.values(msg.payload)\n                        .map(x => x.sensorType <= 264 ? x : ({...x, sensorTypeName: `${x.sensorTypeName} (JIG)` }))\n                        .filter(x => x.sensorType < 65536);\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        scope.changeAccessType = function() {\n            switch (parseInt(scope.form.accessType)) {\n                case 0:\n                case 3:\n                case 4:\n                    scope.form.label = 'デバイスID';\n                    scope.form.key = '';\n                    scope.validate();\n                    break;\n                case 1:\n                    if (scope.form.sensorType == 257) {\n                        scope.form.label = 'GPIO';\n                        scope.form.key = scope.inputs[0]?.value;\n                    } else if (scope.form.sensorType == 258) {\n                        scope.form.label = 'GPIO';\n                        scope.form.key = scope.outputs[0]?.value;\n                    } else {\n                        scope.form.label = 'I2Cアドレス';\n                        scope.form.key = '';\n                    }\n                    scope.validate();\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        scope.validate = function() {\n            if (!(scope.form.deviceName && scope.form.deviceName.length < 256)) {\n                scope.disabled = true;\n                return;\n            }\n            switch (Number(scope.form.accessType)) {\n                case 0:\n                case 3:\n                case 4:\n                    if (scope.form.key.match(/^[0-9a-fA-F]{1,16}$/g)) {\n                        scope.form.deviceNumber = ('0000000000000000' + scope.form.key.toLowerCase()).slice(-16);\n                        scope.disabled = false;\n                    } else {\n                        scope.disabled = true;\n                    }\n                    break;\n                case 1:\n                    if (scope.form.sensorType == 257 || scope.form.sensorType == 258) {\n                        const k = scope.form.key;\n                        if (Number.isInteger(scope.form.key)) {\n                            scope.disabled = k < 0 || 4 < k;\n                        } else {\n                            scope.disabled = k == '';\n                        }\n                    } else {\n                        if (scope.form.key.match(/^0x[0-9a-fA-F]{2}$/g)) {\n                            scope.form.address = parseInt(scope.form.key, 16);\n                            scope.disabled = false;\n                        } else {\n                            scope.disabled = true;\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        scope.showText = function() {\n            if (scope.form.sensorType == 257 || scope.form.sensorType == 258) {\n                return (scope.form.accessType == 0 || scope.form.accessType == 4);\n            } else {\n                return true;\n            }\n        };\n\n        scope.showInputSelect = function() {\n            return scope.showText() === false && scope.form.sensorType == 257;\n        };\n\n        scope.showOutputSelect = function() {\n            return scope.showText() === false && scope.form.sensorType == 258;\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "c97bacb2279af991"
            ]
        ]
    },
    {
        "id": "b25ecfe11f9c0b6c",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "add",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "c18572c0feb11e1e"
            ]
        ]
    },
    {
        "id": "91f09b40cde8dc65",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 760,
        "wires": [
            [
                "0fcd838dab033581"
            ],
            [
                "d288d20be403be87"
            ]
        ]
    },
    {
        "id": "b0ec6f9dea1e1670",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topics",
                "pt": "msg",
                "to": "mqttTopics",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "mailAddresses",
                "pt": "msg",
                "to": "mailAddresses",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 140,
        "wires": [
            [
                "b8dcc16dd4680231"
            ]
        ]
    },
    {
        "id": "83379f9d3634e9fb",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "登録済みデバイス画面表示",
        "mode": "link",
        "links": [
            "77a1bcb318165fbf"
        ],
        "x": 1355,
        "y": 660,
        "wires": []
    },
    {
        "id": "bb6fbd392d474deb",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sensorTypes",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sensorTypes",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 480,
        "wires": [
            [
                "d490154c20ba1edc"
            ]
        ]
    },
    {
        "id": "251fd48667051f66",
        "type": "ui_toast",
        "z": "81159351db9223bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "5bc14363356950d7"
            ]
        ]
    },
    {
        "id": "3022c0024a1b2906",
        "type": "function",
        "z": "81159351db9223bf",
        "name": "ダイアログ",
        "func": "msg.device = msg.payload;\nmsg.topic = '確認';\nmsg.payload = `${msg.payload.sensorTypeName}センサー：${msg.payload.deviceName}を削除しますか？`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "251fd48667051f66"
            ]
        ]
    },
    {
        "id": "5bc14363356950d7",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 200,
        "wires": [
            [
                "b3e58bc75603155c"
            ]
        ]
    },
    {
        "id": "b3e58bc75603155c",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "device",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "0be708bf719e0d2c"
            ]
        ]
    },
    {
        "id": "51b8bd16c5b69c32",
        "type": "ui_toast",
        "z": "81159351db9223bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1190,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "79d9d0c0d994f20d",
        "type": "function",
        "z": "81159351db9223bf",
        "name": "ダイアログ作成",
        "func": "msg.topic = 'エラー';\nif (msg.error.message.startsWith('Error: Duplicate entry')) {\n    msg.payload = `デバイス名：${msg.payload.deviceName}は既に使用されています。`;\n} else {\n    msg.payload = msg.error.message;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "51b8bd16c5b69c32"
            ]
        ]
    },
    {
        "id": "93169e0f464f1d7a",
        "type": "subflow:9a1bb339c6988af7",
        "z": "81159351db9223bf",
        "name": "",
        "x": 680,
        "y": 700,
        "wires": [
            [
                "03b425d845fc45f5",
                "f147201fd4135baa"
            ]
        ]
    },
    {
        "id": "d288d20be403be87",
        "type": "subflow:6e08da7314bcfdec",
        "z": "81159351db9223bf",
        "name": "",
        "x": 680,
        "y": 780,
        "wires": [
            [
                "03b425d845fc45f5",
                "b1e2a05aafde1a11"
            ]
        ]
    },
    {
        "id": "c18572c0feb11e1e",
        "type": "subflow:cb5ec79ce8b445f4",
        "z": "81159351db9223bf",
        "name": "",
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "dae37113175bf72d"
            ]
        ]
    },
    {
        "id": "dae37113175bf72d",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "Add Device Request",
        "mode": "link",
        "links": [
            "da39fb27a6475876",
            "541c3dde2ed80ccb"
        ],
        "x": 1295,
        "y": 480,
        "wires": []
    },
    {
        "id": "4c9f273c4603348d",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "add",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 440,
        "wires": [
            [
                "d490154c20ba1edc"
            ]
        ]
    },
    {
        "id": "d18f3a5ebf960573",
        "type": "ui_template",
        "z": "81159351db9223bf",
        "group": "662d7cc35535e940",
        "name": "その他設定",
        "order": 1,
        "width": "8",
        "height": "15",
        "format": "<div class=\"group-header\" style=\"margin-bottom: 1.25rem !important;\">\n    <p>その他設定</p>\n</div>\n<div class=\"position-absolute end-0 p-3\">\n    <md-button ng-click=\"send({topic: 'return'})\" aria-label=\"return-device\">\n        <ui-icon icon=\"mi-keyboard_return\"></ui-icon>\n    </md-button>\n    <md-tooltip>登録済デバイス一覧画面に戻ります</md-tooltip>\n</div>\n<div class=\"mb-2 me-3 ms-3 mt-4\">\n    <div class=\"row input-form\">\n        <div class=\"col-6\" ng-if=\"isEnableInterval()\">\n            <md-input-container class=\"mb-0 mt-0\">\n                <label for=\"output-interval\">サンプリング間隔 [ms]</label>\n                <input id=\"output-interval\" ng-model=\"config.outputInterval\" type=\"number\" aria-label=\"output-interval\" min=\"100\" max=\"10000\" step=\"100\" ng-change=\"onChangeInput()\">\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"isEnableInterval()\">\n            <md-slider class=\"slider mb-0 mt-2\" ng-model=\"config.outputInterval\" aria-label=\"output-interval\" min=\"100\"\n                max=\"10000\" step=\"100\" ng-change=\"onChangeInput()\">\n            </md-slider>\n        </div>\n        <div>\n            <md-input-container>\n                <span>センサーデータ保存</span>\n                <div class=\"float-end\">\n                    <md-switch class=\"mb-0 mt-0\" ng-model=\"config.isSaveData\" ng-checked=\"config.isSaveData\"\n                        aria-label=\"is-save-data\">\n                    </md-switch>\n                    <md-tooltip>センサーデータの保存を行います</md-tooltip>\n                </div>\n            </md-input-container>\n        </div>\n        <div ng-if=\"msg.payload.sensorType !== 258 && msg.payload.sensorType !== 296\">\n            <md-input-container>\n                <span>カウントアップ & カウント保存</span>\n                <div class=\"float-end\">\n                    <md-switch class=\"mb-0 mt-0\" ng-model=\"config.isSaveCount\" ng-checked=\"config.isSaveCount\"\n                        aria-label=\"is-save-count\">\n                    </md-switch>\n                    <md-tooltip>トリガーによるカウント、カウントの保存を行います</md-tooltip>\n                </div>\n            </md-input-container>\n        </div>\n        <div>\n            <md-input-container class=\"bottom-right\">\n                <md-button class=\"btn-template\" ng-disabled=\"disabled\"\n                    ng-click=\"send({payload: config, topic: 'update'})\" aria-label=\"register\">\n                    更新\n                </md-button>\n                <md-tooltip>デバイス設定を更新します</md-tooltip>\n            </md-input-container>\n        </div>\n    </div>\n</div>\n<script>\n    (function(scope) {\n        scope.disabled = false;\n        scope.$watch('msg', (msg) => {\n            if (msg) {\n                scope.config = msg.payload || {};\n            }\n        });\n\n        scope.isEnableInterval = function() {\n            if (scope.config) {\n                return (scope.config.sensorType === 260 || scope.config.sensorType === 261 || scope.config.sensorType === 264) && scope.config.accessType === 1;\n            } else {\n                return false;\n            }\n        };\n\n        scope.onChangeInput = function() {\n            scope.disabled = scope.config.outputInterval == null;\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 760,
        "wires": [
            [
                "91f09b40cde8dc65"
            ]
        ]
    },
    {
        "id": "f398d8d163be44e0",
        "type": "catch",
        "z": "81159351db9223bf",
        "name": "",
        "scope": [
            "93169e0f464f1d7a"
        ],
        "uncaught": false,
        "x": 650,
        "y": 940,
        "wires": [
            [
                "9d0f4fc9130e1114"
            ]
        ]
    },
    {
        "id": "59f5246df8a89f26",
        "type": "ui_toast",
        "z": "81159351db9223bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3fd2ffefe1b46ebb",
        "type": "catch",
        "z": "81159351db9223bf",
        "name": "",
        "scope": [
            "d288d20be403be87"
        ],
        "uncaught": false,
        "x": 650,
        "y": 980,
        "wires": [
            [
                "ae7edb43abc2512e"
            ]
        ]
    },
    {
        "id": "66768fb49d0d6ac4",
        "type": "ui_toast",
        "z": "81159351db9223bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 1070,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "9d0f4fc9130e1114",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "センサー設定の更新に失敗しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "警告",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 940,
        "wires": [
            [
                "59f5246df8a89f26"
            ]
        ]
    },
    {
        "id": "ae7edb43abc2512e",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "その他設定の更新に失敗しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "警告",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 980,
        "wires": [
            [
                "59f5246df8a89f26"
            ]
        ]
    },
    {
        "id": "f147201fd4135baa",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "センサー設定の更新に成功しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 700,
        "wires": [
            [
                "66768fb49d0d6ac4"
            ]
        ]
    },
    {
        "id": "b1e2a05aafde1a11",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "その他設定の更新に成功しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 780,
        "wires": [
            [
                "66768fb49d0d6ac4"
            ]
        ]
    },
    {
        "id": "fd773af253d9e816",
        "type": "ui_toast",
        "z": "81159351db9223bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 870,
        "y": 660,
        "wires": [
            [
                "2c87e27f2552aace"
            ]
        ]
    },
    {
        "id": "dcddabdc0c0edabb",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "カウンターを0に初期化します。よろしいですか。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "fd773af253d9e816"
            ]
        ]
    },
    {
        "id": "2c87e27f2552aace",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 660,
        "wires": [
            [
                "493d26bd06339754"
            ]
        ]
    },
    {
        "id": "493d26bd06339754",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "device",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "83379f9d3634e9fb"
            ]
        ]
    },
    {
        "id": "f29af09712ec1603",
        "type": "function",
        "z": "81159351db9223bf",
        "name": "受信バッファ",
        "func": "const sensors = global.get('sensors') || {};\nif (Array.isArray(msg.payload)) {\n    node.send(msg);\n    const now = moment().valueOf();\n    const values = [...Object.values(sensors)];\n    for (const v of values) {\n        if (258 < v.sensorType && v.time + 2 * 60 * 60 * 1000 < now) {\n            delete sensors[`${v.sensorType}-${v.key}`];\n        } else {\n            node.send({ payload: v });\n        }\n    }\n} else {\n    if (msg.payload.accessType === 1 && msg.payload.sensorType <= 258) {\n        sensors[`${msg.payload.sensorType}-${msg.payload.key}`] = msg.payload;\n    } else {\n        sensors[msg.payload.key] = msg.payload;\n    }\n    global.set('sensors', sensors);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 240,
        "y": 320,
        "wires": [
            [
                "e655481719a3d247"
            ]
        ]
    },
    {
        "id": "8bdd0fc565c9efed",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "6710c0e3a6f22023"
        ],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "91693d170cad8e26",
        "type": "change",
        "z": "81159351db9223bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.values[0]",
                "pt": "msg",
                "to": "$number(payload.values[0])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 340,
        "wires": [
            [
                "8bdd0fc565c9efed"
            ]
        ]
    },
    {
        "id": "c1629cfb73f4f451",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "b3f6c20f2ca45d50"
        ],
        "x": 955,
        "y": 860,
        "wires": []
    },
    {
        "id": "bf507e0bb612f8d0",
        "type": "subflow:c91ae0a3d8355cfb",
        "z": "81159351db9223bf",
        "name": "",
        "env": [
            {
                "name": "input",
                "value": "sensorType",
                "type": "str"
            },
            {
                "name": "output",
                "value": "unit",
                "type": "str"
            }
        ],
        "x": 670,
        "y": 860,
        "wires": [
            [
                "96163417b5369f92"
            ]
        ]
    },
    {
        "id": "96163417b5369f92",
        "type": "switch",
        "z": "81159351db9223bf",
        "name": "",
        "property": "payload.accessType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 860,
        "wires": [
            [
                "f3c0aa04af09eeb9"
            ],
            [
                "c1629cfb73f4f451"
            ],
            [
                "e901464e61aa5c34"
            ],
            [
                "e901464e61aa5c34"
            ]
        ]
    },
    {
        "id": "e901464e61aa5c34",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "link out 55",
        "mode": "link",
        "links": [
            "b25fbc9474ab8e42"
        ],
        "x": 955,
        "y": 900,
        "wires": []
    },
    {
        "id": "a1726441d64b9aa0",
        "type": "function",
        "z": "81159351db9223bf",
        "name": "接点出力",
        "func": "if (msg.payload.accessType === 1) {\n    msg.payload.time = moment().valueOf();\n    msg.payload.values = msg.payload.values.map(Number);\n    msg.payload.changed = true;\n} else {\n    msg.payload.requests = msg.payload.values.map(Number);\n    msg.payload.values = msg.payload.requests.map(v => 1 - v);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 480,
        "y": 860,
        "wires": [
            [
                "bf507e0bb612f8d0"
            ]
        ]
    },
    {
        "id": "f3c0aa04af09eeb9",
        "type": "link out",
        "z": "81159351db9223bf",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "adac53072e42f11b"
        ],
        "x": 955,
        "y": 820,
        "wires": []
    },
    {
        "id": "b1e463e090ae7902",
        "type": "link in",
        "z": "ce55e77ffc367d5a",
        "name": "link in 7",
        "links": [
            "19f8f1ebcf7617eb",
            "f93ad3863a0e95a2"
        ],
        "x": 155,
        "y": 80,
        "wires": [
            [
                "004ac286dc4f5592"
            ]
        ]
    },
    {
        "id": "a8e4c20144bffad5",
        "type": "ui_template",
        "z": "ce55e77ffc367d5a",
        "group": "ff32a687145df8e1",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "14",
        "format": "<ul class=\"nav nav-pills nav-fill w-50\">\n    <div class=\"group-header\">\n        <p>ログ</p>\n    </div>\n    <li class=\"nav-item ms-4 mt-2\">\n        <button class=\"nav-link active\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-sensor\" ng-click=\"changeTab('sensor')\" type=\"button\" aria-controls=\"nav-sensor\" aria-selected=\"false\">\n            センサー\n        </button>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-count\" ng-click=\"changeTab('count')\" type=\"button\" aria-controls=\"nav-count\" aria-selected=\"false\">\n            カウント\n        </button>\n    </li>\n    <li class=\"nav-item mt-2\">\n        <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-spectrogram\" ng-click=\"changeTab('spectrogram')\" type=\"button\" aria-controls=\"nav-spectrogram\" aria-selected=\"false\">\n            スペクトログラム\n        </button>\n    </li>\n</ul>\n<div class=\"tab-content\">\n    <div class=\"tab-pane fade show active\" id=\"nav-sensor\">\n        <div class=\"row m-2\">\n            <div class=\"col-4\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">開始日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.start\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">終了日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.end\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\">センサー</label>\n                    <md-select ng-model=\"search.sensorType\" ng-required=\"true\" aria-label=\"sensor\">\n                        <md-option ng-value=\"type.sensorType\" ng-repeat=\"type in sensorTypes\">\n                            {{ type.sensorTypeName }}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <md-input-container class=\"d-block mt-0\">\n                    <label>時間窓</label>\n                    <md-tooltip>時間窓の設定</md-tooltip>\n                    <md-select ng-model=\"search.window\" ng-required=\"true\" ng-disabled=\"isEnableGpio()\"\n                        aria-label=\"window\">\n                        <md-option ng-repeat=\"n in [0, 1, 5, 10, 20, 30, 60, 120, 180, 300, 600]\" ng-value=\"n\">\n                            {{ n == 0 ? '生値' : (60 <= n ? n / 60 + '分' : n + '秒' ) }} </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <md-input-container class=\"d-block mt-0\">\n                    <label>集計</label>\n                    <md-tooltip>時間窓毎の集計方法</md-tooltip>\n                    <md-select ng-model=\"search.aggregate\" ng-required=\"true\" ng-disabled=\"!isEnableAggregate()\"\n                        aria-label=\"aggregate\">\n                        <md-option value=\"mean\">平均</md-option>\n                        <md-option value=\"median\">中央</md-option>\n                        <md-option value=\"min\">最小</md-option>\n                        <md-option value=\"max\">最大</md-option>\n                        <md-option value=\"first\">最初</md-option>\n                        <md-option value=\"last\">最後</md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template log-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"showChart()\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"show_chart\"></ui-icon>\n                                <md-tooltip>グラフを表示します</md-tooltip>\n                                CHART\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template log-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('xlsx')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                XLSX\n                                <md-tooltip>データをダウンロードします</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template log-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('csv')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                CSV\n                                <md-tooltip>データをダウンロードします</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"log-chart\" id=\"sensor-log\"></div>\n    </div>\n    <div class=\"tab-pane fade\" id=\"nav-count\">\n        <div class=\"row m-2\">\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">開始日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.start\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">終了日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.end\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\">センサー</label>\n                    <md-select ng-model=\"search.sensorType\" ng-required=\"true\" aria-label=\"sensor\">\n                        <md-option ng-value=\"type.sensorType\" ng-repeat=\"type in sensorTypes | filter: { sensorType: '!' + 258 }  | filter: { sensorType: '!' + 296 }\">\n                            {{ type.sensorTypeName }}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-6\">\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template count-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"showChart()\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"show_chart\"></ui-icon>\n                                <md-tooltip>グラフを表示します。</md-tooltip>\n                                CHART\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template count-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('xlsx')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                XLSX\n                                <md-tooltip>データをダウンロードします。</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template count-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('csv')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                CSV\n                                <md-tooltip>データをダウンロードします。</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"count-chart\" id=\"count-log\"></div>\n    </div>\n    <div class=\"tab-pane fade\" id=\"nav-spectrogram\">\n        <div class=\"row m-2\">\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">開始日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.start\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label class=\"md-required\" style=\"left: 40px\">終了日</label>\n                    <md-datepicker class=\"nr-dashboard-date-picker\" ng-model=\"search.end\" ng-required=\"true\">\n                    </md-datepicker>\n                </md-input-container>\n            </div>\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label>時間窓</label>\n                    <md-tooltip>時間窓の設定</md-tooltip>\n                    <md-select ng-model=\"search.window\" ng-required=\"true\" ng-disabled=\"isEnableGpio()\"\n                        aria-label=\"window\">\n                        <md-option ng-repeat=\"n in [0, 1, 5, 10, 20, 30, 60, 120, 180, 300, 600]\" ng-value=\"n\">\n                            {{ n == 0 ? '生値' : (60 <= n ? n / 60 + '分' : n + '秒' ) }} </md-option>\n                    </md-select>\n                </md-input-container>\n            </div>\n            <div class=\"col-2\">\n                <md-input-container class=\"d-block\">\n                    <label for=\"cmax\">最大値</label>\n                    <md-tooltip>パワースペクトル密度の最大値</md-tooltip>\n                    <input id=\"cmax\" ng-model=\"search.cmax\" value=\"0.5\" ng-required=\"true\" type=\"number\" aria-label=\"cmax\" min=\"0.01\" max=\"8\" step=\"0.01\">\n                </md-input-container>\n            </div>\n            <div class=\"col-4\">\n                <div class=\"row\">\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template spectrogram-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"showChart()\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"show_chart\"></ui-icon>\n                                <md-tooltip>グラフを表示します。</md-tooltip>\n                                CHART\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template spectrogram-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('xlsx')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                XLSX\n                                <md-tooltip>データをダウンロードします。</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                    <div class=\"col-4\">\n                        <md-input-container>\n                            <md-button class=\"md-raised btn-template spectrogram-chart-button\" ng-disabled=\"disabled\"\n                                ng-click=\"downloadFile('csv')\" aria-label=\"search\">\n                                <ui-icon class=\"white-icon\" icon=\"file_download\"></ui-icon>\n                                CSV\n                                <md-tooltip>データをダウンロードします。</md-tooltip>\n                            </md-button>\n                        </md-input-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"spectrogram-chart\" id=\"spectrogram-log\"></div>\n    </div>\n</div>\n\n<script>\n    (function(scope) {\n        scope.search = {\n            start: new Date(),\n            end: new Date(),\n            sensorType: 289,\n            window: 10,\n            aggregate: 'mean',\n            cmax: 0.5\n        };\n        scope.disabled = false;\n        scope.flag = false;\n        scope.tab = 'sensor';\n        scope.sensorTypes = [];\n        const sensorLogChart = new LogChart('sensor-log');\n        const countLogChart = new CountLogChart('count-log');\n        const spectrogramLogChart = new SpectrogramLogChart('spectrogram-log');\n        scope.$watch('msg', (msg) => {\n            if (msg == null || msg.topic == null) {\n                return;\n            }\n            switch (msg.topic[0]) {\n                case 'init':\n                    scope.sensorTypes = Object.values(msg.payload)\n                        .map(s => (s.sensorType <= 264 || 70000 <= s.sensorType) ? s : {...s, sensorTypeName: `${s.sensorTypeName} (JIG)`});\n                    sensorLogChart.clear();\n                    countLogChart.clear();\n                    spectrogramLogChart.clear();\n                    break;\n                case 'xlsx':\n                    if (!scope.flag) {\n                        return;\n                    }\n                    execDownload(msg, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx');\n                    scope.flag = false;\n                    break;\n                case 'csv':\n                    if (!scope.flag) {\n                        return;\n                    }\n                    execDownload(msg, 'text/csv', 'csv');\n                    scope.flag = false;\n                    break;\n                default:\n                    if (msg.topic[1] === 'sensor') {\n                        sensorLogChart.init(msg.payload, msg.search);\n                    } else if (msg.topic[1] === 'count') {\n                        countLogChart.init(msg.payload, msg.search);\n                    } else {\n                        spectrogramLogChart.init(msg.payload, msg.search);\n                    }\n                    break;\n            }\n            scope.disabled = false;\n        });\n        scope.showChart = function() {\n            scope.disabled = true;\n            scope.send({\n                topic: [scope.search.sensorType, scope.tab],\n                search: scope.search\n            });\n        };\n        scope.downloadFile = function(ext) {\n            scope.disabled = true;\n            scope.flag = true;\n            scope.send({\n                topic: [ext, scope.tab],\n                search: scope.search\n            });\n        };\n        scope.isEnableGpio = function() {\n            const contacts = [257, 258, 294, 296];\n            return contacts.includes(scope.search.sensorType);\n        };\n        scope.isEnableAggregate = function() {\n            return scope.search.window != 0 && !scope.isEnableGpio();\n        };\n        scope.changeTab = function(tab) {\n            scope.tab = tab;\n            if (tab === 'count') {\n                if (scope.search.sensorType == 258 || scope.search.sensorType == 296) {\n                    scope.search.sensorType = 289;\n                }\n            }\n        };\n\n        function execDownload(msg, type, extension) {\n            const sensorTypeText = msg.topic[1] === 'spectrogram' ? 'スペクトログラム' : msg.search.sensorTypeName;\n            const buffer = msg.payload;\n            const a = document.createElement('a');\n            a.href = URL.createObjectURL(new Blob([msg.payload], {\n                type\n            }));\n            const fmt = 'YYYYMMDD'\n            const start = moment(msg.search.start).format(fmt);\n            const end = moment(msg.search.end).add(-1, 'days').format(fmt);\n            a.download = start === end ? `${sensorTypeText} ${start}.${extension}` : `${sensorTypeText} ${start}-${end}.${extension}`;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "65bf4ad843e33b0a"
            ]
        ]
    },
    {
        "id": "76c5ed34e8e43b74",
        "type": "influxdb in",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "ログを取得",
        "query": "",
        "rawOutput": false,
        "precision": "ms",
        "retentionPolicy": "",
        "org": "fitc",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "adb45bac41acaedb"
            ]
        ]
    },
    {
        "id": "dc601e38209d6102",
        "type": "template",
        "z": "ce55e77ffc367d5a",
        "name": "Query",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket:\"iotkit\")\n    |> range(start: {{search.start}}, stop: {{search.end}})\n    |> filter(fn: (r) => r._measurement == \"{{search.measurement}}\")\n    {{#search.window}}\n    |> window(every: {{search.window}}s)\n    |> {{search.aggregate}}()\n    {{/search.window}}\n    |> group(columns: [\"tag\"])\n    {{#search.window}}\n    |> sort(columns: [\"_start\", \"_field\"])\n    {{/search.window}}\n    {{^search.window}}\n    |> sort(columns: [\"_time\", \"_field\"])\n    {{/search.window}}\n",
        "output": "str",
        "x": 510,
        "y": 540,
        "wires": [
            [
                "76c5ed34e8e43b74"
            ]
        ]
    },
    {
        "id": "65bf4ad843e33b0a",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nif (sensorTypes[msg.search.sensorType] == null) {\n    return;\n}\n\nconst start = moment(msg.search.start);\nconst end = moment(msg.search.end);\nstart.set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n});\nend.set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n});\nend.add(1, 'days');\nmsg.search.start = start.toISOString();\nmsg.search.end = end.toISOString();\nif (msg.topic[1] === 'spectrogram') {\n    msg.search = {\n        ...msg.search,\n        ...sensorTypes[262]\n    };\n} else {\n    msg.search = {\n        ...msg.search,\n        ...sensorTypes[msg.search.sensorType]\n    };\n}\nconst contacts = [257, 258, 294, 296];\nif (contacts.includes(msg.search.sensorType)) {\n    msg.search.window = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 710,
        "y": 420,
        "wires": [
            [
                "e08276216a725956"
            ]
        ]
    },
    {
        "id": "88a66c6212b08db5",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const limit = Math.max(msg.search.window * 4000, 60000);\nconst contacts = [257, 258, 294, 295, 296];\nmsg.payload = msg.payload.reduce((acc, v) => {\n    const channelLength = msg.search.channels.length;\n    const key = channelLength === 1 ? v.tag : `${v.tag}-${v._field}`;\n    const vTime = msg.search.window ? v._start : v._time;\n    if (acc[key]) {\n        if (!contacts.includes(msg.search.sensorType)) {\n            const lastData = acc[key].values.slice(-1)[0];\n            const lastTime = lastData.time;\n            const diffTime = moment(vTime) - moment(lastTime);\n            if (diffTime >= limit) {\n                acc[key].values.push({\n                    time: moment(lastTime).add(diffTime / 2.0, 'ms'),\n                    value: null\n                });\n            }\n        }\n        acc[key].values.push({\n            time: moment(vTime),\n            value: v._value\n        });\n    } else {\n        const channel = channelLength === 1 ? msg.search.channels[0] : msg.search.channels.find(c => c.channel === v._field);\n        acc[key] = {\n            channel: channel.channel,\n            name: channel?.channelName,\n            unit: channel?.unit,\n            values: [{\n                time: moment(vTime),\n                value: v._value\n            }]\n        };\n    }\n    return acc;\n}, {});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "a23830e1b4f94a6e",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "センサーログ",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 460,
        "wires": [
            [
                "f7c201f2184e8866"
            ],
            []
        ]
    },
    {
        "id": "8dd1a4fc97a8286a",
        "type": "catch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "scope": [
            "76c5ed34e8e43b74"
        ],
        "uncaught": false,
        "x": 150,
        "y": 420,
        "wires": [
            [
                "f7c201f2184e8866"
            ]
        ]
    },
    {
        "id": "adb45bac41acaedb",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "topic[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "csv",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xlsx",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "ee9e049d4d2ef5cf"
            ],
            [
                "7fe551c64522eb54"
            ],
            [
                "88a66c6212b08db5"
            ]
        ]
    },
    {
        "id": "7fe551c64522eb54",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "function createHeader(v) {\n    let header = v.tag;\n    if (msg.search.channels.length !== 1) {\n        header += `-${v._field}`;\n        const channel = msg.search.channels.find(c => c.channel === v._field);\n        if (channel && channel.unit) {\n            header += ` [${channel.unit}]`;\n        }\n    } else {\n        const channel = msg.search.channels[0];\n        if (channel && channel.unit) {\n            header += ` [${channel.unit}]`;\n        }\n    }\n    return header;\n}\n\nconst wb = xlsx.utils.book_new();\nconst data = msg.payload.reduce((acc, v) => {\n    const key = v.tag;\n    const header = createHeader(v);\n    const vTime = msg.search.window ? v._start : v._time;\n    const time = moment(vTime).format('YYYY-MM-DD HH:mm:ss.SSS');\n    if (acc[key]) {\n        const rows = acc[key];\n        if (rows[rows.length - 1][0].v === time) {\n            if (rows.length === 2) {\n                rows[0].push({ v: header, t: 's' });\n            }\n            rows[rows.length - 1].push({ v: v._value, t: 'n' });\n        } else {\n            rows.push([{ v: time, t: 'd', z: 'yyyy/m/d h:mm' }, { v: v._value, t: 'n' }]);\n        }\n    } else {\n        acc[key] = [\n            [null, { v: header, t: 's' }],\n            [{ v: time, t: 'd', z: 'yyyy/m/d h:mm' }, { v: v._value, t: 'n' }]\n        ];\n    }\n    return acc;\n}, {});\n\nconst sheetNames = {};\nfor (const [name, rows] of Object.entries(data)) {\n    const ws = xlsx.utils.aoa_to_sheet(rows);\n    const lower = name.toLowerCase();\n    if (sheetNames[lower]) {\n        const indexedName = `${name} (${sheetNames[lower]})`;\n        sheetNames[lower]++;\n        xlsx.utils.book_append_sheet(wb, ws, indexedName);\n    } else {\n        sheetNames[lower] = 1;\n        xlsx.utils.book_append_sheet(wb, ws, name);\n    }\n}\n\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n}\n\nmsg.payload = xlsx.writeXLSX(wb, { type: 'buffer' });\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "ee9e049d4d2ef5cf",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "function createHeader(v) {\n    let header = v.tag;\n    if (msg.search.channels.length !== 1) {\n        header += `-${v._field}`;\n        const channel = msg.search.channels.find(c => c.channel === v._field);\n        if (channel && channel.unit) {\n            header += ` [${channel.unit}]`;\n        }\n    } else {\n        const channel = msg.search.channels[0];\n        if (channel && channel.unit) {\n            header += ` [${channel.unit}]`;\n        }\n    }\n    return header;\n}\n\nconst wb = xlsx.utils.book_new();\nconst headers = new Set(['']);\nconst data = msg.payload.reduce((acc, v) => {\n    const header = createHeader(v);\n    const vTime = msg.search.window ? v._start : v._time;\n    const time = moment(vTime).format('YYYY-MM-DD HH:mm:ss.SSS');\n    headers.add(header);\n    if (acc[time]) {\n        const row = acc[time];\n        row[header] = v._value;\n    } else {\n        acc[time] = {\n            '': time,\n            [header]: v._value\n        };\n    }\n    return acc;\n}, {});\n\nmsg.sensor = msg.topic;\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n    msg.payload = Buffer.from([]);\n} else {\n    const ws = xlsx.utils.json_to_sheet(Object.keys(data).sort().map(key => data[key]), { header: Array.from(headers) });\n    xlsx.utils.book_append_sheet(wb, ws); \n    msg.payload = xlsx.write(wb, { type: 'buffer', bookType: 'csv' });\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 500,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "e20c08f2fd1af4b3",
        "type": "link out",
        "z": "ce55e77ffc367d5a",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "9999e1388160ef24"
        ],
        "x": 1195,
        "y": 660,
        "wires": []
    },
    {
        "id": "9999e1388160ef24",
        "type": "link in",
        "z": "ce55e77ffc367d5a",
        "name": "link in 11",
        "links": [
            "e20c08f2fd1af4b3"
        ],
        "x": 405,
        "y": 400,
        "wires": [
            [
                "a8e4c20144bffad5"
            ]
        ]
    },
    {
        "id": "4a5b75f382897c26",
        "type": "debug",
        "z": "ce55e77ffc367d5a",
        "name": "センサー値保存",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 100,
        "wires": []
    },
    {
        "id": "90baf2dc0f15616d",
        "type": "influxdb out",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "センサー値保存",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "fitc",
        "bucket": "iotkit",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "1b1a54a727648c3e",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "センサーデータ整形",
        "func": "msg.measurement = msg.payload.measurement;\nconst channelLength = msg.payload.channels.length;\nif (channelLength === 1 && msg.payload.values.length >= 1) {\n    msg.payload = [{\n        time: msg.payload.time,\n        value: (msg.payload.rawValues && msg.payload.rawValues[0]) || msg.payload.values[0]\n    }, {\n        tag: msg.payload.deviceName\n    }];\n    return msg;\n} else if (msg.payload.values.length >= channelLength) {\n    const valueObj = [...Array(channelLength)].reduce((acc, _, v) => {\n        acc[msg.payload.channels[v].channel] = (msg.payload.rawValues && msg.payload.rawValues[v]) || msg.payload.values[v];\n        return acc;\n    }, {});\n    msg.payload = [{\n        time: msg.payload.time,\n        ...valueObj\n    }, {\n        tag: msg.payload.deviceName\n    }];\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "4a5b75f382897c26",
                "90baf2dc0f15616d"
            ]
        ]
    },
    {
        "id": "004ac286dc4f5592",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "payload.isSaveData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "78c9df7a7c1a7f70"
            ]
        ]
    },
    {
        "id": "6055d803aeaa3b40",
        "type": "link in",
        "z": "ce55e77ffc367d5a",
        "name": "link in 8",
        "links": [
            "41a0aaec675b2f30"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            [
                "331ab85e3fcfd84f"
            ]
        ]
    },
    {
        "id": "331ab85e3fcfd84f",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "payload.isCountUpdated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 180,
        "wires": [
            [
                "505364bd3b570402"
            ]
        ]
    },
    {
        "id": "2f9ad470b88f0d1f",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "カウントデータ整形",
        "func": "msg.measurement = `${msg.payload.measurement}_count`;\nif (msg.payload.channel) {\n    msg.payload = [{\n        time: msg.payload.time,\n        [msg.payload.channel]: msg.payload.count\n    }, {\n        tag: msg.payload.deviceName\n    }];\n} else {\n    msg.payload = [{\n        time: msg.payload.time,\n        count: msg.payload.count\n    }, {\n        tag: msg.payload.deviceName\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "013dfa0630868dd1",
                "44b110b0307ede83"
            ]
        ]
    },
    {
        "id": "013dfa0630868dd1",
        "type": "debug",
        "z": "ce55e77ffc367d5a",
        "name": "カウント値保存",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 200,
        "wires": []
    },
    {
        "id": "44b110b0307ede83",
        "type": "influxdb out",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "カウント値保存",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "fitc",
        "bucket": "iotkit",
        "x": 900,
        "y": 160,
        "wires": []
    },
    {
        "id": "f7c201f2184e8866",
        "type": "change",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "[\"init\"]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sensorTypes",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 440,
        "wires": [
            [
                "a8e4c20144bffad5"
            ]
        ]
    },
    {
        "id": "51ec08a816b1d784",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "topic[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "count",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spectrogram",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "dc601e38209d6102"
            ],
            [
                "56916456582de606"
            ],
            [
                "fc9eb124f1439b62"
            ]
        ]
    },
    {
        "id": "56916456582de606",
        "type": "template",
        "z": "ce55e77ffc367d5a",
        "name": "Query",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket:\"iotkit\")\n    |> range(start: {{search.start}}, stop: {{search.end}})\n    |> filter(fn: (r) => r._measurement == \"{{search.measurement}}_count\")\n    |> group(columns: [\"tag\"])\n    |> sort(columns: [\"_time\", \"_field\"])\n",
        "output": "str",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "22f053a29d62a66b"
            ]
        ]
    },
    {
        "id": "8d568523a7cfd462",
        "type": "link in",
        "z": "ce55e77ffc367d5a",
        "name": "Spectrogram",
        "links": [
            "a6024f11a05b7075"
        ],
        "x": 155,
        "y": 280,
        "wires": [
            [
                "040371804ab86aa1"
            ]
        ]
    },
    {
        "id": "040371804ab86aa1",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "payload.isSaveData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "65171f3996997d13"
            ]
        ]
    },
    {
        "id": "dd277c70d50a9c6d",
        "type": "debug",
        "z": "ce55e77ffc367d5a",
        "name": "スペクトログラム保存",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 300,
        "wires": []
    },
    {
        "id": "7baeb78e37b6901a",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "スペクトログラム整形",
        "func": "msg.measurement = msg.payload.tag;\n\n// 周波数とそのパワーでペアを作成\nconst mapped = msg.payload.values.map((x, i) => ({\n    freq: i,\n    power: x\n}));;\n\n// 極大値を取得する\nconst peaks = [];\nfor (let i = 0; i < mapped.length; i++) {\n    const prev = mapped[i - 1];\n    const current = mapped[i];\n    const next = mapped[i + 1];\n    if (prev === undefined) {\n        if (current.power > next.power) {\n            peaks.push(current);\n        }\n    } else if (next === undefined) {\n        if (prev.power < current.power) {\n            peaks.push(current);\n        }\n    } else {\n        if (prev.power < current.power && current.power > next.power) {\n            peaks.push(current);\n        }\n    }\n}\n\n// 極大値を降順にソートする\nconst sorted = peaks.sort((a, b) => b.power - a.power);\n\n// 時刻、合計パワー、極値のパワーのランキングを整理\nconst input = {\n    time: msg.payload.time,\n    sumpower: msg.payload.sumpower\n};\nfor (let i = 0; i < 5; i++) {\n    if (sorted[i]) {\n        input[`freq_${i}`] = sorted[i].freq;\n        input[`power_${i}`] = sorted[i].power;\n    }\n}\n\nmsg.payload = [input, {\n    tag: msg.payload.deviceName\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "dd277c70d50a9c6d",
                "d8639ff7794366bd"
            ]
        ]
    },
    {
        "id": "d8639ff7794366bd",
        "type": "influxdb out",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "スペクトログラム保存",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "fitc",
        "bucket": "iotkit",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "fc9eb124f1439b62",
        "type": "template",
        "z": "ce55e77ffc367d5a",
        "name": "Query",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket:\"iotkit\")\n    |> range(start: {{search.start}}, stop: {{search.end}})\n    |> filter(fn: (r) => r._measurement == \"spectrogram\")\n    {{#search.window}}\n    |> window(every: {{search.window}}s)\n    |> last()\n    {{/search.window}}\n    |> group(columns: [\"tag\", \"\"])\n    {{#search.window}}\n    |> sort(columns: [\"_start\", \"_field\"])\n    {{/search.window}}\n    {{^search.window}}\n    |> sort(columns: [\"_time\", \"_field\"])\n    {{/search.window}}",
        "output": "str",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "b68e974fda96ac66"
            ]
        ]
    },
    {
        "id": "b68e974fda96ac66",
        "type": "influxdb in",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "ログを取得",
        "query": "",
        "rawOutput": false,
        "precision": "ms",
        "retentionPolicy": "",
        "org": "fitc",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "1917efdd1f21f31a"
            ]
        ]
    },
    {
        "id": "65596b81cbee3740",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const limit = Math.max(msg.search.window * 4000, 60000);\n\nmsg.payload = msg.payload.reduce((acc, v) => {\n    const key = v.tag;\n    const vTime = msg.search.window ? v._start : v._time;\n    if (acc[key]) {\n        if (acc[key][vTime] == null) {\n            acc[key][vTime] = {\n                time: moment(vTime),\n                powers: [],\n                freqs: []\n            };\n        }\n    } else {\n        acc[key] = {\n            [vTime]: {\n                time: moment(vTime),\n                powers: [],\n                freqs: []\n            }\n        };\n    }\n\n    if (v._field === 'sumpower') {\n        acc[key][vTime].sumpower = v._value;\n    } else {\n        const [param, rank] = v._field.split('_');\n        if (param === 'freq') {\n            acc[key][vTime].freqs.push(v._value);\n        } else if (param === 'power') {\n            acc[key][vTime].powers.push(v._value);\n        }\n    }\n    return acc;\n}, {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 820,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "22f053a29d62a66b",
        "type": "influxdb in",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "ログを取得",
        "query": "",
        "rawOutput": false,
        "precision": "ms",
        "retentionPolicy": "",
        "org": "fitc",
        "x": 690,
        "y": 660,
        "wires": [
            [
                "368bd99245a776ba"
            ]
        ]
    },
    {
        "id": "9a3e74b5e15e6c39",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "msg.payload = msg.payload.reduce((acc, v) => {\n    const key = msg.search.channels.length === 1 ? v.tag : `${v.tag}-${v._field}`;\n    if (acc[key]) {\n        const lastData = acc[key].slice(-1)[0];\n        const lastTime = lastData.time;\n        const diffTime = moment(v._time) - moment(lastTime);\n        if (lastData.value > v._value) {\n            acc[key].push({\n                time: moment(lastTime).add(diffTime / 2.0, 'ms'),\n                value: null\n            });\n        }\n        acc[key].push({\n            time: moment(v._time),\n            value: v._value\n        });\n    } else {\n        acc[key] = [{\n            time: moment(v._time),\n            value: v._value\n        }];\n    }\n    return acc;\n}, {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "853e1317002da1b5",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "function createHeader(v) {\n    let header = v.tag;\n    if (msg.search.channels.length !== 1) {\n        header += `-${v._field}`;\n    }\n    return header;\n}\n\nconst wb = xlsx.utils.book_new();\nconst data = msg.payload.reduce((acc, v) => {\n    const key = v.tag;\n    const header = createHeader(v);\n    const vTime = msg.search.window ? v._start : v._time;\n    const time = moment(vTime).format('YYYY-MM-DD HH:mm:ss.SSS');\n    if (acc[key]) {\n        const rows = acc[key];\n        if (rows[rows.length - 1][0].v === time) {\n            if (rows.length === 2) {\n                rows[0].push({ v: header, t: 's' });\n            }\n            rows[rows.length - 1].push({ v: v._value, t: 'n' });\n        } else {\n            rows.push([{ v: time, t: 'd' }, { v: v._value, t: 'n' }]);\n        }\n    } else {\n        acc[key] = [\n            [null, { v: header, t: 's' }],\n            [{ v: time, t: 'd' }, { v: v._value, t: 'n' }]\n        ];\n    }\n    return acc;\n}, {});\n\nconst sheetNames = {};\nfor (const [name, rows] of Object.entries(data)) {\n    const ws = xlsx.utils.aoa_to_sheet(rows);\n    const lower = name.toLowerCase();\n    if (sheetNames[lower]) {\n        const indexedName = `${name} (${sheetNames[lower]})`;\n        sheetNames[lower]++;\n        xlsx.utils.book_append_sheet(wb, ws, indexedName);\n    } else {\n        sheetNames[lower] = 1;\n        xlsx.utils.book_append_sheet(wb, ws, name);\n    }\n}\n\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n}\n\nmsg.payload = xlsx.writeXLSX(wb, { type: 'buffer' });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 660,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "e78222e9d351b6b1",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "function createHeader(v) {\n    let header = v.tag;\n    if (msg.search.channels.length !== 1) {\n        header += `-${v._field}`;\n    }\n    return header;\n}\n\nconst wb = xlsx.utils.book_new();\nconst headers = new Set(['']);\nconst data = msg.payload.reduce((acc, v) => {\n    const header = createHeader(v);\n    const time = moment(v._time).format('YYYY-MM-DD HH:mm:ss.SSS');\n    headers.add(header);\n    if (acc[time]) {\n        const row = acc[time];\n        row[header] = v._value;\n    } else {\n        acc[time] = {\n            '': time,\n            [header]: v._value\n        };\n    }\n    return acc;\n}, {});\n\nmsg.sensor = msg.topic;\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n    msg.payload = Buffer.from([]);\n} else {\n    const ws = xlsx.utils.json_to_sheet(Object.values(data), { header: Array.from(headers) });\n    xlsx.utils.book_append_sheet(wb, ws); \n    msg.payload = xlsx.write(wb, { type: 'buffer', bookType: 'csv' });\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 620,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "368bd99245a776ba",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "topic[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "csv",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xlsx",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "e78222e9d351b6b1"
            ],
            [
                "853e1317002da1b5"
            ],
            [
                "9a3e74b5e15e6c39"
            ]
        ]
    },
    {
        "id": "2927ebc5fa98162d",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "payload.isCountUpdated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "null"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "1b1a54a727648c3e"
            ],
            [
                "1b1a54a727648c3e"
            ],
            [
                "1b1a54a727648c3e"
            ]
        ]
    },
    {
        "id": "1917efdd1f21f31a",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "property": "topic[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "csv",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xlsx",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 780,
        "wires": [
            [
                "4996c233777b253a"
            ],
            [
                "a04a09dfe87e32d0"
            ],
            [
                "65596b81cbee3740"
            ]
        ]
    },
    {
        "id": "a04a09dfe87e32d0",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const wb = xlsx.utils.book_new();\nconst headers = {};\nconst data = msg.payload.reduce((acc, v) => {\n    const key = v.tag;\n    const vTime = msg.search.window ? v._start : v._time;\n    const time = moment(vTime).format('YYYY-MM-DD HH:mm:ss.SSS');\n    const [param, _] = v._field.split('_');\n    if (acc[key]) {\n        const rows = acc[key];\n        if (param === 'freq') {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1].freqs.push(v._value);\n            } else {\n                rows.push({ time, freqs: [v._value], powers: [] });\n            }\n            headers[key].add(v._value);\n        } else if (param === 'power') {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1].powers.push(v._value);\n            }\n        } else {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1][param] = v._value;\n            }\n        }\n    } else {\n        if (param === 'freq') {\n            acc[key] = [\n                { time, freqs: [v._value], powers: [] }\n            ];\n            headers[key] = new Set([v._value]);\n        }\n    }\n    return acc;\n}, {});\n\nconst sheetNames = {};\nfor (const [name, obj] of Object.entries(data)) {\n\n    const header = Array.from(headers[name]);\n    header.sort((a, b) => a - b);\n\n    const rows = obj\n        .map(x => ({\n            time: x.time,\n            sumpower: x.sumpower,\n            ...x.freqs.reduce((acc, f, i) => {\n                acc[f] = x.powers[i];\n                return acc;\n            }, {})\n        }))\n        .map(x => {\n            const row = header.map(h => x[h] ? { v: x[h], t: 'n' } : null);\n            row.unshift({ v: x.time, t: 'd' });\n            row.push({ v: x.sumpower, t: 'n' });\n            return row;\n        });\n\n    rows.unshift([{ v: '', t: 's' }, ...header.map(x => `${x} [Hz]`), { v: 'sumpower', t: 's' }]);\n\n    const ws = xlsx.utils.aoa_to_sheet(rows);\n    const lower = name.toLowerCase();\n    if (sheetNames[lower]) {\n        const indexedName = `${name} (${sheetNames[lower]})`;\n        sheetNames[lower]++;\n        xlsx.utils.book_append_sheet(wb, ws, indexedName);\n    } else {\n        sheetNames[lower] = 1;\n        xlsx.utils.book_append_sheet(wb, ws, name);\n    }\n}\n\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n}\n\nmsg.payload = xlsx.writeXLSX(wb, { type: 'buffer' });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 780,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "4996c233777b253a",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const wb = xlsx.utils.book_new();\nconst headers = {};\nconst data = msg.payload.reduce((acc, v) => {\n    const key = v.tag;\n    const vTime = msg.search.window ? v._start : v._time;\n    const time = moment(vTime).format('YYYY-MM-DD HH:mm:ss.SSS');\n    const [param, _] = v._field.split('_');\n    if (acc[key]) {\n        const rows = acc[key];\n        if (param === 'freq') {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1].freqs.push(v._value);\n            } else {\n                rows.push({ time, freqs: [v._value], powers: [] });\n            }\n            headers[key].add(v._value);\n        } else if (param === 'power') {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1].powers.push(v._value);\n            }\n        } else {\n            if (rows[rows.length - 1].time === time) {\n                rows[rows.length - 1][param] = v._value;\n            }\n        }\n    } else {\n        if (param === 'freq') {\n            acc[key] = [\n                { time, freqs: [v._value], powers: [] }\n            ];\n            headers[key] = new Set([v._value]);\n        }\n    }\n    return acc;\n}, {});\n\nif (Object.keys(data).length === 0) {\n    const ws = xlsx.utils.json_to_sheet([]);\n    xlsx.utils.book_append_sheet(wb, ws);\n    msg.payload = Buffer.from([]);\n    return msg;\n}\n\nconst csvJson = {};\nfor (const [name, obj] of Object.entries(data)) {\n    const header = Array.from(headers[name]);\n    header.sort((a, b) => a - b);\n\n    const rows = obj\n        .reduce((a, v) => {\n            a[v.time] = {\n                '': v.time,\n                [`${name}-sumpower`]: v.sumpower,\n                ...v.freqs.reduce((acc, f, i) => {\n                    acc[`${name}-${f} [Hz]`] = v.powers[i];\n                    return acc;\n                }, {})\n            };\n            return a;\n        }, {});\n\n    for (const [t, v] of Object.entries(rows)) {\n        if (csvJson[t]) {\n            Object.assign(csvJson[t], v);\n        } else {\n            csvJson[t] = v;\n        }\n    }\n\n    headers[name] = [...header.map(h => `${name}-${h} [Hz]`), `${name}-sumpower`];\n}\n\n\nconst ws = xlsx.utils.json_to_sheet(Object.values(csvJson), { header: ['', ...Object.values(headers).flat()] });\nxlsx.utils.book_append_sheet(wb, ws);\nmsg.payload = xlsx.write(wb, { type: 'buffer', bookType: 'csv' });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx-js-style"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1030,
        "y": 740,
        "wires": [
            [
                "e20c08f2fd1af4b3"
            ]
        ]
    },
    {
        "id": "78c9df7a7c1a7f70",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "空き容量確認",
        "property": "freeSpace",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "2927ebc5fa98162d"
            ]
        ]
    },
    {
        "id": "505364bd3b570402",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "空き容量確認",
        "property": "freeSpace",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "2f9ad470b88f0d1f"
            ]
        ]
    },
    {
        "id": "65171f3996997d13",
        "type": "switch",
        "z": "ce55e77ffc367d5a",
        "name": "空き容量確認",
        "property": "freeSpace",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "7baeb78e37b6901a"
            ]
        ]
    },
    {
        "id": "65045a83773677ab",
        "type": "http in",
        "z": "ce55e77ffc367d5a",
        "name": "センサーログ取得",
        "url": "/api/v2/device/sensor/log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "ee0cea4501eb4734"
            ]
        ]
    },
    {
        "id": "acd5d39abce8455c",
        "type": "http response",
        "z": "ce55e77ffc367d5a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1040,
        "wires": []
    },
    {
        "id": "196c82881d9249c4",
        "type": "template",
        "z": "ce55e77ffc367d5a",
        "name": "Query",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket:\"iotkit\")\n    |> range(start: {{search.start}}, stop: {{search.end}})\n    |> filter(fn: (r) => r._measurement == \"{{search.measurement}}\")\n    {{#search.window}}\n    |> window(every: {{search.window}}s)\n    |> {{search.aggregate}}()\n    {{/search.window}}\n    |> group(columns: [\"tag\"])\n    |> sort(columns: [\"_time\", \"_start\", \"_field\"])\n",
        "output": "str",
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "947d89d2ea8e2781"
            ]
        ]
    },
    {
        "id": "ee0cea4501eb4734",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "検証",
        "func": "const functions = global.get('functions');\n\n// センサー種別チェック\nmsg.search = { ...msg.payload };\ndelete msg.payload;\nif (!functions.isInteger(msg.search.sensorType)) {\n    msg.payload = { sensorType: 'Invalid sensor type specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nconst sensorType = Number(msg.search.sensorType);\nmsg.search.sensorType = sensorType;\n\n// 日付チェック\nconst date = moment(msg.search.date, 'YYYY-MM-DD');\nif (!date.isValid()) {\n    msg.payload = { date: 'Invalid date format.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nmsg.search.start = date.format('YYYY-MM-DD');\nmsg.search.end = date.clone().add(1, 'days').format('YYYY-MM-DD');\n\n// テーブル一覧\nconst sensorTypes = global.get('sensorTypes') || {};\nif (sensorTypes[msg.search.sensorType] == null) {\n    msg.payload = { sensorType: 'Invalid sensor type specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nmsg.search.measurement = sensorTypes[sensorType].measurement;\n\n// 接点入力・接点出力はチェック終了\nif (sensorType === 257 || sensorType === 258) {\n    return [msg, null];\n}\n\n// 時間窓がない場合はチェック終了\nif (msg.search.window == null) {\n    return [msg, null];\n}\n\n// 時間窓一覧\nconst windows = [1, 5, 10, 20, 30, 60, 120, 180, 300, 600];\n\n// 時間窓チェック\nif (!functions.isInteger(msg.search.window)) {\n    msg.payload = { window: 'Invalid window specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\nconst window = Number(msg.search.window);\n// 時間窓数値チェック\nif (!windows.includes(window)) {\n    msg.statusCode = 400;\n    return [null, msg];\n}\nmsg.search.window = window;\n\n// 集計一覧\nconst aggregates = ['mean', 'median', 'min', 'max', 'first', 'last'];\nif (!aggregates.includes(msg.search.aggregate)) {\n    msg.payload = { aggregate: 'Invalid aggregate specified.' };\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "196c82881d9249c4"
            ],
            [
                "acd5d39abce8455c"
            ]
        ]
    },
    {
        "id": "48d3399f1f6f89c9",
        "type": "function",
        "z": "ce55e77ffc367d5a",
        "name": "整形",
        "func": "const sensorTypes = global.get('sensorTypes');\nconst channels = sensorTypes[msg.search.sensorType].channels;\nconst channelLength = channels.length;\nconst payload = msg.payload.reduce((acc, v) => {\n    const key = channelLength === 1 ? v.tag : `${v.tag}-${v._field}`;\n    const channel = channelLength === 1 ? channels[0] : channels.find(c => c.channel === v._field);        \n    const vTime = v._time || v._start;\n    if (acc[key]) {\n        acc[key].values.push({\n            time: moment(vTime),\n            value: v._value\n        });\n    } else {\n        acc[key] = {\n            name: key,\n            unit: channel?.unit || '',\n            values: [{\n                time: moment(vTime),\n                value: v._value\n            }]\n        };\n    }\n    return acc;\n}, {});\nmsg.payload = Object.values(payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "acd5d39abce8455c"
            ]
        ]
    },
    {
        "id": "947d89d2ea8e2781",
        "type": "influxdb in",
        "z": "ce55e77ffc367d5a",
        "influxdb": "e205ca414e18713a",
        "name": "ログを取得",
        "query": "",
        "rawOutput": false,
        "precision": "ms",
        "retentionPolicy": "",
        "org": "fitc",
        "x": 710,
        "y": 1000,
        "wires": [
            [
                "48d3399f1f6f89c9"
            ]
        ]
    },
    {
        "id": "b0ae4914897ac4b9",
        "type": "ui_template",
        "z": "8b336f5f9ef68ac3",
        "group": "23e1126896b538a5",
        "name": "登録済デバイステーブル",
        "order": 3,
        "width": "20",
        "height": "13",
        "format": "<div class=\"row ms-1 me-1\">\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestSleep()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"pause\"></ui-icon>\n            省電力\n        </md-button>\n    </div>\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestResume()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"play_arrow\"></ui-icon>\n            省電力解除\n        </md-button>\n    </div>\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestStatus()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"sync\"></ui-icon>\n            設定取得\n        </md-button>\n    </div>\n</div>\n<div class=\"m-2\">\n    <table class=\"table align-middle\">\n        <tr>\n            <th class=\"w-1\" ng-class=\"busy ? 'opacity-50' : ''\">\n                <ui-icon ng-if=\"checked && some\" class=\"thema-icon\" icon=\"check_box\" ng-click=\"toggleAllCheckBox()\">\n                </ui-icon>\n                <ui-icon ng-if=\"!checked && !some\" class=\"thema-icon\" icon=\"check_box_outline_blank\"\n                    ng-click=\"toggleAllCheckBox()\"></ui-icon>\n                <ui-icon ng-if=\"!checked && some\" class=\"thema-icon\" icon=\"indeterminate_check_box\"\n                    ng-click=\"toggleAllCheckBox()\"></ui-icon>\n            </th>\n            <th>センサー種別</th>\n            <th>デバイス名</th>\n            <th>Advertise間隔 [ms]</th>\n            <th>Uplink間隔 [sec]</th>\n            <th class=\"w-10\">状態</th>\n            <th class=\"w-1\"></th>\n        </tr>\n        <tr ng-repeat=\"device in devices | orderBy: 'sensorType'\">\n            <td ng-class=\"busy ? 'opacity-50' : ''\">\n                <ui-icon ng-if=\"device.checked\" class=\"thema-icon\" icon=\"check_box\"\n                    ng-click=\"toggleCheckBox(device.deviceNumber)\"></ui-icon>\n                <ui-icon ng-if=\"!device.checked\" class=\"thema-icon\" icon=\"check_box_outline_blank\"\n                    ng-click=\"toggleCheckBox(device.deviceNumber)\"></ui-icon>\n            </td>\n            <td>\n                {{device.sensorTypeText}}\n                <ui-icon class=\"thema-icon\" icon=\"bluetooth\"></ui-icon>\n            </td>\n            <td class=\"text-truncate w-max-0\">\n                {{device.deviceName}}\n                <md-tooltip>{{device.deviceName}}</md-tooltip>\n            </td>\n            <td>{{ device.advertise ? device.advertise : '--' }}</td>\n            <td>{{ device.uplink ? device.uplink : '--' }}</td>\n            <td>{{ device.status ? device.status : '--' }}</td>\n            <td>\n                <md-button class=\"btn-template\" ng-click=\"send({payload: device, outputs, topic: 'detail'})\"\n                    aria-label=\"detail\">\n                    <ui-icon icon=\"mi-forward\"></ui-icon>\n                </md-button>\n                <md-tooltip>BLEデバイス詳細画面に移動します</md-tooltip>\n            </td>\n        </tr>\n    </table>\n</div>\n<script>\n    (function(scope) {\n        scope.devices = [];\n        scope.busy = true;\n        scope.checked = true;\n        scope.some = true;\n        scope.disabled = true;\n        scope.$watch('msg.payload', (payload) => {\n            if (payload == null) {\n                return;\n            }\n            if (Array.isArray(payload)) {\n                const devices = payload.filter(x => x.accessType === 0);\n                devices.sort((a, b) => a.sensorType - b.sensorType);\n                devices.forEach(d => d.checked = true);\n                scope.checked = true;\n                scope.some = true;\n                scope.devices = devices;\n            } else if (typeof payload === 'object') {\n                const device = scope.devices.find(x => x.deviceNumber === payload.deviceNumber);\n                if (device) {\n                    Object.assign(device, payload);\n                }\n            }\n        });\n        scope.$watch('msg.busy', (busy) => {\n            if (busy != null) {\n                scope.busy = busy;\n                scope.disabled = scope.busy || !scope.devices?.some(d => d.checked);\n            }\n        });\n        scope.$watch('msg.sleep', (sleep) => {\n            if (sleep == null) {\n                return;\n            }\n            const device = scope.devices.find(d => d.deviceNumber === sleep.deviceNumber);\n            if (device) {\n                device.advertiseInterval = sleep.advertiseInterval;\n                device.uplinkInterval = sleep.uplinkInterval;\n            }\n        });\n\n        scope.requestSleep = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'sleep',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.requestResume = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'resume',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.requestStatus = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'status',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.toggleAllCheckBox = function() {\n            if (scope.busy) {\n                return;\n            }\n            scope.checked = !scope.checked;\n            scope.some = scope.checked;\n            scope.devices.forEach(d => d.checked = scope.checked);\n            scope.disabled = scope.busy || !scope.devices.some(d => d.checked);\n        };\n\n        scope.toggleCheckBox = function(deviceNumber) {\n            if (scope.busy) {\n                return;\n            }\n            const device = scope.devices.find(d => d.deviceNumber === deviceNumber);\n            if (device) {\n                device.checked = !device.checked;\n                scope.checked = scope.devices.every(d => d.checked);\n                scope.some = scope.devices.some(d => d.checked);\n                scope.disabled = scope.busy || !scope.some;\n            }\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 450,
        "y": 440,
        "wires": [
            [
                "84fbcb2b018a6789"
            ]
        ]
    },
    {
        "id": "1cedc082f9638703",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "All Device Request",
        "mode": "link",
        "links": [
            "e7ba768d9aaf0d9b"
        ],
        "x": 275,
        "y": 180,
        "wires": []
    },
    {
        "id": "f9f6f69435fdcacf",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "Bluetoothデバイス",
                "type": "str"
            }
        ],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "1cedc082f9638703",
                "c200e34920d833e1"
            ],
            []
        ]
    },
    {
        "id": "997c028051ceead1",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "links": [
            "71ed9cce9eab05ba",
            "be685ecda84a5cf9",
            "29e433e97e460dc7",
            "42de3f208720a10c",
            "4ecd682ecefc85ae",
            "fe9c0645a4b6e901",
            "ef06894d98bee941"
        ],
        "x": 75,
        "y": 440,
        "wires": [
            [
                "b9cb423160f6e2b7"
            ]
        ]
    },
    {
        "id": "158ad407cb24c7ef",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sleep",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "resume",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 810,
        "y": 560,
        "wires": [
            [
                "4b1b5f767f752957"
            ],
            [
                "39b5613f0cc29a43"
            ],
            [
                "3ef7300f6c6f993c"
            ]
        ]
    },
    {
        "id": "a8e13308536f89cb",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 17",
        "links": [
            "5462bf07939bddff"
        ],
        "x": 75,
        "y": 700,
        "wires": [
            [
                "482f630c9a2e6c0c"
            ]
        ]
    },
    {
        "id": "b9cb423160f6e2b7",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "msg",
                "to": "busy",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 440,
        "wires": [
            [
                "b0ae4914897ac4b9"
            ]
        ]
    },
    {
        "id": "39b5613f0cc29a43",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "b48b0dcd9204abb4"
        ],
        "x": 915,
        "y": 560,
        "wires": []
    },
    {
        "id": "482f630c9a2e6c0c",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "process",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "3f80ab597a4d4d2e",
                "dbb8d8eb297834e1"
            ]
        ]
    },
    {
        "id": "60c97b60b68a1ca1",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 760,
        "wires": [
            [
                "87431f8c25f6697d"
            ]
        ]
    },
    {
        "id": "f888826ad3651724",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "f901eec93520198a"
        ],
        "x": 775,
        "y": 760,
        "wires": []
    },
    {
        "id": "4ea72faf5eada293",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 700,
        "wires": [
            [
                "d3dd988291cd501d"
            ]
        ]
    },
    {
        "id": "dbb8d8eb297834e1",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "設定受信",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nfunction isSleep(payload) {\n    if (payload.sensorType === 257 || payload.sensorType === 258) {\n        return payload.advertise >= 1000;\n    } else {\n        return payload.advertise >= 1000 && payload.uplink === 86400;\n    }\n}\n\nif (devices[index] == null) {\n    return;\n}\n\nif (devices[index].deviceNumber === msg.payload.deviceNumber) {\n    flow.set('timeout', now);\n    flow.set('index', index + 1);\n    msg.payload.status = isSleep(msg.payload) ? '省電力' : '通常';\n    const nextDevice = devices[index + 1];\n    if (nextDevice) {\n        nextDevice.status = '通信中';\n        node.send([msg, null]);\n        return [{ payload: nextDevice }, { payload: nextDevice }];\n    } else {\n        delete msg.socketid;\n        flow.set('busy', false);\n        flow.set('process');\n        flow.set('index');\n        return [msg, null];\n    }\n}\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 340,
        "y": 720,
        "wires": [
            [
                "29e433e97e460dc7"
            ],
            [
                "87431f8c25f6697d"
            ]
        ]
    },
    {
        "id": "d3dd988291cd501d",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "通信タイムアウト",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nif (timeout === msg.timeout) {\n    flow.set('timeout', now);\n    flow.set('index', index + 1);\n    msg.payload.status = '通信失敗';\n    const nextDevice = devices[index + 1];\n    if (nextDevice) {\n        nextDevice.status = '通信中';\n        setTimeout(() => node.send([null, null, { payload: nextDevice }]), 2000);\n        node.send([msg, {}, null]);\n        return [{ payload: nextDevice }, null, null];\n    } else {\n        delete msg.socketid;\n        flow.set('busy', false);\n        flow.set('process');\n        flow.set('index');\n        return [msg, {}, null];\n    }\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 850,
        "y": 700,
        "wires": [
            [
                "be685ecda84a5cf9"
            ],
            [
                "a7b403b7e7b0660f"
            ],
            [
                "87431f8c25f6697d"
            ]
        ]
    },
    {
        "id": "be685ecda84a5cf9",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 1035,
        "y": 660,
        "wires": []
    },
    {
        "id": "3f80ab597a4d4d2e",
        "type": "debug",
        "z": "8b336f5f9ef68ac3",
        "name": "設定受信",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 680,
        "wires": []
    },
    {
        "id": "87431f8c25f6697d",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timeout",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timeout",
                "pt": "flow",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 760,
        "wires": [
            [
                "f888826ad3651724",
                "4ea72faf5eada293",
                "9b3d929adf31530c"
            ]
        ]
    },
    {
        "id": "dff16fc758e79479",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 20",
        "links": [
            "4b1b5f767f752957"
        ],
        "x": 75,
        "y": 760,
        "wires": [
            [
                "60c97b60b68a1ca1"
            ]
        ]
    },
    {
        "id": "4b1b5f767f752957",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "dff16fc758e79479"
        ],
        "x": 915,
        "y": 520,
        "wires": []
    },
    {
        "id": "29e433e97e460dc7",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 475,
        "y": 700,
        "wires": []
    },
    {
        "id": "9b3d929adf31530c",
        "type": "debug",
        "z": "8b336f5f9ef68ac3",
        "name": "設定リクエスト",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 760,
        "wires": []
    },
    {
        "id": "b48b0dcd9204abb4",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 26",
        "links": [
            "39b5613f0cc29a43"
        ],
        "x": 75,
        "y": 940,
        "wires": [
            [
                "015dc16a28b6cd34"
            ]
        ]
    },
    {
        "id": "015dc16a28b6cd34",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 940,
        "wires": [
            [
                "cd633f53f03bc002"
            ]
        ]
    },
    {
        "id": "cd633f53f03bc002",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timeout",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timeout",
                "pt": "flow",
                "to": "timeout",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "sleep",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 940,
        "wires": [
            [
                "836e3befc2c83766",
                "f338723299b487fa"
            ]
        ]
    },
    {
        "id": "836e3befc2c83766",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "f901eec93520198a"
        ],
        "x": 845,
        "y": 960,
        "wires": []
    },
    {
        "id": "f338723299b487fa",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 940,
        "wires": [
            [
                "925198982ec14201"
            ]
        ]
    },
    {
        "id": "925198982ec14201",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "通信タイムアウト",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nif (timeout === msg.timeout) {\n    flow.set('timeout', now);\n    flow.set('index', index + 1);\n    msg.payload.status = '通信失敗';\n    const nextDevice = devices[index + 1];\n    if (nextDevice) {\n        nextDevice.status = '通信中';\n        setTimeout(() => node.send([null, null, { payload: nextDevice }]), 2000);\n        node.send([msg, {}, null]);\n        return [{ payload: nextDevice }, null, null];\n    } else {\n        delete msg.socketid;\n        flow.set('busy', false);\n        flow.set('process');\n        flow.set('index');\n        return [msg, {}, null];\n    }\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 950,
        "y": 920,
        "wires": [
            [
                "4ecd682ecefc85ae"
            ],
            [
                "76ec862b25824cb1"
            ],
            [
                "cd633f53f03bc002"
            ]
        ]
    },
    {
        "id": "b58c1bd435fb6d0f",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 27",
        "links": [
            "5462bf07939bddff"
        ],
        "x": 75,
        "y": 880,
        "wires": [
            [
                "3b1a734c23e77d65"
            ]
        ]
    },
    {
        "id": "3b1a734c23e77d65",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "process",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "sleep",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 880,
        "wires": [
            [
                "62cec94a81060930"
            ]
        ]
    },
    {
        "id": "a7b403b7e7b0660f",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "9779a81a7923c617"
        ],
        "x": 1035,
        "y": 700,
        "wires": []
    },
    {
        "id": "76ec862b25824cb1",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "9779a81a7923c617"
        ],
        "x": 1115,
        "y": 920,
        "wires": []
    },
    {
        "id": "62cec94a81060930",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "設定受信",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nfunction isSleep(payload) {\n    if (payload.sensorType === 257 || payload.sensorType === 258) {\n        return payload.advertise >= 1000;\n    } else {\n        return payload.advertise >= 1000 && payload.uplink === 86400;\n    }\n}\n\nif (devices[index] == null) {\n    return;\n}\n\nif (devices[index].deviceNumber === msg.payload.deviceNumber) {\n    flow.set('timeout', now);\n    if (isSleep(msg.payload)) {\n        msg.payload.status = '省電力';\n        const sleep = flow.get('sleep');\n        if (sleep && sleep.deviceNumber === msg.payload.deviceNumber) {\n            node.send([null, { payload: { ...devices[index], ...sleep } }, null, null]);\n        }\n        flow.set('index', index + 1);\n        const nextDevice = devices[index + 1];\n        if (nextDevice) {\n            nextDevice.status = '通信中';\n            node.send([msg, null, null, null]);\n            return [{ payload: nextDevice }, null, { payload: nextDevice }, null];\n        } else {\n            delete msg.socketid;\n            flow.set('busy', false);\n            flow.set('process');\n            flow.set('index');\n            flow.set('sleep');\n            return [msg, null, null, null];\n        }\n    } else {\n        const payload = { ...devices[index], ...msg.payload };\n        return [{ payload }, null, { payload }, null];\n    }\n}\n\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 360,
        "y": 880,
        "wires": [
            [
                "42de3f208720a10c"
            ],
            [
                "3e43284f51d30d6d"
            ],
            [
                "64c00df609c36692"
            ],
            [
                "cd633f53f03bc002"
            ]
        ]
    },
    {
        "id": "42de3f208720a10c",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 34",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 495,
        "y": 820,
        "wires": []
    },
    {
        "id": "4ecd682ecefc85ae",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 1115,
        "y": 880,
        "wires": []
    },
    {
        "id": "64c00df609c36692",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timeout",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timeout",
                "pt": "flow",
                "to": "timeout",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "sleep",
                "pt": "flow",
                "to": "{\t   \"deviceId\": payload.deviceId,\t   \"deviceNumber\": payload.deviceNumber,\t   \"advertiseInterval\": payload.advertise,\t   \"uplinkInterval\": payload.uplink\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.advertise",
                "pt": "msg",
                "to": "1000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload.uplink",
                "pt": "msg",
                "to": "86400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 900,
        "wires": [
            [
                "b7f93746bb59eb58",
                "2ffdbd3ffaac2122"
            ]
        ]
    },
    {
        "id": "b7f93746bb59eb58",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "cef9259f21d87cd7"
        ],
        "x": 845,
        "y": 880,
        "wires": []
    },
    {
        "id": "3ef7300f6c6f993c",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "dbd5b444a0bb9a5e"
        ],
        "x": 915,
        "y": 600,
        "wires": []
    },
    {
        "id": "2ffdbd3ffaac2122",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "90",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 900,
        "wires": [
            [
                "925198982ec14201"
            ]
        ]
    },
    {
        "id": "7dc619d907256a24",
        "type": "comment",
        "z": "8b336f5f9ef68ac3",
        "name": "設定取得",
        "info": "",
        "x": 120,
        "y": 660,
        "wires": []
    },
    {
        "id": "9662b585264bcd62",
        "type": "comment",
        "z": "8b336f5f9ef68ac3",
        "name": "省電力",
        "info": "",
        "x": 110,
        "y": 840,
        "wires": []
    },
    {
        "id": "8bfc8b95476f7a4a",
        "type": "comment",
        "z": "8b336f5f9ef68ac3",
        "name": "省電力解除",
        "info": "",
        "x": 120,
        "y": 1060,
        "wires": []
    },
    {
        "id": "dbd5b444a0bb9a5e",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 28",
        "links": [
            "3ef7300f6c6f993c"
        ],
        "x": 75,
        "y": 1140,
        "wires": [
            [
                "cc40fd661bd8d2a6"
            ]
        ]
    },
    {
        "id": "cc40fd661bd8d2a6",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "7322c78e3cad909e"
            ]
        ]
    },
    {
        "id": "7322c78e3cad909e",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timeout",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timeout",
                "pt": "flow",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1140,
        "wires": [
            [
                "4c2673b9c18691bb",
                "7b46d55071354ff4"
            ]
        ]
    },
    {
        "id": "4c2673b9c18691bb",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "f901eec93520198a"
        ],
        "x": 845,
        "y": 1160,
        "wires": []
    },
    {
        "id": "7b46d55071354ff4",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 1140,
        "wires": [
            [
                "094a2806150f1d2f"
            ]
        ]
    },
    {
        "id": "094a2806150f1d2f",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "通信タイムアウト",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nif (timeout === msg.timeout) {\n    flow.set('timeout', now);\n    flow.set('index', index + 1);\n    msg.payload.status = '通信失敗';\n    const nextDevice = devices[index + 1];\n    if (nextDevice) {\n        nextDevice.status = '通信中';\n        setTimeout(() => node.send([null, null, { payload: nextDevice }]), 2000);\n        node.send([msg, {}, null]);\n        return [{ payload: nextDevice }, null, null];\n    } else {\n        delete msg.socketid;\n        flow.set('busy', false);\n        flow.set('process');\n        flow.set('index');\n        return [msg, {}, null];\n    }\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 950,
        "y": 1120,
        "wires": [
            [
                "ef06894d98bee941"
            ],
            [
                "91f647435d1f6c28"
            ],
            [
                "7322c78e3cad909e"
            ]
        ]
    },
    {
        "id": "5240e719352aa8cc",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 29",
        "links": [
            "5462bf07939bddff"
        ],
        "x": 75,
        "y": 1100,
        "wires": [
            [
                "2c2f7b30ce33e092"
            ]
        ]
    },
    {
        "id": "2c2f7b30ce33e092",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "process",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "resume",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "2389185194c61a1d"
            ]
        ]
    },
    {
        "id": "91f647435d1f6c28",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "9779a81a7923c617"
        ],
        "x": 1115,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2389185194c61a1d",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "設定受信",
        "func": "const devices = flow.get('devices') || [];\nconst index = flow.get('index') || 0;\nconst timeout = flow.get('timeout') || 0;\nconst now = moment().valueOf();\n\nfunction isSleep(payload) {\n    if (payload.sensorType === 257 || payload.sensorType === 258) {\n        return payload.advertise >= 1000;\n    } else {\n        return payload.advertise >= 1000 && payload.uplink === 86400;\n    }\n}\n\nif (devices[index] == null) {\n    return;\n}\n\nif (devices[index].deviceNumber === msg.payload.deviceNumber) {\n    flow.set('timeout', now);\n    if (!isSleep(msg.payload)) {\n        flow.set('index', index + 1);\n        msg.payload.status = '通常';\n        const nextDevice = devices[index + 1];\n        if (nextDevice) {\n            nextDevice.status = '通信中';\n            node.send([msg, null, null]);\n            return [{ payload: nextDevice }, null, { payload: nextDevice }];\n        } else {\n            delete msg.socketid;\n            flow.set('busy', false);\n            flow.set('process');\n            flow.set('index');\n            return [msg, null, null];\n        }\n    } else {\n        const payload = { ...devices[index] };\n        payload.advertise = devices[index].advertiseInterval;\n        payload.uplink = devices[index].uplinkInterval;\n        return [msg, { payload }, null];\n    }\n}\n\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "fe9c0645a4b6e901"
            ],
            [
                "f3d0c51a4652f57a"
            ],
            [
                "7322c78e3cad909e"
            ]
        ]
    },
    {
        "id": "fe9c0645a4b6e901",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 495,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ef06894d98bee941",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "997c028051ceead1"
        ],
        "x": 1115,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f3d0c51a4652f57a",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timeout",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "timeout",
                "pt": "flow",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1100,
        "wires": [
            [
                "dd230e2c84bca84a",
                "2e0682b38815cafe"
            ]
        ]
    },
    {
        "id": "dd230e2c84bca84a",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "cef9259f21d87cd7"
        ],
        "x": 845,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2e0682b38815cafe",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "90",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 1100,
        "wires": [
            [
                "094a2806150f1d2f"
            ]
        ]
    },
    {
        "id": "7e81cf7745f95800",
        "type": "inject",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "8e68abc8810d7324"
            ]
        ]
    },
    {
        "id": "8e68abc8810d7324",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "4c2d81691121247b",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "devices",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "process",
                "pt": "flow",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 560,
        "wires": [
            [
                "158ad407cb24c7ef"
            ]
        ]
    },
    {
        "id": "6469c0cbc9a0f430",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "socketid",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 520,
        "wires": [
            [
                "b9cb423160f6e2b7"
            ]
        ]
    },
    {
        "id": "84fbcb2b018a6789",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "detail",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "d4bf626aa85c759f",
                "5e727a978898a2d4",
                "918f501cad82aa6c"
            ],
            [
                "19899356917f5472"
            ]
        ]
    },
    {
        "id": "d4bf626aa85c759f",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "BLE設定画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Bluetoothデバイス_Bluetoothデバイス_(BravePI)\"],\"show\":[\"Bluetoothデバイス_センサー情報\",\"Bluetoothデバイス_デバイス情報\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 460,
        "wires": [
            [
                "61d21c93a02a8b4b"
            ]
        ]
    },
    {
        "id": "61d21c93a02a8b4b",
        "type": "ui_ui_control",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "events": "all",
        "x": 1120,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5e727a978898a2d4",
        "type": "ui_template",
        "z": "8b336f5f9ef68ac3",
        "group": "3163d1f802caa2c5",
        "name": "デバイス情報",
        "order": 1,
        "width": "8",
        "height": "13",
        "format": "<div class=\"group-header\">\n    <p>デバイス情報</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"send({topic: 'return'})\" aria-label=\"return-device\">\n        <ui-icon icon=\"mi-keyboard_return\"></ui-icon>\n    </md-button>\n    <md-tooltip>BLEデバイス画面に戻ります</md-tooltip>\n</div>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div>タイムゾーン</div>\n    <div>{{ uplink.timezoneText }}</div>\n    <div>FWバージョン</div>\n    <div>{{ uplink.firmwareVersion }}</div>\n    <div>BLEモード</div>\n    <div>{{ uplink.bleModeText }}</div>\n    <div>Tx Power</div>\n    <div>{{ uplink.txPowerText }}</div>\n    <div>Advertise間隔</div>\n    <div>{{ uplink.advertise ? uplink.advertise + ' [ms]' : '' }}</div>\n    <div ng-if=\"device.sensorType != 257 && device.sensorType != 258\">Uplink間隔</div>\n    <div ng-if=\"device.sensorType != 257 && device.sensorType != 258\">{{ uplink.uplink ? uplink.uplink + ' [sec]' : '' }}</div>\n    <div>計測モード</div>\n    <div>{{ uplink.readModeText }}</div>\n</div>\n<div class=\"row input-form m-1 mt-4\">\n    <div class=\"col-6\">\n        <md-input-container class=\"mb-0 mt-0\">\n            <label for=\"advertise-interval\">Advertise間隔 [ms]</label>\n            <input id=\"advertise-interval\" ng-model=\"request.advertise\" type=\"number\" aria-label=\"advertise\" min=\"100\" max=\"1000\" ng-disabled=\"!canRequest\" ng-change=\"onChangeInput()\">\n        </md-input-container>\n    </div>\n    <div class=\"col-6\">\n        <md-slider class=\"slider mb-0 mt-2\" ng-model=\"request.advertise\" aria-label=\"advertise\" min=\"100\" max=\"1000\"\n            step=\"100\" ng-disabled=\"!canRequest\" ng-change=\"onChangeInput()\">\n        </md-slider>\n    </div>\n    <div class=\"col-6\" ng-if=\"device.sensorType != 257 && device.sensorType != 258\">\n        <md-input-container class=\"mb-0 mt-0\">\n            <label for=\"uplink-interval\">Uplink間隔 [sec]</label>\n            <input id=\"uplink-interval\" ng-model=\"request.uplink\" type=\"number\" aria-label=\"uplink\" min=\"{{uplinkMin}}\" max=\"86400\" ng-disabled=\"!canRequest\" ng-change=\"onChangeInput()\">\n        </md-input-container>\n    </div>\n    <div class=\"col-6\" ng-if=\"device.sensorType != 257 && device.sensorType != 258\">\n        <md-slider class=\"slider mb-0 mt-2\" ng-model=\"request.uplink\" aria-label=\"uplink\" min=\"{{uplinkMin}}\"\n            max=\"86400\" step=\"1\" ng-disabled=\"!canRequest\" ng-change=\"onChangeInput()\">\n        </md-slider>\n    </div>\n    <div class=\"mt-2\">\n        <md-input-container class=\"bottom-left\">\n            <md-button class=\"btn-template\" ng-click=\"reqestBravePiParams()\" aria-label=\"sync\" ng-disabled=\"isBusy\">\n                設定取得\n                <md-tooltip>BLEデバイス設定を取得します。</md-tooltip>\n            </md-button>\n        </md-input-container>\n        <md-input-container class=\"bottom-right\">\n            <md-button class=\"btn-template\" ng-click=\"sendBravePiParams()\" aria-label=\"update\"\n                ng-disabled=\"!canRequest || disabled\">\n                設定更新\n                <md-tooltip>BLEデバイス設定を更新します。</md-tooltip>\n            </md-button>\n        </md-input-container>\n    </div>\n</div>\n<script>\n    (function(scope) {\n        scope.isBusy = false;\n        scope.canRequest = false;\n        scope.uplink = null;\n        scope.timeout = null;\n        scope.device = null;\n        scope.uplinkMin = 1;\n        scope.disabled = true;\n        scope.request = {\n            uplink: null,\n            advertise: null\n        };\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            switch (msg.topic) {\n                case 'detail':\n                    scope.uplink = null;\n                    scope.device = msg.payload;\n                    if (msg.payload.sensorType === 260) {\n                        scope.uplinkMin = 2;\n                    } else if (msg.payload.sensorType === 262) {\n                        scope.uplinkMin = 5;\n                    }\n                    break;\n                case 'uplink':\n                    if (!scope.isBusy) {\n                        break;\n                    }\n                    scope.isBusy = false;\n                    if (msg.payload.deviceNumber !== scope.device.deviceNumber) {\n                        scope.uplink = null;\n                        break;\n                    }\n                    if (msg.payload.sensorType !== scope.device.sensorType) {\n                        scope.uplink = null;\n                        break;\n                    }\n                    scope.uplink = msg.payload;\n                    scope.uplink.bleModeText = getBleModeText(scope.uplink);\n                    scope.uplink.txPowerText = getTxPowerText(scope.uplink);\n                    scope.uplink.readModeText = getReadModeText(scope.uplink);\n                    scope.uplink.samplingIntervalText = getSamplingIntervalText(scope.uplink);\n                    scope.uplink.timezoneText = getTimezoneText(scope.uplink);\n                    scope.request.uplink = scope.uplink.uplink;\n                    scope.request.advertise = scope.uplink.advertise;\n                    scope.canRequest = true;\n                    scope.disabled = false;\n                    scope.timeout = null;\n                    scope.send({ \n                        topic: 'save', \n                        payload: {\n                            ...scope.device,\n                            ...scope.uplink\n                        },\n                    });\n                    break;\n                case 'timeout':\n                    if (!scope.isBusy) {\n                        break;\n                    }\n                    if (scope.timeout === msg.timeout) {\n                        scope.isBusy = false;\n                        scope.canRequest = false;\n                        scope.send({ topic: 'restart' });\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        scope.reqestBravePiParams = function() {\n            scope.isBusy = true;\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            const payload = { ...scope.device };\n            scope.send({ topic: 'request', payload, timeout: scope.timeout });\n        };\n\n        scope.sendBravePiParams = function() {\n            scope.isBusy = true;\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            const payload = {\n                ...scope.uplink,\n                ...scope.request\n            };\n            scope.send({ topic: 'send', payload });\n        };\n\n        scope.onChangeInput = function() {\n            scope.disabled = (scope.request.advertise == null) || (scope.request.uplink == null);\n        }\n\n        function getTimezoneText(device) {\n            return device.timezone ? 'UTC' : '日本時間';\n        }\n\n        function getBleModeText(device) {\n            return device.bleMode ? 'Legacy' : 'LongRange';\n        }\n\n        function getTxPowerText(device) {\n            switch (device.txPower) {\n                case 0:\n                    return '±0 [dBm]';\n                case 1:\n                    return '+4 [dBm]';\n                case 2:\n                    return '-4 [dBm]';\n                case 3:\n                    return '-8 [dBm]';\n                case 4:\n                    return '-12 [dBm]';\n                case 5:\n                    return '-16 [dBm]';\n                case 6:\n                    return '-20 [dBm]';\n                case 7:\n                    return '-40 [dBm]';\n                case 8:\n                    return '+8 [dBm]';\n                default:\n                    return '±0 [dBm]';\n            }                \n        }\n\n        function getReadModeText(device) {\n            switch (device.readMode) {\n                case 0:\n                    return '瞬時値 (uplink間隔)';\n                case 1:\n                    return '検知';\n                case 2:\n                    return 'サンプリング';\n                default:\n                    return '瞬時値';\n            }\n        }\n\n        function getSamplingIntervalText(device) {\n            switch (device.samplingInterval) {\n                case 0:\n                    return '1000 [ms]';\n                case 1:\n                    return '500 [ms]';\n                case 2:\n                    return '200 [ms]';\n                case 3:\n                    return '100 [ms]';\n                case 4:\n                    return '50 [ms]';\n                case 5:\n                    return '10 [ms]';\n                default:\n                    return '1000 [ms]';\n            }\n        }\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 300,
        "wires": [
            [
                "1deca7a55d46df29"
            ]
        ]
    },
    {
        "id": "c200e34920d833e1",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "BLE画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Bluetoothデバイス_センサー情報\",\"Bluetoothデバイス_デバイス情報\"],\"show\":[\"Bluetoothデバイス_Bluetoothデバイス_(BravePI)\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "8013e76075682603"
            ]
        ]
    },
    {
        "id": "8013e76075682603",
        "type": "ui_ui_control",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "events": "all",
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1deca7a55d46df29",
        "type": "switch",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "save",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "send",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 690,
        "y": 300,
        "wires": [
            [
                "06c64847ad06b117"
            ],
            [
                "46515f158a9768af"
            ],
            [
                "516b8a08706b0138",
                "2719d595756d38b5"
            ],
            [
                "3965c5284779dd9a",
                "4f0d8cc9b47710f3"
            ],
            [
                "10a0928b628ff818"
            ]
        ]
    },
    {
        "id": "2719d595756d38b5",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "f901eec93520198a"
        ],
        "x": 855,
        "y": 260,
        "wires": []
    },
    {
        "id": "516b8a08706b0138",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 300,
        "wires": [
            [
                "c2ae6af0092bc794"
            ]
        ]
    },
    {
        "id": "c2ae6af0092bc794",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeout",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "5e727a978898a2d4"
            ]
        ]
    },
    {
        "id": "7567d6ab7311d37c",
        "type": "function",
        "z": "8b336f5f9ef68ac3",
        "name": "デバイス情報受信",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nconst sensorType = sensorTypes[msg.payload.sensorType];\nif (sensorType) {\n    msg.topic = 'uplink';\n    msg.payload = {\n        ...msg.payload,\n        ...sensorType,\n    };\n    msg.payload.advertiseInterval = msg.payload.advertise;\n    msg.payload.uplinkInterval = msg.payload.uplink;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 300,
        "wires": [
            [
                "5e727a978898a2d4"
            ]
        ]
    },
    {
        "id": "2578b4b9f2dab829",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "link in 32",
        "links": [
            "5462bf07939bddff"
        ],
        "x": 75,
        "y": 300,
        "wires": [
            [
                "7567d6ab7311d37c"
            ]
        ]
    },
    {
        "id": "4f0d8cc9b47710f3",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "cef9259f21d87cd7"
        ],
        "x": 855,
        "y": 380,
        "wires": []
    },
    {
        "id": "3965c5284779dd9a",
        "type": "delay",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "pauseType": "delay",
        "timeout": "90",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 340,
        "wires": [
            [
                "c2ae6af0092bc794"
            ]
        ]
    },
    {
        "id": "46515f158a9768af",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "9779a81a7923c617"
        ],
        "x": 855,
        "y": 220,
        "wires": []
    },
    {
        "id": "19899356917f5472",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 540,
        "wires": [
            [
                "4c2d81691121247b",
                "6469c0cbc9a0f430"
            ]
        ]
    },
    {
        "id": "3e43284f51d30d6d",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 44",
        "mode": "link",
        "links": [
            "4c69e290c7b7d39b"
        ],
        "x": 495,
        "y": 860,
        "wires": []
    },
    {
        "id": "06c64847ad06b117",
        "type": "link out",
        "z": "8b336f5f9ef68ac3",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "4c69e290c7b7d39b"
        ],
        "x": 855,
        "y": 180,
        "wires": []
    },
    {
        "id": "918f501cad82aa6c",
        "type": "ui_template",
        "z": "8b336f5f9ef68ac3",
        "group": "de2f02f84aa152db",
        "name": "センサー情報",
        "order": 1,
        "width": "8",
        "height": "13",
        "format": "<div class=\"group-header\">\n    <p>センサー情報</p>\n</div>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div>センサー種別</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div>デバイス名</div>\n    <div>{{ device.deviceName }}</div>\n    <div>通信</div>\n    <div>{{ device.transfer }}</div>\n    <div>デバイスID</div>\n    <div>{{ device.key }}</div>\n    <div>バッテリー</div>\n    <div>{{ device.batteryText }}</div>\n    <div>RSSI</div>\n    <div>{{ device.rssiText }}</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div style=\"white-space: pre-wrap\">{{ device.received ? device.text : '--' }}</div>\n    <div ng-if=\"msg.payload.sensorType !== 258 && msg.payload.sensorType !== 296\">カウンター</div>\n    <div ng-if=\"msg.payload.sensorType !== 258 && msg.payload.sensorType !== 296\" style=\"white-space: pre-wrap\">{{ countText }}</div>\n    <div>受信時刻</div>\n    <div>{{device.received ? (device.time | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</div>\n</div>\n<script>\n    (function(scope) {\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            if (msg.topic === 'detail' || (scope.device && scope.device.deviceName === msg.payload.deviceName)) {\n                scope.device = msg.payload;\n                scope.countText = msg.payload.sensors.map(x => x.channel ? `${x.channel} : ${x.count}` : x.count).join('\\n');\n                scope.device.batteryText = scope.device.received ? `${scope.device.battery} [%]` : '--';\n                scope.device.rssiText = scope.device.received ? `${scope.device.rssi} [dBm]` : '--';\n            }\n        });\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "8fb4e83e689a7958",
        "type": "link in",
        "z": "8b336f5f9ef68ac3",
        "name": "Sensor Data Response",
        "links": [
            "366b354d9138e657",
            "f93ad3863a0e95a2"
        ],
        "x": 265,
        "y": 380,
        "wires": [
            [
                "918f501cad82aa6c"
            ]
        ]
    },
    {
        "id": "10a0928b628ff818",
        "type": "change",
        "z": "8b336f5f9ef68ac3",
        "name": "BLEデバイス表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Bluetoothデバイス_センサー情報\",\"Bluetoothデバイス_デバイス情報\"],\"show\":[\"Bluetoothデバイス_Bluetoothデバイス_(BravePI)\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "61d21c93a02a8b4b"
            ]
        ]
    },
    {
        "id": "0e0d23192f0b23ba",
        "type": "ui_template",
        "z": "fd4a567e7561fa40",
        "group": "02e3795a3c584021",
        "name": "ルーター一覧",
        "order": 1,
        "width": "8",
        "height": "14",
        "format": "<div class=\"group-header\">\n    <p>BraveJIG ルーター</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"reloadRouter()\" ng-disabled=\"disabled\" aria-label=\"reload\">\n        <ui-icon icon=\"mi-sync\"></ui-icon>\n    </md-button>\n    <md-tooltip>ルーター一覧を更新します</md-tooltip>\n</div>\n<div class=\"m-2\">\n    <table class=\"table align-middle\">\n        <tr>\n            <th class=\"w-60\">ルーターID</th>\n            <th class=\"w-40\">通信</th>\n            <th class=\"w-1\"></th>\n        </tr>\n        <tr ng-repeat=\"router in routers | orderBy: 'dest'\">\n            <td>\n                {{router.routerDeviceId}}\n            </td>\n            <td class=\"text-truncate w-max-0\" ng-if=\"router.accessType == 3\">\n                LAN<ui-icon class=\"thema-icon\" icon=\"swap_vert\"></ui-icon>\n            </td>\n            <td class=\"text-truncate w-max-0\" ng-if=\"router.accessType == 4\">\n                USB<ui-icon class=\"thema-icon\" icon=\"usb\"></ui-icon>\n            </td>\n            <td>\n                <md-button class=\"btn-template\" ng-click=\"send({payload: router, topic: 'detail', routers})\" aria-label=\"detail\"\n                    ng-disabled=\"disabled\">\n                    <ui-icon icon=\"mi-forward\"></ui-icon>\n                </md-button>\n                <md-tooltip>ルーター詳細画面に移動します</md-tooltip>\n            </td>\n        </tr>\n    </table>\n</div>\n<script>\n    (function(scope) {\n        scope.routers = [];\n        scope.disabled = false;\n        scope.busy = '';\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            switch (msg.topic) {\n                case 'init':\n                    // scope.disabled = msg.busy ? true : false;\n                    // scope.busy = msg.busy;\n                    scope.routers = msg.routers || [];\n                    break;\n                case 'timeout':\n                    scope.disabled = false;\n                    scope.busy = '';                 \n                    break;\n                case 'start':\n                    if (scope.busy === 'start') {\n                        const router = scope.routers.find(r => r.dest === msg.payload.dest);\n                        if (router == null) {\n                            scope.routers.push(msg.payload);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        scope.reloadRouter = function() {\n            scope.routers = [];\n            scope.disabled = true;\n            scope.busy = 'start';\n            scope.send({topic: 'start'});\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 440,
        "y": 300,
        "wires": [
            [
                "c5a0084a33e9f762"
            ]
        ]
    },
    {
        "id": "c5a0084a33e9f762",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "detail",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "eec1541e55b3651a",
                "1522bbd8c77cf0c1"
            ],
            [
                "22fdfdfbb02c559a",
                "1522bbd8c77cf0c1",
                "ab548702c997dd42"
            ]
        ]
    },
    {
        "id": "eec1541e55b3651a",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "バージョン",
        "func": "flow.set('busy', 'start');\nconst now = moment();\nconst protocol = 0x01;\nconst type = 0x01;\nconst version = Buffer.from(new Uint8Array([protocol, type, 2]).buffer);\nconst local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\nconst utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\nconst payload = Buffer.concat([version, local, utc]);\nconst bravejig = global.get('bravejig') || {};\n\nfor (const [jig, isConnect] of Object.entries(bravejig)) {\n    if (isConnect) {\n        if (jig.startsWith('/dev/ttyACM')) {\n            node.send({\n                topic: jig,\n                payload,\n            });\n        } else {\n            node.send({\n                topic: `JIReq/${jig}`,\n                payload,\n            });\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "momentTimezone",
                "module": "moment-timezone"
            }
        ],
        "x": 810,
        "y": 300,
        "wires": [
            [
                "9f218287a9a4affe"
            ]
        ]
    },
    {
        "id": "852365f93b73acc0",
        "type": "inject",
        "z": "fd4a567e7561fa40",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "1f156c26609f0aba"
            ]
        ]
    },
    {
        "id": "1f156c26609f0aba",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e0fc35b9e213e388",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "fd4a567e7561fa40",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "ルーター",
                "type": "str"
            }
        ],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "1ab3511ba66ba988",
                "bf9278722a62f709"
            ],
            [
                "fbaf3180f1a7fe7a"
            ]
        ]
    },
    {
        "id": "bf9278722a62f709",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "init",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "0e0d23192f0b23ba"
            ]
        ]
    },
    {
        "id": "9f218287a9a4affe",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 50",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 975,
        "y": 300,
        "wires": []
    },
    {
        "id": "1522bbd8c77cf0c1",
        "type": "delay",
        "z": "fd4a567e7561fa40",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 260,
        "wires": [
            [
                "3bd873e234aaa9ca"
            ]
        ]
    },
    {
        "id": "3bd873e234aaa9ca",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeout",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 260,
        "wires": [
            [
                "0e0d23192f0b23ba"
            ]
        ]
    },
    {
        "id": "91ff09a1f3c0b6f0",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 34",
        "links": [
            "aecd89f1ee2c7cd8"
        ],
        "x": 75,
        "y": 300,
        "wires": [
            [
                "92fb02837d6e7d58"
            ]
        ]
    },
    {
        "id": "92fb02837d6e7d58",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "0e0d23192f0b23ba"
            ]
        ]
    },
    {
        "id": "1ab3511ba66ba988",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ルーター一覧表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"ルーター_ルーター詳細\"],\"show\":[\"ルーター_ルーター\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "9b7946f4cf657ba3"
            ]
        ]
    },
    {
        "id": "9b7946f4cf657ba3",
        "type": "ui_ui_control",
        "z": "fd4a567e7561fa40",
        "name": "",
        "events": "all",
        "x": 660,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "22fdfdfbb02c559a",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ルーター詳細表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"ルーター_ルーター詳細\"],\"hide\":[\"ルーター_ルーター\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 340,
        "wires": [
            [
                "ae9fc4effac09223"
            ]
        ]
    },
    {
        "id": "ae9fc4effac09223",
        "type": "ui_ui_control",
        "z": "fd4a567e7561fa40",
        "name": "",
        "events": "all",
        "x": 1020,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8ab1085d3179fb1e",
        "type": "ui_template",
        "z": "fd4a567e7561fa40",
        "group": "da265e4388b0d3e2",
        "name": "ルーター情報",
        "order": 1,
        "width": "12",
        "height": "13",
        "format": "<div class=\"group-header\">\n    <p>ルーター詳細</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"send({topic: 'return'})\" aria-label=\"return-router\">\n        <ui-icon icon=\"mi-keyboard_return\"></ui-icon>\n    </md-button>\n    <md-tooltip>ルーター一覧画面に戻ります</md-tooltip>\n</div>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>ルーターID</span>\n        <md-button type=\"button\" ng-click=\"restart(false)\" ng-disabled=\"!canRequest\">\n            <ui-icon icon=\"mi-power_settings_new\"></ui-icon>\n            <md-tooltip>ルーターを再起動します</md-tooltip>\n        </md-button>\n    </div>\n    <div><span class=\"ps-2\">{{ routerDeviceId }}</span></div>\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>バージョン</span>\n        <md-button type=\"button\" ng-click=\"requestFirmwareVersion()\" ng-disabled=\"!canRequest\">\n            <ui-icon icon=\"mi-sync\"></ui-icon>\n            <md-tooltip>ルーターのファームウェアバージョンを取得します</md-tooltip>\n        </md-button>\n    </div>\n    <div><span class=\"ps-2\">{{ version }}</span></div>\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>アップデート</span>\n        <div>\n            <div>\n                <md-button type=\"button\" ng-disabled=\"updating || !canRequest\" ng-click=\"downloadUpdateFile()\">\n                    <ui-icon icon=\"mi-download\"></ui-icon>\n                    <md-tooltip>ルーターのアップデートファイルをインターネット経由で取得します</md-tooltip>\n                </md-button>\n            </div>\n            <div class=\"mt-2\">\n                <md-button id=\"fileSelect\" type=\"button\" ng-disabled=\"updating\">\n                    <ui-icon icon=\"mi-folder_open\"></ui-icon>\n                    <md-tooltip>ルーターのアップデートファイルを選択します</md-tooltip>\n                </md-button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row ms-0 align-items-baseline\" style=\"padding-right: calc(var(--bs-gutter-x) * .45);\">\n        <div class=\"col-10 text-truncate ps-2\">\n            {{ uploadFileName }}\n            <md-tooltip ng-if=\"uploadFileName\">{{ uploadFileName }}</md-tooltip>\n        </div>\n        <div class=\"col-2 pe-0 text-end\">\n            <md-button ng-click=\"startFirmwareUpdate()\" ng-disabled=\"updateDisabled || !canRequest\">\n                <ui-icon icon=\"mi-file_upload\"></ui-icon>\n            </md-button>\n            <md-tooltip>ルーターのファームウェアアップデートを実行します</md-tooltip>\n        </div>\n        <div class=\"col-12\" ng-if=\"updating\">\n            <progress ng-value=\"progress\" max=\"100\" class=\"w-75\"></progress>\n        </div>\n    </div>\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>スキャンモード</span>\n        <md-button type=\"button\" ng-click=\"requestScanMode()\" ng-disabled=\"!canRequest\">\n            <ui-icon icon=\"mi-sync\"></ui-icon>\n            <md-tooltip>ルーターのスキャンモードを取得します</md-tooltip>\n        </md-button>\n    </div>\n    <div class=\"row ms-0\">\n        <div class=\"col-12 ps-0 pe-0\">\n            <div class=\"justify-content-between d-flex\">\n                <span class=\"ps-2\">{{ scanMode }}</span>\n                <div>\n                    <md-button ng-click=\"changeScanMode()\" ng-disabled=\"!canRequest || !canChangeScanMode\">\n                        <!-- モード変更 -->\n                        <ui-icon icon=\"mi-swap_horiz\"></ui-icon>\n                        <md-tooltip>ルーターのスキャンモードを{{ nextMode }}変更します</md-tooltip>\n                    </md-button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>ペアリング設定</span>\n        <div>\n            <div>\n                <md-button type=\"button\" ng-click=\"requestPairing(3)\" ng-disabled=\"!canRequest\">\n                    <ui-icon icon=\"mi-sync\"></ui-icon>\n                    <md-tooltip>ルーターのペアリング設定を取得します</md-tooltip>\n                </md-button>\n            </div>\n            <div class=\"mt-2\">\n                <md-button ng-click=\"deleteAllPairing()\" ng-disabled=\"!canRequest\">\n                    <ui-icon icon=\"mi-delete\"></ui-icon>\n                    <md-tooltip>ペアリング設定を全削除します</md-tooltip>\n                </md-button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row ms-0 pe-0 align-items-baseline\">\n        <div class=\"col-12 ps-0 pe-0 pairing-list\">\n            <div ng-repeat=\"p in pairings\">\n                <span class=\"ps-2\">デバイスID({{ $index + 1 }})： {{p.deviceId}}</span>\n                <md-button ng-disabled=\"!canRequest\" ng-click=\"deletePairing(p, $index)\" class=\"float-end\">\n                    <ui-icon icon=\"mi-delete\"></ui-icon>\n                    <md-tooltip>デバイスID({{ $index + 1 }}) のペアリング設定を削除します</md-tooltip>\n                </md-button>\n            </div>\n        </div>\n    </div>\n</div>\n<input type=\"file\" id=\"uploadFile\" name=\"upload-file\" accept=\".bin\" class=\"d-none\" />\n\n<script>\n    (function(scope) {\n        scope.busy = '';\n        scope.version = '';\n        scope.pairings = [];\n        scope.progress = 0;\n        scope.updateDisabled = true;\n        scope.updating = false;\n        scope.canRequest = true;\n        scope.canChangeScanMode = false;\n        scope.dfuIndex = 0;\n        scope.dfuSize = 0;\n        scope.timeout = 0;\n        scope.scanMode = '';\n        scope.nextMode = '';\n        scope.filterCommand = 3;\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            switch (msg.topic) {\n                case 'init':\n                    scope.busy = msg.busy;\n                    scope.version = msg.payload.version;\n                    scope.dest = msg.payload.dest;\n                    scope.routerDeviceId = msg.payload.routerDeviceId;\n                    break;\n                case 'timeout':\n                    if (msg.payload.timeout == scope.timeout) {\n                        if (scope.busy.startsWith('dfu')) {\n                            scope.updating = false;\n                            scope.updateDisabled = false;\n                            scope.timeout = 0;\n                            scope.busy = '';\n                            scope.canRequest = true;\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ルーターのアップデートに失敗しました。'\n                            });\n                        } else {\n                            scope.timeout = 0;\n                            scope.busy = '';\n                            scope.canRequest = true;\n                            scope.send({\n                                topic: 'finish',\n                                payload: '通信がタイムアウトしました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'version':\n                    if (scope.busy === 'version') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.version = msg.payload.version;\n                    }\n                    break;\n                case 'scan-mode':\n                    if (scope.busy === 'scan-mode') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.scanMode = msg.payload.scanMode === 1 ? 'Legacy' : 'LongRange';\n                        scope.nextMode = (msg.payload.scanMode === 1 ? 'LongRange' : 'Legacy');\n                        scope.canChangeScanMode = true;\n                    }\n                    break;\n                case 'scan-mode-longrange':\n                    if (scope.busy === 'scan-mode-longrange') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.canChangeScanMode = true;\n                        if (msg.payload.result === 1) {\n                            scope.scanMode = 'LongRange';\n                            scope.nextMode = 'Legacy';\n                            scope.restart(true);\n                        } else {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'スキャンモードの変更に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'scan-mode-legacy':\n                    if (scope.busy === 'scan-mode-legacy') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.canChangeScanMode = true;\n                        if (msg.payload.result === 1) {\n                            scope.scanMode = 'Legacy';\n                            scope.nextMode = 'LongRange';\n                            scope.restart(true);\n                        } else {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'スキャンモードの変更に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'filter':\n                    if (scope.busy === 'filter') {\n                        scope.pairings.push(msg.payload);\n                        scope.requestPairing(scope.filterCommand + 1);\n                    }\n                    break;\n                case 'filter-all':\n                    break;\n                case 'dfu-start':\n                    if (scope.busy === 'dfu-start') {\n                        if (msg.payload.result) {\n                            scope.busy = 'dfu-data';\n                            scope.dfuIndex = 0;\n                            scope.send({\n                                topic: 'dfu-data', \n                                delay: 6000,\n                                payload: {\n                                    index: 0,\n                                    dest: scope.dest,\n                                }\n                            });\n                        } else {\n                            scope.busy = '';\n                            scope.updating = false;\n                            scope.updateDisabled = false;\n                            scope.timeout = 0;\n                            scope.canRequest = true;\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ルーターのアップデートに失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'dfu-data':\n                    if (scope.busy === 'dfu-data') {\n                        if (msg.payload.result) {\n                            scope.dfuIndex += 1;\n                            scope.progress = scope.dfuIndex * 1024 * 100 / scope.dfuSize;\n                            if (scope.dfuIndex * 1024 >= scope.dfuSize) {\n                                scope.busy = '';\n                                scope.progress = 100;\n                                scope.updating = false;\n                                scope.updateDisabled = false;\n                                scope.timeout = 0;\n                                scope.canRequest = true;\n                                scope.send({\n                                    topic: 'finish',\n                                    payload: 'アップデートファイルの送信に成功しました。\\nルーターが再起動するまで電源を切らずにお待ち下さい。',\n                                });\n                            } else {\n                                scope.timeout = moment().valueOf();\n                                scope.send({\n                                    topic: 'dfu-data', \n                                    delay: 30000,\n                                    payload: {\n                                        index: scope.dfuIndex,\n                                        dest: scope.dest,\n                                        timeout: scope.timeout,                       \n                                    }\n                                });\n                            }\n                        } else {\n                            scope.busy = '';\n                            scope.updating = false;\n                            scope.updateDisabled = false;\n                            scope.timeout = 0;\n                            scope.canRequest = true;\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ルーターのアップデートに失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'dfu-not-required':\n                    if (scope.busy === 'fetch-dfu-file') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.send({\n                            topic: 'finish',\n                            payload: 'ルーターは最新バージョンです。'\n                        });\n                    }\n                    break;\n                case 'dfu-required':\n                    if (scope.busy === 'fetch-dfu-file') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        scope.uploadFileName = `latest-v${msg.newVersion}.bin`;\n                        scope.updateDisabled = false;\n                        scope.dfuSize = msg.payload;\n                    }\n                    break;\n                case 'delete-all':\n                    if (scope.busy === 'delete-all') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        if (msg.payload.result === 1) {\n                            scope.pairings = [];\n                        } else {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ペアリング設定の全削除に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'delete':\n                    if (scope.busy === 'delete') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        if (msg.payload.result === 1) {\n                            scope.pairings = scope.pairings\n                                .filter(p => p.index != (msg.payload.cmd - 107));\n                        } else {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ペアリング設定の削除に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'stop':\n                    if (scope.busy === 'stop' || scope.busy === 'stop-force') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.canRequest = true;\n                        if (msg.payload.result !== 1) {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ルーターの再起動に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'error':\n                    if (scope.busy === 'filter') {\n                        scope.busy = '';\n                        scope.timeout = 0;\n                        if (msg.payload.reason == 0x02 || msg.payload.reason == 0x05) {\n                            // アップリンク中であるためリトライ\n                            scope.requestPairing(scope.filterCommand);\n                        } else if (msg.payload.reason == 0x06) {\n                            // デバイスIDがないため次へ\n                            scope.requestPairing(scope.filterCommand + 1);\n                        } else {\n                            scope.send({\n                                topic: 'finish',\n                                payload: 'ペアリング設定の取得に失敗しました。'\n                            });\n                        }\n                    }\n                    break;\n                case 'cancel':\n                    scope.busy = '';\n                    scope.timeout = 0;\n                    scope.canRequest = true;\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        scope.changeScanMode = function() {\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            if (scope.scanMode === 'LongRange') {\n                scope.busy = 'scan-mode-legacy';\n                scope.send({\n                    topic: 'scan-mode-legacy', \n                    payload: {\n                        dest: scope.dest,\n                        timeout: scope.timeout\n                    }\n                });\n            } else {\n                scope.busy = 'scan-mode-longrange';\n                scope.send({\n                    topic: 'scan-mode-longrange', \n                    payload: {\n                        dest: scope.dest,\n                        timeout: scope.timeout\n                    }\n                });\n            }\n        };\n\n        scope.restart = function(isForce) {\n            scope.busy = isForce ? 'stop-force': 'stop';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: scope.busy, \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout,\n                }\n            });\n        };\n\n        scope.requestScanMode = function() {\n            scope.scanMode = '';\n            scope.busy = 'scan-mode';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: 'scan-mode', \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout\n                }\n            });\n        };\n\n        scope.requestFirmwareVersion = function() {\n            scope.version = '';\n            scope.busy = 'version';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: 'version', \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout\n                }\n            });\n        };\n\n        scope.deleteAllPairing = function() {\n            scope.busy = 'delete-all';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: 'delete-all', \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout\n                }\n            });\n        };\n\n        scope.deletePairing = function(pairing, sequence) {\n            scope.busy = 'delete';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: 'delete', \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout,\n                    ...pairing,\n                    sequence,\n                }\n            });\n        };\n\n        scope.requestAllPairing = function() {\n            scope.pairings = [];\n            scope.busy = 'filter-all';\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            scope.send({\n                topic: 'filter-all', \n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout\n                }\n            });\n        };\n\n        scope.requestPairing = function(cmd) {\n            if (3 <= cmd && cmd <= 102) {\n                if (cmd == 3) {\n                    scope.pairings = [];\n                }\n                scope.busy = 'filter';\n                scope.canRequest = false;\n                scope.timeout = moment().valueOf();\n                scope.filterCommand = cmd;\n                scope.send({\n                    topic: 'filter', \n                    payload: {\n                        cmd,\n                        dest: scope.dest,\n                        timeout: scope.timeout\n                    }\n                });\n            } else {\n                scope.busy = '';\n                scope.timeout = 0;\n                scope.canRequest = true;\n                scope.send({ topic: 'finish' });\n            }\n        };\n\n        scope.startFirmwareUpdate = function() {\n            scope.busy = 'dfu-start';\n            scope.progress = 0;\n            scope.updating = true;\n            scope.updateDisabled = true;\n            scope.canRequest = false;\n            scope.timeout = moment().valueOf();\n            const file = $('input[name=upload-file]').prop('files')[0];\n            const payload = {\n                dest: scope.dest,\n                timeout: scope.timeout\n            };\n            if (file) {\n                payload.data = file;\n                payload.length = file.size;\n                scope.dfuSize = file.size;\n            }\n            scope.send({\n                topic: 'dfu-start', \n                delay: 6000,\n                payload\n            });\n        };\n\n        scope.downloadUpdateFile = function() {\n            scope.uploadFileName = '';\n            scope.timeout = moment().valueOf();\n            scope.canRequest = false;\n            scope.busy = 'fetch-dfu-file';\n            scope.send({\n                topic: 'fetch-dfu-file',\n                delay: 10000,\n                version: scope.version,\n                payload: {\n                    dest: scope.dest,\n                    timeout: scope.timeout,\n                }\n            });\n        };\n\n        $(() => {\n            $('#fileSelect').on('click', () => {\n                $('#uploadFile').click();\n            });\n            $('#uploadFile').on('change', (e) => {\n                const file = $(e.target).prop('files')[0];\n                scope.uploadFileName = file.name;\n                scope.updateDisabled = false;\n            });\n        });\n\n    })(scope);\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 440,
        "y": 740,
        "wires": [
            [
                "8c6d4acb6dd38319"
            ]
        ]
    },
    {
        "id": "7ea836dcd27b40bb",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "FWバージョン",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const version = Buffer.from(new Uint8Array([protocol, type, 2]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([version, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "ab548702c997dd42",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "init",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "routers",
                "pt": "flow",
                "to": "routers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 420,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "afb4c1bab5b2cdd8",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "FWバージョン",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "version",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "e998cf12099ce031",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 35",
        "links": [
            "aecd89f1ee2c7cd8"
        ],
        "x": 75,
        "y": 460,
        "wires": [
            [
                "afb4c1bab5b2cdd8"
            ]
        ]
    },
    {
        "id": "8c6d4acb6dd38319",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "version",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "scan-mode",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "scan-mode-longrange",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "scan-mode-legacy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop-force",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "filter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "filter-all",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dfu-start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dfu-data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete-all",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fetch-dfu-file",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "finish",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 15,
        "x": 490,
        "y": 600,
        "wires": [
            [
                "7ea836dcd27b40bb",
                "c06e1a9aec5918e6"
            ],
            [
                "bbebc5ee47a1e949",
                "c06e1a9aec5918e6"
            ],
            [
                "240a78e7ecc2aa0f",
                "c06e1a9aec5918e6"
            ],
            [
                "756d67bc0a033efd",
                "c06e1a9aec5918e6"
            ],
            [
                "94513d63bd24212e",
                "c06e1a9aec5918e6"
            ],
            [
                "c06e1a9aec5918e6",
                "a87ab9845bd1b3b3"
            ],
            [
                "131f3f7ac39ac0b6",
                "c06e1a9aec5918e6"
            ],
            [
                "67281b1a81bf4674",
                "c06e1a9aec5918e6"
            ],
            [
                "8949ed5b5db0ee1f",
                "c06e1a9aec5918e6"
            ],
            [
                "8cb8f98a02b12710"
            ],
            [
                "27a977bc940c9974"
            ],
            [
                "02a27e4e1aa7a4ae"
            ],
            [
                "c06e1a9aec5918e6",
                "d75e290a73dc337f"
            ],
            [
                "7f01fd09a37359ab"
            ],
            [
                "929408d34dd50dd9"
            ]
        ]
    },
    {
        "id": "929408d34dd50dd9",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ルーター一覧表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"ルーター_ルーター詳細\"],\"show\":[\"ルーター_ルーター\"],\"focus\":true}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "dfu",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1060,
        "wires": [
            [
                "8ffe152c49a5d296",
                "bf3e2e6fda4fba0f"
            ]
        ]
    },
    {
        "id": "8ffe152c49a5d296",
        "type": "ui_ui_control",
        "z": "fd4a567e7561fa40",
        "name": "",
        "events": "all",
        "x": 920,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "a87ab9845bd1b3b3",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "ペアリング設定",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const filter = Buffer.from(new Uint8Array([protocol, type, msg.payload.cmd]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([filter, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 620,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "8f7c2696ef3742f6",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 53",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 895,
        "y": 580,
        "wires": []
    },
    {
        "id": "74239fd86baac1b1",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ペアリング設定",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "filter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 540,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "2d48ee79f59ed8a0",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 37",
        "links": [
            "655f8085bcc333d1"
        ],
        "x": 75,
        "y": 540,
        "wires": [
            [
                "74239fd86baac1b1"
            ]
        ]
    },
    {
        "id": "7f01fd09a37359ab",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "通知",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "通知",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 1000,
        "wires": [
            [
                "bf7b960465b54118"
            ]
        ]
    },
    {
        "id": "fbaf3180f1a7fe7a",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "routers",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "dfu",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "67281b1a81bf4674",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "DFUの開始処理",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    if (msg.payload.data) {\n        flow.set('dfu', {\n            data: msg.payload.data,\n            length: msg.payload.length,\n        });\n    }\n    const protocol = 0x01;\n    const type = 0x03;\n    const dfu = Buffer.from(new Uint8Array([protocol, type]).buffer);\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const totalLength = Buffer.from(new Uint32Array([msg.payload.length]).buffer);\n    const payload = Buffer.concat([dfu, unixTime, totalLength]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DfuReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 700,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "e04270dd3125ba93",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 41",
        "links": [
            "9d1e26b9746594ba"
        ],
        "x": 75,
        "y": 620,
        "wires": [
            [
                "7d02525114be6485"
            ]
        ]
    },
    {
        "id": "7d02525114be6485",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "DFU処理応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "busy",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 620,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "8949ed5b5db0ee1f",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "DFUの送信処理",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const dfu = flow.get('dfu');\n    const start = msg.payload.index * 1024;\n    const packet = dfu.data.slice(start, start + 1024);\n    const packetSize = Buffer.from(new Uint16Array([packet.length]).buffer);\n    const body = Buffer.from(new Uint8Array(packet).buffer);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n        msg.payload = Buffer.concat([packetSize, body]);\n    } else {\n        const idx = Buffer.from(new Uint16Array([msg.payload.index]).buffer);\n        msg.topic = `DfuReq/${msg.payload.dest}`;\n        msg.payload = Buffer.concat([idx, packetSize, body]);\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "95f3deed02b851a5",
        "type": "delay",
        "z": "fd4a567e7561fa40",
        "name": "タイムアウト",
        "pauseType": "delayv",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1020,
        "wires": [
            [
                "a8a4e0de659e40e5"
            ]
        ]
    },
    {
        "id": "a8a4e0de659e40e5",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "タイムアウト",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeout",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "bbebc5ee47a1e949",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "スキャンモード",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const scanMode = Buffer.from(new Uint8Array([protocol, type, 103]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([scanMode, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "809d0503256d987e",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "スキャンモード",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scan-mode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 500,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "982fdd4b2472dee7",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 42",
        "links": [
            "55bb206890c979e9"
        ],
        "x": 75,
        "y": 500,
        "wires": [
            [
                "809d0503256d987e"
            ]
        ]
    },
    {
        "id": "240a78e7ecc2aa0f",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "LongRange変更",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const toLongRange = Buffer.from(new Uint8Array([protocol, type, 104]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([toLongRange, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "756d67bc0a033efd",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "Legacyに変更",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const toLegacy = Buffer.from(new Uint8Array([protocol, type, 105]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([toLegacy, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "bf7b960465b54118",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "d92e7b24426ba55f"
            ]
        ]
    },
    {
        "id": "d92e7b24426ba55f",
        "type": "ui_toast",
        "z": "fd4a567e7561fa40",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 950,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fdd34fff50ab1de9",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 43",
        "links": [
            "e8c463032545e057"
        ],
        "x": 75,
        "y": 660,
        "wires": [
            [
                "44f722e2ca0aabfb"
            ]
        ]
    },
    {
        "id": "36c6efc2884d2010",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 44",
        "links": [
            "87f2d1546c36c483"
        ],
        "x": 75,
        "y": 700,
        "wires": [
            [
                "59bd4fccfef920f0"
            ]
        ]
    },
    {
        "id": "44f722e2ca0aabfb",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "LongRange変更",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scan-mode-longrange",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 660,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "59bd4fccfef920f0",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "Legacy変更応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scan-mode-legacy",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 700,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "bf3e2e6fda4fba0f",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 58",
        "mode": "link",
        "links": [
            "555efba6b7ddc586"
        ],
        "x": 875,
        "y": 1080,
        "wires": []
    },
    {
        "id": "555efba6b7ddc586",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 45",
        "links": [
            "bf3e2e6fda4fba0f"
        ],
        "x": 75,
        "y": 260,
        "wires": [
            [
                "ede62dd50eac6d73"
            ]
        ]
    },
    {
        "id": "ede62dd50eac6d73",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "routers",
                "pt": "msg",
                "to": "routers",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 260,
        "wires": [
            [
                "bf9278722a62f709"
            ]
        ]
    },
    {
        "id": "2b209ceb6f44eec6",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "エラー応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 860,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "96ba54fbb83dcf89",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 49",
        "links": [
            "b73ee17b96d35836"
        ],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "2b209ceb6f44eec6"
            ]
        ]
    },
    {
        "id": "6c6cca838a9552d7",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "全削除",
        "func": "if (flow.get('in')) {\n    flow.set('busy', 'delete-all');\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const deleteAllPairing = Buffer.from(new Uint8Array([protocol, type, 106]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([deleteAllPairing, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1330,
        "y": 880,
        "wires": [
            [
                "c256891dce1540fb"
            ]
        ]
    },
    {
        "id": "0bc510dd9bbc4f7f",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ペア全削除応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "delete-all",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 740,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "d45dbca62e7e3b3b",
        "type": "ui_toast",
        "z": "fd4a567e7561fa40",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "70abc4e6beb20a29"
            ]
        ]
    },
    {
        "id": "70abc4e6beb20a29",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 920,
        "wires": [
            [
                "66a1cb22b8e200b7"
            ],
            [
                "8f41d0eed4c9d6b2"
            ]
        ]
    },
    {
        "id": "27a977bc940c9974",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "全削除",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ペアリング設定を全削除します。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 920,
        "wires": [
            [
                "d45dbca62e7e3b3b"
            ]
        ]
    },
    {
        "id": "8f41d0eed4c9d6b2",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 68",
        "mode": "link",
        "links": [
            "b81bb3c2cc5fca5b"
        ],
        "x": 1085,
        "y": 980,
        "wires": []
    },
    {
        "id": "75f4fe9879cf2002",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "キャンセル",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cancel",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 900,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "b81bb3c2cc5fca5b",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 50",
        "links": [
            "8f41d0eed4c9d6b2"
        ],
        "x": 75,
        "y": 900,
        "wires": [
            [
                "75f4fe9879cf2002"
            ]
        ]
    },
    {
        "id": "88f488ac73d2b250",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 51",
        "links": [
            "0422cea745233c6d",
            "c06e1a9aec5918e6"
        ],
        "x": 75,
        "y": 1020,
        "wires": [
            [
                "95f3deed02b851a5"
            ]
        ]
    },
    {
        "id": "0422cea745233c6d",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 69",
        "mode": "link",
        "links": [
            "88f488ac73d2b250"
        ],
        "x": 1285,
        "y": 960,
        "wires": []
    },
    {
        "id": "c06e1a9aec5918e6",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 70",
        "mode": "link",
        "links": [
            "88f488ac73d2b250"
        ],
        "x": 655,
        "y": 380,
        "wires": []
    },
    {
        "id": "66a1cb22b8e200b7",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "temp",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 900,
        "wires": [
            [
                "6c6cca838a9552d7",
                "0422cea745233c6d"
            ]
        ]
    },
    {
        "id": "c256891dce1540fb",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 71",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 1435,
        "y": 880,
        "wires": []
    },
    {
        "id": "02a27e4e1aa7a4ae",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "削除",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'デバイスID('&(temp.sequence+1)&') のペアリング設定を削除します。よろしいですか？'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 960,
        "wires": [
            [
                "5b7e68f66403a168"
            ]
        ]
    },
    {
        "id": "84310872fecbf169",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "ペア削除応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "delete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 780,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "5b7e68f66403a168",
        "type": "ui_toast",
        "z": "fd4a567e7561fa40",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 830,
        "y": 960,
        "wires": [
            [
                "b13b0aed0759496c"
            ]
        ]
    },
    {
        "id": "b13b0aed0759496c",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 960,
        "wires": [
            [
                "d76943f405843694"
            ],
            [
                "8f41d0eed4c9d6b2"
            ]
        ]
    },
    {
        "id": "d76943f405843694",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "temp",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 940,
        "wires": [
            [
                "0422cea745233c6d",
                "ceec3e8be9fc39fe"
            ]
        ]
    },
    {
        "id": "ceec3e8be9fc39fe",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "削除",
        "func": "if (flow.get('in')) {\n    flow.set('busy', 'delete');\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const deletePairing = Buffer.from(new Uint8Array([protocol, type, 107 + msg.payload.index]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([deletePairing, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1330,
        "y": 920,
        "wires": [
            [
                "c256891dce1540fb"
            ]
        ]
    },
    {
        "id": "d748abc08c291c15",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 52",
        "links": [
            "84dd437da3a0631b"
        ],
        "x": 75,
        "y": 740,
        "wires": [
            [
                "0bc510dd9bbc4f7f"
            ]
        ]
    },
    {
        "id": "ce07f3f2b8516f98",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 53",
        "links": [
            "0cb65c8cd5097bda"
        ],
        "x": 75,
        "y": 780,
        "wires": [
            [
                "84310872fecbf169"
            ]
        ]
    },
    {
        "id": "94513d63bd24212e",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "再起動CMD",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const stop = Buffer.from(new Uint8Array([protocol, type, 0]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([stop, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 710,
        "y": 580,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "131f3f7ac39ac0b6",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "全ペアリング",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const all = Buffer.from(new Uint8Array([protocol, type, 207]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([all, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "8f7c2696ef3742f6"
            ]
        ]
    },
    {
        "id": "9dd842ab4510c435",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "全ペアリング",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "filter-all",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 580,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "544c50c808ac9992",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 54",
        "links": [
            "6e6d3ee13e422737"
        ],
        "x": 75,
        "y": 580,
        "wires": [
            [
                "9dd842ab4510c435"
            ]
        ]
    },
    {
        "id": "cfbea64d3b77d39c",
        "type": "http request",
        "z": "fd4a567e7561fa40",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 780,
        "wires": [
            [
                "89f0b66d3e599f07"
            ]
        ]
    },
    {
        "id": "68f9b43e8e471f33",
        "type": "http request",
        "z": "fd4a567e7561fa40",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 760,
        "wires": [
            [
                "47bcc75b0df9645c"
            ]
        ]
    },
    {
        "id": "16ec5884299ec8c9",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "最新バージョン",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "dfu-not-required",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 940,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "23db42defe75fdbd",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 2",
        "links": [
            "12fbf452e31a9ae3"
        ],
        "x": 75,
        "y": 940,
        "wires": [
            [
                "16ec5884299ec8c9"
            ]
        ]
    },
    {
        "id": "12fbf452e31a9ae3",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "23db42defe75fdbd"
        ],
        "x": 1215,
        "y": 800,
        "wires": []
    },
    {
        "id": "89f0b66d3e599f07",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "バージョンチェック",
        "func": "if (msg.statusCode !== 200) {\n    return;\n}\nmsg.newVersion = `${msg.payload}`.trim();\nconst newVersion = msg.newVersion.split('.').map(v => parseInt(v));\nconst currentVersion = msg.version.split('.').map(v => parseInt(v));\nif (newVersion.includes(256)) {\n    // same\n    return [null, msg];\n}\nif ((currentVersion[0] === newVersion[0]) &&\n    (currentVersion[1] === newVersion[1]) &&\n    (currentVersion[2] === newVersion[2])) {\n    // same\n    return [null, msg];\n} else {\n    // update\n    msg.url = `https://public-bucket.braveridge.io/bravejig/firmware/${msg.modelCode}/latest.bin`;\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 780,
        "wires": [
            [
                "68f9b43e8e471f33"
            ],
            [
                "12fbf452e31a9ae3"
            ]
        ]
    },
    {
        "id": "b2f81a7910cb50f9",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "not最新バージョン",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "dfu-required",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dfu",
                "pt": "flow",
                "to": "{\t    \"data\": payload,\t    \"length\": payload.length\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.length",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 980,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "35eb53db7adfc52c",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 16",
        "links": [
            "95990c9a09556bb3"
        ],
        "x": 75,
        "y": 980,
        "wires": [
            [
                "b2f81a7910cb50f9"
            ]
        ]
    },
    {
        "id": "95990c9a09556bb3",
        "type": "link out",
        "z": "fd4a567e7561fa40",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "35eb53db7adfc52c"
        ],
        "x": 1525,
        "y": 760,
        "wires": []
    },
    {
        "id": "47bcc75b0df9645c",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1430,
        "y": 760,
        "wires": [
            [
                "95990c9a09556bb3"
            ]
        ]
    },
    {
        "id": "d75e290a73dc337f",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "url",
        "func": "const modelCode = getModelCode();\nmsg.modelCode = modelCode;\nmsg.url = `https://public-bucket.braveridge.io/bravejig/firmware/${modelCode}/latest.txt`;\nreturn msg;\n\nfunction getModelCode() {\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        // USB\n        return '0301';\n    } else {\n        // LAN\n        return '0302';\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 780,
        "wires": [
            [
                "cfbea64d3b77d39c"
            ]
        ]
    },
    {
        "id": "268188011967bd60",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "通信停止応答",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 820,
        "wires": [
            [
                "8ab1085d3179fb1e"
            ]
        ]
    },
    {
        "id": "91d57dec157fab97",
        "type": "link in",
        "z": "fd4a567e7561fa40",
        "name": "link in 9",
        "links": [
            "d2cb9b338bcf0b93"
        ],
        "x": 75,
        "y": 820,
        "wires": [
            [
                "268188011967bd60"
            ]
        ]
    },
    {
        "id": "8cb8f98a02b12710",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "再起動",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ルーターを再起動します。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 880,
        "wires": [
            [
                "379081e811d0fcc1"
            ]
        ]
    },
    {
        "id": "379081e811d0fcc1",
        "type": "ui_toast",
        "z": "fd4a567e7561fa40",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 830,
        "y": 880,
        "wires": [
            [
                "8df41a0001adf8d3"
            ]
        ]
    },
    {
        "id": "8df41a0001adf8d3",
        "type": "switch",
        "z": "fd4a567e7561fa40",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 880,
        "wires": [
            [
                "de5c2cea70eaa0b7"
            ],
            [
                "8f41d0eed4c9d6b2"
            ]
        ]
    },
    {
        "id": "de5c2cea70eaa0b7",
        "type": "change",
        "z": "fd4a567e7561fa40",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "temp",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 860,
        "wires": [
            [
                "b8cfb2f6a6dfa204",
                "0422cea745233c6d"
            ]
        ]
    },
    {
        "id": "b8cfb2f6a6dfa204",
        "type": "function",
        "z": "fd4a567e7561fa40",
        "name": "再起動",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const now = moment();\n    const protocol = 0x01;\n    const type = 0x01;\n    const stop = Buffer.from(new Uint8Array([protocol, type, 0]).buffer);\n    const local = Buffer.from(new Uint32Array([now.unix() + now.utcOffset() * 60]).buffer);\n    const utc = Buffer.from(new Uint32Array([now.unix()]).buffer);\n    const payload = Buffer.concat([stop, local, utc]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `JIReq/${msg.payload.dest}`;\n    }\n    msg.payload = payload;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1330,
        "y": 840,
        "wires": [
            [
                "c256891dce1540fb"
            ]
        ]
    },
    {
        "id": "49d895ade4ca1c5a",
        "type": "ui_template",
        "z": "ecf79cf3748850a8",
        "group": "07c47cc34edb7282",
        "name": "登録済モジュール",
        "order": 3,
        "width": "8",
        "height": "13",
        "format": "<!-- <div class=\"row ms-1 me-1\">\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestSleep()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"pause\"></ui-icon>\n            省電力\n        </md-button>\n    </div>\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestResume()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"play_arrow\"></ui-icon>\n            省電力解除\n        </md-button>\n    </div>\n    <div class=\"col-4\">\n        <md-button ng-click=\"requestStatus()\" class=\"w-100 btn-height\" ng-disabled=\"disabled\">\n            <ui-icon class=\"white-icon\" icon=\"sync\"></ui-icon>\n            設定取得\n        </md-button>\n    </div>\n</div> -->\n<div class=\"m-2\">\n    <table class=\"table align-middle\">\n        <tr>\n            <!-- <th class=\"w-1\" ng-class=\"busy ? 'opacity-50' : ''\">\n                <ui-icon ng-if=\"checked && some\" class=\"thema-icon\" icon=\"check_box\" ng-click=\"toggleAllCheckBox()\">\n                </ui-icon>\n                <ui-icon ng-if=\"!checked && !some\" class=\"thema-icon\" icon=\"check_box_outline_blank\"\n                    ng-click=\"toggleAllCheckBox()\"></ui-icon>\n                <ui-icon ng-if=\"!checked && some\" class=\"thema-icon\" icon=\"indeterminate_check_box\"\n                    ng-click=\"toggleAllCheckBox()\"></ui-icon>\n            </th> -->\n            <th>センサー種別</th>\n            <th>デバイス名</th>\n            <!-- <th>Advertise間隔 [ms]</th>\n            <th>Uplink間隔 [sec]</th>\n            <th class=\"w-10\">状態</th> -->\n            <th class=\"w-1\"></th>\n        </tr>\n        <tr ng-repeat=\"device in devices | orderBy: 'sensorType'\">\n            <!-- <td ng-class=\"busy ? 'opacity-50' : ''\">\n                <ui-icon ng-if=\"device.checked\" class=\"thema-icon\" icon=\"check_box\"\n                    ng-click=\"toggleCheckBox(device.deviceNumber)\"></ui-icon>\n                <ui-icon ng-if=\"!device.checked\" class=\"thema-icon\" icon=\"check_box_outline_blank\"\n                    ng-click=\"toggleCheckBox(device.deviceNumber)\"></ui-icon>\n            </td> -->\n            <td>\n                {{device.sensorTypeText}}\n                <ui-icon ng-if=\"device.accessType == 3\" class=\"thema-icon\" icon=\"swap_vert\"></ui-icon>\n                <ui-icon ng-if=\"device.accessType == 4\" class=\"thema-icon\" icon=\"usb\"></ui-icon>\n            </td>\n            <td class=\"text-truncate w-max-0\">\n                {{device.deviceName}}\n                <md-tooltip>{{device.deviceName}}</md-tooltip>\n            </td>\n            <!-- <td>{{ device.advertise ? device.advertise : '--' }}</td>\n            <td>{{ device.uplink ? device.uplink : '--' }}</td>\n            <td>{{ device.status ? device.status : '--' }}</td> -->\n            <td>\n                <md-button class=\"btn-template\" ng-click=\"send({payload: device, topic: 'detail'})\"\n                    aria-label=\"detail\" ng-disabled=\"!device.dest\">\n                    <ui-icon icon=\"mi-forward\"></ui-icon>\n                </md-button>\n                <md-tooltip>モジュール設定画面に移動します</md-tooltip>\n            </td>\n        </tr>\n    </table>\n</div>\n<script>\n    (function(scope) {\n        scope.devices = [];\n        scope.busy = true;\n        scope.checked = true;\n        scope.some = true;\n        scope.disabled = true;\n        scope.$watch('msg.payload', (payload) => {\n            if (payload == null) {\n                return;\n            }\n            if (Array.isArray(payload)) {\n                const devices = payload.filter(x => x.accessType === 4 || x.accessType === 3);\n                devices.sort((a, b) => a.sensorType - b.sensorType);\n                devices.forEach(d => d.checked = true);\n                scope.checked = true;\n                scope.some = true;\n                scope.devices = devices;\n            } else if (typeof payload === 'object') {\n                const device = scope.devices.find(x => x.deviceNumber === payload.deviceNumber);\n                if (device) {\n                    Object.assign(device, payload);\n                }\n            }\n        });\n        scope.$watch('msg.busy', (busy) => {\n            if (busy != null) {\n                scope.busy = busy;\n                scope.disabled = scope.busy || !scope.devices?.some(d => d.checked);\n            }\n        });\n        scope.$watch('msg.sleep', (sleep) => {\n            if (sleep == null) {\n                return;\n            }\n            const device = scope.devices.find(d => d.deviceNumber === sleep.deviceNumber);\n            if (device) {\n                device.advertiseInterval = sleep.advertiseInterval;\n                device.uplinkInterval = sleep.uplinkInterval;\n            }\n        });\n\n        scope.requestSleep = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'sleep',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.requestResume = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'resume',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.requestStatus = function() {\n            const devices = scope.devices.filter(d => d.checked);\n            if (devices) {\n                scope.busy = true;\n                scope.disabled = true;\n                devices.forEach(d => d.status = '通信待機');\n                devices[0].status = '通信中';\n                scope.send({\n                    topic: 'status',\n                    payload: devices\n                });\n            }\n        };\n\n        scope.toggleAllCheckBox = function() {\n            if (scope.busy) {\n                return;\n            }\n            scope.checked = !scope.checked;\n            scope.some = scope.checked;\n            scope.devices.forEach(d => d.checked = scope.checked);\n            scope.disabled = scope.busy || !scope.devices.some(d => d.checked);\n        };\n\n        scope.toggleCheckBox = function(deviceNumber) {\n            if (scope.busy) {\n                return;\n            }\n            const device = scope.devices.find(d => d.deviceNumber === deviceNumber);\n            if (device) {\n                device.checked = !device.checked;\n                scope.checked = scope.devices.every(d => d.checked);\n                scope.some = scope.devices.some(d => d.checked);\n                scope.disabled = scope.busy || !scope.some;\n            }\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 360,
        "wires": [
            [
                "9e82ff14266a04a0"
            ]
        ]
    },
    {
        "id": "268748013f81318b",
        "type": "inject",
        "z": "ecf79cf3748850a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "9eb8e9f2dfefe973"
            ]
        ]
    },
    {
        "id": "9eb8e9f2dfefe973",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "939264641ec91489",
        "type": "ui_ui_control",
        "z": "ecf79cf3748850a8",
        "name": "",
        "events": "all",
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a34fea6613148e5c",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "モジュール一覧画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"モジュール_センサー情報\",\"モジュール_モジュール設定\"],\"show\":[\"モジュール_BraveJIG_モジュール\"],\"focus\":true}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "939264641ec91489"
            ]
        ]
    },
    {
        "id": "28d21e8ecfeede45",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "ecf79cf3748850a8",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "モジュール",
                "type": "str"
            }
        ],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "a34fea6613148e5c",
                "dff35859a23d3e19"
            ],
            [
                "a5a95ac674ea0cef"
            ]
        ]
    },
    {
        "id": "dff35859a23d3e19",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "All Device Request",
        "mode": "link",
        "links": [
            "e7ba768d9aaf0d9b"
        ],
        "x": 295,
        "y": 120,
        "wires": []
    },
    {
        "id": "9e82ff14266a04a0",
        "type": "switch",
        "z": "ecf79cf3748850a8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "detail",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 360,
        "wires": [
            [
                "4f77c71005abec23",
                "39db5ae60c751a92",
                "60cdc54a00a44139"
            ],
            []
        ]
    },
    {
        "id": "c774ba35e8b6b699",
        "type": "ui_ui_control",
        "z": "ecf79cf3748850a8",
        "name": "",
        "events": "all",
        "x": 960,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4f77c71005abec23",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "センサー詳細画面表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"モジュール_センサー情報\",\"モジュール_モジュール設定\"],\"hide\":[\"モジュール_BraveJIG_モジュール\"],\"focus\":true}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "c774ba35e8b6b699"
            ]
        ]
    },
    {
        "id": "7a8c0f17e095e6e5",
        "type": "ui_template",
        "z": "ecf79cf3748850a8",
        "group": "35720b9f74ec4857",
        "name": "モジュール設定",
        "order": 2,
        "width": "9",
        "height": "14",
        "format": "<div class=\"group-header\">\n    <p>モジュール設定</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"send({topic: 'return'})\" aria-label=\"return-device\">\n        <ui-icon icon=\"mi-keyboard_return\"></ui-icon>\n    </md-button>\n    <md-tooltip>モジュール一覧画面に戻ります</md-tooltip>\n</div>\n<div class=\"row table-row-10-2 table-row m-2\">\n    <div>バージョン</div>\n    <div>{{ uplink.firmwareVersion }}</div>\n</div>\n<form name=\"module\">\n    <div class=\"row input-form m-1 mt-3\">\n        <!-- <div class=\"col-12\">\n        <md-input-container class=\"d-block\">\n            <label>タイムゾーン</label>\n            <md-select ng-model=\"request.timeZone\" ng-disabled=\"!canSettings\">\n                <md-option value=\"0\">日本時間</md-option>\n                <md-option value=\"1\">UTC</md-option>\n            </md-select>\n        </md-input-container>\n    </div> -->\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\">\n                <label>BLE通信モード</label>\n                <md-select ng-model=\"request.bleMode\" ng-disabled=\"!canSettings\">\n                    <md-option value=\"0\">LongRange</md-option>\n                    <md-option value=\"1\">Legacy</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\">\n            <md-input-container class=\"d-block\">\n                <label>送信電波出力 [dBm]</label>\n                <md-select ng-model=\"request.txPower\" ng-disabled=\"!canSettings\">\n                    <md-option value=\"0\">±0</md-option>\n                    <md-option value=\"1\">+4</md-option>\n                    <md-option value=\"2\">-4</md-option>\n                    <md-option value=\"3\">-8</md-option>\n                    <md-option value=\"4\">-12</md-option>\n                    <md-option value=\"5\">-16</md-option>\n                    <md-option value=\"6\">-20</md-option>\n                    <md-option value=\"7\">-40</md-option>\n                    <md-option value=\"8\">+8</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\" ng-if=\"device.sensorType != 257 && device.sensorType != 258 && device.sensorType != 296\">\n            <md-input-container class=\"d-block\">\n                <label>計測モード</label>\n                <md-select ng-model=\"request.readMode\" ng-disabled=\"!canSettings\" ng-change=\"changeReadMode()\">\n                    <md-option value=\"0\">瞬時値</md-option>\n                    <md-option value=\"1\">検知</md-option>\n                    <md-option value=\"2\" ng-if=\"device.sensorType != 260 && device.sensorType != 293\">サンプリング</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\">\n            <md-input-container>\n                <label for=\"advertise-interval\">Advertise間隔 [ms]</label>\n                <input id=\"advertise-interval\" ng-model=\"request.advertise\" type=\"number\" aria-label=\"advertise\"\n                       min=\"100\" max=\"10000\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\">\n            <md-slider class=\"slider mb-0 mt-2\" ng-model=\"request.advertise\" aria-label=\"advertise\" min=\"100\"\n                max=\"10000\" step=\"100\" ng-disabled=\"!canSettings\">\n            </md-slider>\n        </div>\n        <div class=\"col-6\" ng-if=\"request.readMode != 1 && device.sensorType != 296\">\n            <md-input-container>\n                <label for=\"uplink-interval\">Uplink間隔 [sec]</label>\n                <input id=\"uplink-interval\" ng-model=\"request.uplink\" type=\"number\"\n                       aria-label=\"uplink\" min=\"{{uplinkMin}}\" max=\"86400\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"request.readMode != 1 && device.sensorType != 296\">\n            <md-slider class=\"slider mb-0 mt-2\" ng-model=\"request.uplink\" aria-label=\"uplink\" min=\"{{uplinkMin}}\"\n                max=\"86400\" step=\"1\" ng-disabled=\"!canSettings\">\n            </md-slider>\n        </div>\n        <div class=\"col-12\" ng-if=\"device.sensorType == 296\">\n            <md-input-container>\n                <span>死活監視</span>\n                <div class=\"float-end\">\n                    <md-switch class=\"mt-0\" ng-model=\"request.alive\" ng-checked=\"request.alive\" aria-label=\"alive\"\n                        ng-disabled=\"!canSettings\">\n                    </md-switch>\n                </div>\n            </md-input-container>\n        </div>\n        <!-- <div class=\"col-6\" ng-if=\"device.sensorType == 257\">\n            <md-input-container>\n                <label for=\"chattering\">チャタリング時間 [ms]</label>\n                <input id=\"chattering\" ng-model=\"request.chattering\" type=\"number\" aria-label=\"chattering\"\n                min=\"0\" max=\"1000\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"device.sensorType == 257\">\n            <md-slider class=\"slider mb-0 mt-2\" ng-model=\"request.chattering\" aria-label=\"chattering\" min=\"0\" max=\"1000\"\n                step=\"1\" ng-disabled=\"!canSettings\">\n            </md-slider>\n        </div> -->\n        <div class=\"col-6\" ng-if=\"isShowNormalHysteresis(0)\">\n            <md-input-container>\n                <label for=\"hysteresisHigh0\">ヒステリシス High {{device.channels[0].channel}}[{{device.channels[0].unit}}]</label>\n                <input id=\"hysteresisHigh0\" ng-model=\"request.hysteresis[0].high\" type=\"number\" aria-label=\"hysteresisHigh00\"\n                       min=\"{{request.hysteresis[0].min}}\" max=\"{{request.hysteresis[0].max}}\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"isShowNormalHysteresis(0)\">\n            <md-input-container>\n                <label for=\"hysteresisLow0\">ヒステリシス Low {{device.channels[0].channel}}[{{device.channels[0].unit}}]</label>\n                <input id=\"hysteresisLow0\" ng-model=\"request.hysteresis[0].low\" type=\"number\" aria-label=\"hysteresisLow00\"\n                       min=\"{{request.hysteresis[0].min}}\" max=\"{{request.hysteresis[0].max}}\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"isShowNormalHysteresis(1)\">\n            <md-input-container>\n                <label for=\"hysteresisHigh1\">ヒステリシス High {{device.channels[1].channel}}[{{device.channels[1].unit}}]</label>\n                <input id=\"hysteresisHigh1\" ng-model=\"request.hysteresis[1].high\" type=\"number\" aria-label=\"hysteresisHigh10\"\n                       min=\"{{request.hysteresis[1].min}}\" max=\"{{request.hysteresis[1].max}}\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-6\" ng-if=\"isShowNormalHysteresis(1)\">\n            <md-input-container>\n                <label for=\"hysteresisLow1\">ヒステリシス Low {{device.channels[1].channel}}[{{device.channels[1].unit}}]</label>\n                <input id=\"hysteresisLow1\" ng-model=\"request.hysteresis[1].low\" type=\"number\" aria-label=\"hysteresisLow10\"\n                       min=\"{{request.hysteresis[1].min}}\" max=\"{{request.hysteresis[1].max}}\" ng-disabled=\"!canSettings\" required>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\" ng-if=\"isShowAccHysteresis()\">\n            <md-input-container class=\"d-block\">\n                <label>ヒステリシス High</label>\n                <md-select ng-model=\"request.hysteresis[0].high\" ng-disabled=\"!canSettings\">\n                    <md-option value=\"0\">±0.5G</md-option>\n                    <md-option value=\"1\">±1.0G</md-option>\n                    <md-option value=\"2\">±1.5G</md-option>\n                    <md-option value=\"3\">±2.0G</md-option>\n                    <md-option value=\"4\">±2.5G</md-option>\n                    <md-option value=\"5\">±3.0G</md-option>\n                    <md-option value=\"6\">±3.5G</md-option>\n                    <md-option value=\"7\">±4.0G</md-option>\n                    <md-option value=\"8\">±4.5G</md-option>\n                    <md-option value=\"9\">±5.0G</md-option>\n                    <md-option value=\"10\">±5.5G</md-option>\n                    <md-option value=\"11\">±6.0G</md-option>\n                    <md-option value=\"12\">±6.5G</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\" ng-if=\"isShowAccHysteresis()\">\n            <md-input-container class=\"d-block\">\n                <label>ヒステリシス Low</label>\n                <md-select ng-model=\"request.hysteresis[0].low\" ng-disabled=\"!canSettings\">\n                    <md-option value=\"0\">±0.5G</md-option>\n                    <md-option value=\"1\">±1.0G</md-option>\n                    <md-option value=\"2\">±1.5G</md-option>\n                    <md-option value=\"3\">±2.0G</md-option>\n                    <md-option value=\"4\">±2.5G</md-option>\n                    <md-option value=\"5\">±3.0G</md-option>\n                    <md-option value=\"6\">±3.5G</md-option>\n                    <md-option value=\"7\">±4.0G</md-option>\n                    <md-option value=\"8\">±4.5G</md-option>\n                    <md-option value=\"9\">±5.0G</md-option>\n                    <md-option value=\"10\">±5.5G</md-option>\n                    <md-option value=\"11\">±6.0G</md-option>\n                    <md-option value=\"12\">±6.5G</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div class=\"col-12\" ng-if=\"request.readMode == 1 || request.readMode == 2\">\n            <md-input-container class=\"d-block\">\n                <label>サンプリング周期 [ms]</label>\n                <md-select ng-model=\"request.sampling\" ng-disabled=\"!canSettings\">\n                    <md-option value=\"0\">1000</md-option>\n                    <md-option value=\"1\" ng-if=\"isShowSamplingValue(1)\">500</md-option>\n                    <md-option value=\"2\" ng-if=\"isShowSamplingValue(2)\">200</md-option>\n                    <md-option value=\"3\" ng-if=\"isShowSamplingValue(3)\">100</md-option>\n                    <md-option value=\"4\" ng-if=\"isShowSamplingValue(4)\">50</md-option>\n                    <md-option value=\"5\" ng-if=\"isShowSamplingValue(5)\">10</md-option>\n                </md-select>\n            </md-input-container>\n        </div>\n        <div>\n            <md-input-container class=\"bottom-left\">\n                <md-button class=\"btn-template\" ng-click=\"reqestParams()\" aria-label=\"sync\" ng-disabled=\"busy\">\n                    設定取得\n                    <md-tooltip>モジュール設定を取得します</md-tooltip>\n                </md-button>\n            </md-input-container>\n            <md-input-container class=\"bottom-right\">\n                <md-button class=\"btn-template\" ng-click=\"sendParams()\" aria-label=\"update\"\n                    ng-disabled=\"!canSettings || disabled || module.$invalid\">\n                    設定更新\n                    <md-tooltip>モジュール設定を更新します</md-tooltip>\n                </md-button>\n            </md-input-container>\n        </div>\n        <hr class=\"mb-0\">\n    </div>\n</form>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div class=\"justify-content-between align-items-baseline\">\n        <span>アップデート</span>\n        <div>\n            <div>\n                <div>\n                    <md-button type=\"button\" ng-disabled=\"updating || busy\" ng-click=\"donwloadUpdateFile()\">\n                        <ui-icon icon=\"mi-download\"></ui-icon>\n                        <md-tooltip>モジュールのアップデートファイルをインターネット経由で取得します</md-tooltip>\n                    </md-button>\n                </div>\n                <div class=\"mt-2\">\n                    <md-button id=\"fileSelect\" type=\"button\" ng-disabled=\"updating\">\n                        <!-- 参照... -->\n                        <ui-icon icon=\"mi-folder_open\"></ui-icon>\n                        <md-tooltip>モジュールのアップデートファイルを選択します</md-tooltip>\n                    </md-button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row align-items-baseline\">\n        <div class=\"col-10 text-truncate\">\n            {{ uploadFileName }}\n            <md-tooltip ng-if=\"uploadFileName\">{{ uploadFileName }}</md-tooltip>\n        </div>\n        <div class=\"col-2 pe-0 text-end\">\n            <md-button ng-click=\"startSensorFirmwareUpdate()\" ng-disabled=\"updateDisabled || busy\"\n                aria-label=\"startFirmwareUpdate\">\n                <ui-icon icon=\"mi-file_upload\"></ui-icon>\n            </md-button>\n            <md-tooltip>モジュールのファームウェアアップデートを実行します</md-tooltip>\n        </div>\n        <div class=\"col-12\" ng-if=\"updating\">\n            <progress ng-value=\"progress\" max=\"100\" class=\"w-75\"></progress>\n        </div>\n    </div>\n</div>\n<input type=\"file\" id=\"uploadFile\" name=\"upload-file\" accept=\".bin\" class=\"d-none\" />\n<script>\n    (function(scope) {\n        scope.busy = '';\n        scope.canSettings = false;\n        scope.uplink = null;\n        scope.timeout = 0;\n        scope.device = null;\n        scope.uplinkMin = 5;\n        scope.disabled = true;\n        scope.updateDisabled = true;\n        scope.updating = false;\n        scope.dfuSize = 0;\n        scope.dfuIndex = 0;\n        scope.progress = 0;\n        scope.version = '';\n        scope.request = {\n            timeZone: null,\n            bleMode: null,\n            txPower: null,\n            readMode: null,\n            uplink: null,\n            advertise: null,\n            sampling: null,\n            hysteresis: [],\n        };\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            switch (msg.topic) {\n                case 'detail':\n                    scope.uplink = null;\n                    scope.device = msg.payload;\n                    break;\n                case 'parameter-request':\n                    if (scope.busy === 'parameter-request') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        if (msg.payload.deviceNumber !== scope.device.deviceNumber) {\n                            scope.uplink = null;\n                            break;\n                        }\n                        if (msg.payload.sensorType !== scope.device.sensorType) {\n                            scope.uplink = null;\n                            break;\n                        }\n                        scope.uplink = msg.payload;\n                        scope.version = scope.uplink.firmwareVersion;\n                        scope.request.timeZone = scope.uplink.timeZone;\n                        scope.request.bleMode = scope.uplink.bleMode;\n                        scope.request.txPower = scope.uplink.txPower;\n                        scope.request.readMode = scope.uplink.readMode;\n                        scope.request.uplink = scope.uplink.uplink;\n                        scope.request.alive = scope.uplink.alive;\n                        scope.request.advertise = scope.uplink.advertise;\n                        scope.request.sampling = scope.uplink.sampling;\n                        scope.request.hysteresis = scope.uplink.hysteresis;\n                        scope.canSettings = true;\n                        scope.disabled = false;\n                        scope.changeReadMode();\n                        scope.send({ topic: 'finish' });\n                    }\n                    break;\n                case 'parameter-setting':\n                    if (scope.busy === 'parameter-setting') {\n                        // scope.canSettings = true;\n                        scope.timeout = 0;\n                        scope.busy = 'value';\n                        scope.send({ topic: 'finish', payload: getErrorText(msg.payload) });\n                        setTimeout(() => {\n                            if (scope.busy === 'value'){\n                                scope.canSettings = true;\n                                scope.busy = '';\n                            }\n                        }, 5000);\n                    }\n                    break;\n                case 'dfu-start':\n                    if (scope.busy === 'dfu-start') {\n                        if (msg.payload.result === 0) {\n                            scope.timeout = moment().valueOf();\n                            scope.busy = 'dfu-data';\n                            scope.send({ \n                                topic: 'dfu-data', \n                                payload: { ...scope.device, index: scope.dfuIndex },\n                                timeout: scope.timeout\n                            });\n                        } else {\n                            scope.timeout = 0;\n                            scope.updating = false;\n                            scope.updateDisabled = false;\n                            scope.busy = '';\n                            scope.send({ topic: 'finish', payload: 'アップデートに失敗しました' });\n                        }\n                    }\n                    break;\n                case 'dfu-data':\n                    if (scope.busy === 'dfu-data') {\n                        if (msg.payload.result === 0) {\n                            scope.dfuIndex += 1;\n                            scope.progress = (scope.dfuIndex * 238 * 100) / (scope.dfuSize + 4);\n                            if (scope.dfuIndex * 238 >= scope.dfuSize + 4) {\n                                scope.timeout = 0;\n                                scope.updating = false;\n                                scope.updateDisabled = false;\n                                scope.busy = '';\n                                scope.send({ topic: 'finish', payload: 'アップデートに成功しました' });\n                            } else {\n                                scope.timeout = moment().valueOf();\n                                scope.send({ \n                                    topic: 'dfu-data', \n                                    payload: { ...scope.device, index: scope.dfuIndex },\n                                    timeout: scope.timeout\n                                });\n                            }\n                        } else {\n                            scope.timeout = 0;\n                            scope.updating = false;\n                            scope.updateDisabled = false;\n                            scope.busy = '';\n                            scope.send({ topic: 'finish', payload: 'アップデートに失敗しました' });\n                        }\n                    }\n                    break;\n                case 'dfu-not-required':\n                    if (scope.busy === 'fetch-dfu-file') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.send({ topic: 'finish', payload: 'モジュールは最新バージョンです' });\n                    }\n                    break;\n                case 'dfu-required':\n                    if (scope.busy === 'fetch-dfu-file') {\n                        scope.timeout = 0;\n                        scope.busy = '';\n                        scope.uploadFileName = `latest-v${msg.newVersion}.bin`;\n                        scope.updateDisabled = false;\n                        scope.dfuSize = msg.payload;\n                    }\n                    break;\n                case 'timeout':\n                    if (scope.timeout === msg.timeout) {\n                        if (scope.busy.startsWith('dfu')) {\n                            scope.updateDisabled = false;\n                            scope.updating = false;\n                        } else if (scope.busy === 'parameter-request') {\n                            scope.canSettings = false;\n                        } else if (scope.busy === 'parameter-setting') {\n                            scope.canSettings = true;\n                        }\n                        scope.busy = '';\n                        scope.timeout = 0;\n                        scope.send({ topic: 'finish', payload: '通信がタイムアウトしました' });\n                    }\n                    break;\n                case 'busy':\n                    scope.busy = msg.payload;\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        scope.reqestParams = function() {\n            scope.busy = 'parameter-request';\n            scope.canSettings = false;\n            scope.timeout = moment().valueOf();\n            const payload = { ...scope.device };\n            scope.send({ \n                topic: 'parameter-request', \n                payload, \n                timeout: scope.timeout\n            });\n        };\n\n        scope.sendParams = function() {\n            scope.busy = 'parameter-setting';\n            scope.canSettings = false;\n            scope.timeout = moment().valueOf();\n            const payload = {\n                ...scope.device,\n                ...scope.request\n            };\n            scope.send({ \n                topic: 'parameter-setting', \n                payload, \n                timeout: scope.timeout \n            });\n        };\n\n        scope.isShowSamplingValue = function(value) {\n            if (!scope.device) {\n                return false;\n            }\n            switch (scope.device.sensorType) {\n                case 259: // ADC\n                case 261: // 熱電対\n                case 263: // 差圧\n                case 264: // 照度\n                case 289: // 照度(JIG)\n                case 291: // 温湿度(JIG)\n                case 292: // 気圧(JIG)\n                    return value < 2;\n                case 262: // 加速度\n                    return value < 5;\n                case 290: // 加速度(JIG)\n                    return value < 3;\n                case 257: // 接点入力\n                case 258: // 接点出力\n                case 260: // 測距\n                case 269: // 接点出力(JIG)\n                    return false;\n                case 293: // 測距(JIG)\n                    return value < 1;\n                default:\n                    return false;\n            }\n        };\n\n        scope.isShowNormalHysteresis = function(index) {\n            return scope.request.readMode == 1 &&\n                scope.request.hysteresis[index] && \n                scope.device.sensorType != 262 && scope.device.sensorType != 290;\n        }\n\n        scope.isShowAccHysteresis = function() {\n            return scope.request.readMode == 1 &&\n                scope.request.hysteresis[0] && \n                (scope.device.sensorType == 262 || scope.device.sensorType == 290);\n        };\n\n        scope.changeReadMode = function() {\n            if (scope.request.readMode == 0) {\n                if (scope.device.sensorType <= 264) {\n                    // BravePI\n                    if (scope.device.sensorType == 260) {\n                        scope.uplinkMin = 2;\n                    } else if (scope.device.sensorType == 262) {\n                        scope.uplinkMin = 5;\n                    } else {\n                        scope.uplinkMin = 1;\n                    }\n                } else if (scope.device.sensorType < 65536) {\n                    // BraveJIG\n                    scope.uplinkMin = 5;\n                }\n            } else if (scope.request.readMode == 2) {\n                scope.request.uplink = Math.max(60, scope.request.uplink);\n                scope.uplinkMin = 60;\n            }\n        };\n\n        scope.startSensorFirmwareUpdate = function() {\n            scope.busy = 'dfu-start';\n            scope.progress = 0;\n            scope.updating = true;\n            scope.updateDisabled = true;\n            scope.dfuIndex = 0;\n            scope.timeout = moment().valueOf();\n            const payload = {...scope.device};\n            const file = $('input[name=upload-file]').prop('files')[0];\n            if (file) {\n                payload.data = file;\n                payload.length = file.size;\n                scope.dfuSize = file.size;\n            }\n            scope.send({\n                topic: 'dfu-start',\n                timeout: scope.timeout,\n                payload,\n            });\n        };  \n\n        scope.donwloadUpdateFile = function() {\n            scope.uploadFileName = '';\n            scope.timeout = moment().valueOf();\n            scope.busy = 'fetch-dfu-file';\n            scope.send({\n                topic: 'fetch-dfu-file',\n                timeout: scope.timeout,\n                version: scope.version,\n                delay: 10000,\n                payload: {...scope.device}\n            });\n        };\n\n        function getErrorText(payload) {\n            switch (payload.result) {\n                case 0:\n                    return '設定の更新に成功しました';\n                case 1:\n                    return 'センサーIDが不正です';\n                case 2:\n                    return '未サポートのCMDです';\n                case 3:\n                    return '設定値範囲外です';\n                case 4:\n                    return 'モジュールとの接続に失敗しました';\n                case 5:\n                    return '通信がタイムアウトしました';\n                case 7:\n                    return '対象のデバイスが存在しません';\n                case 8:\n                    return 'Mainボード BUSY';\n                case 9:\n                    return 'トランスミッター BUSY';\n                default:\n                    throw new Error();\n            }\n        }\n\n        $(() => {\n            $('#fileSelect').on('click', () => {\n                $('#uploadFile').click();\n            });\n            $('#uploadFile').on('change', (e) => {\n                const file = $(e.target).prop('files')[0];\n                scope.uploadFileName = file.name;\n                scope.updateDisabled = false;\n            });\n        });\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "6cce31a5019fbf24"
            ]
        ]
    },
    {
        "id": "6cce31a5019fbf24",
        "type": "switch",
        "z": "ecf79cf3748850a8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "parameter-request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "parameter-setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dfu-start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dfu-data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "finish",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "return",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fetch-dfu-file",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 610,
        "y": 740,
        "wires": [
            [
                "cbc28cd4d3066e7a",
                "6572dc8ae79100db"
            ],
            [
                "21e38c3c7f52b2fa",
                "cbc28cd4d3066e7a"
            ],
            [
                "5b971259a3d3370a",
                "cbc28cd4d3066e7a"
            ],
            [
                "cbc28cd4d3066e7a",
                "439a03b398ef04a0"
            ],
            [
                "929c819c1b7cd5b1",
                "b0a6a6514db60433"
            ],
            [],
            [],
            [
                "5cb70758500698a9"
            ],
            [
                "8b778423623f6280",
                "cbc28cd4d3066e7a"
            ]
        ]
    },
    {
        "id": "5cb70758500698a9",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "センサー一覧表示",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"モジュール_センサー情報\",\"モジュール_モジュール設定\"],\"show\":[\"モジュール_BraveJIG_モジュール\"],\"focus\":true}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "dfu",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 820,
        "wires": [
            [
                "abfad8f5461518aa",
                "33942d194e89a530"
            ]
        ]
    },
    {
        "id": "39db5ae60c751a92",
        "type": "ui_template",
        "z": "ecf79cf3748850a8",
        "group": "d52b337d128e4169",
        "name": "センサー情報",
        "order": 1,
        "width": "9",
        "height": "14",
        "format": "<div class=\"group-header\">\n    <p>センサー情報</p>\n</div>\n<div class=\"top-right\">\n    <md-button ng-click=\"instantUplink()\" aria-label=\"instant\" ng-disabled=\"!canRequest\">\n        <ui-icon icon=\"mi-sync\"></ui-icon>\n    </md-button>\n    <md-tooltip>センサー値の即時取得要求を送信します</md-tooltip>\n</div>\n<div class=\"row table-row-5-7 table-row m-2\">\n    <div>センサー種別</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div>デバイス名</div>\n    <div>{{ device.deviceName }}</div>\n    <div>通信</div>\n    <div>{{ device.transfer }}</div>\n    <div>デバイスID</div>\n    <div>{{ device.key }}</div>\n    <div>バッテリー</div>\n    <div>{{ device.batteryText }}</div>\n    <div>RSSI</div>\n    <div>{{ device.rssiText }}</div>\n    <div>{{ device.sensorTypeText }}</div>\n    <div style=\"white-space: pre-wrap\">{{ device.received ? device.text : '--' }}</div>\n    <div ng-if=\"device.sensorType !== 258 && device.sensorType !== 296\">カウンター</div>\n    <div ng-if=\"device.sensorType !== 258 && device.sensorType !== 296\" style=\"white-space: pre-wrap\">{{ countText }}</div>\n    <div>受信時刻</div>\n    <div>{{device.received ? (device.time | date: \"yyyy-MM-dd HH:mm:ss\") : '--'}}</div>\n</div>\n<script>\n    (function(scope) {\n        scope.canRequest = true;\n        scope.timeout = 0;\n        scope.$watch('msg', (msg) => {\n            if (msg == null) {\n                return;\n            }\n            if (msg.topic === 'detail' || (scope.device && scope.device.deviceName === msg.payload.deviceName)) {\n                scope.device = msg.payload;\n                scope.countText = msg.payload.sensors.map(x => x.channel ? `${x.channel} : ${x.count}` : x.count).join('\\n');\n                scope.device.batteryText = scope.device.received ? `${scope.device.battery} [%]` : '--';\n                scope.device.rssiText = (scope.device.received && scope.device.rssi < 0) ? `${scope.device.rssi} [dBm]` : '--';\n                scope.canRequest = true;\n                scope.timeout = 0;\n                //scope.send({ topic: 'busy' });\n            } else if (msg.topic === 'busy') {\n                if (msg.payload) {\n                    scope.canRequest = false;\n                } else {\n                    scope.canRequest = true;\n                }\n            } else if (msg.topic === 'timeout') {\n                if (scope.timeout === msg.timeout) {\n                    scope.canRequest = true;\n                    scope.timeout = 0;\n                    // scope.send({ topic: 'busy' });\n                }\n            }\n        });\n\n        scope.instantUplink = function() {\n            scope.timeout = moment().valueOf();\n            scope.canRequest = false;\n            scope.send({\n                topic: 'instant', \n                payload: scope.device,\n                timeout: scope.timeout,\n            });\n        };\n\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "31b244089a0c5bda"
            ]
        ]
    },
    {
        "id": "bd65ac2b738c17d1",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "Sensor Data Response",
        "links": [
            "71ed9cce9eab05ba",
            "f93ad3863a0e95a2"
        ],
        "x": 95,
        "y": 460,
        "wires": [
            [
                "39db5ae60c751a92",
                "49d895ade4ca1c5a"
            ]
        ]
    },
    {
        "id": "cbc28cd4d3066e7a",
        "type": "delay",
        "z": "ecf79cf3748850a8",
        "name": "",
        "pauseType": "delayv",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 520,
        "wires": [
            [
                "8a90f78b73f60d24"
            ]
        ]
    },
    {
        "id": "8a90f78b73f60d24",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "タイムアウト処理",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeout",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 520,
        "wires": [
            [
                "94e67da7d83e2569"
            ]
        ]
    },
    {
        "id": "6572dc8ae79100db",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "パラメータ要求",
        "func": "if (msg.payload && msg.payload.dest) {\n    flow.set('busy', 'parameter-request');\n    const protocol = 0x01;\n    const type = 0x00;\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const deviceNumbers = Buffer.from([...Array(8)]\n        .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n        .map(x => parseInt(x, 16)))\n        .reverse();\n    const sensorType = Buffer.from(new Uint16Array([0]).buffer);\n    const command = 0x0D;\n    const order = Buffer.from(new Uint16Array([0xFFFF]).buffer);\n    const data = [0x00];\n    const length = Buffer.from(new Uint16Array([data.length]).buffer);\n    \n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DwlReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.from([\n        protocol,\n        type,\n        ...length,\n        ...unixTime,\n        ...deviceNumbers,\n        ...sensorType,\n        command,\n        ...order,\n        ...data\n    ]);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 820,
        "y": 560,
        "wires": [
            [
                "1104056b53591903"
            ]
        ]
    },
    {
        "id": "4873f01ef09a3ba1",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "Jig Info",
        "links": [
            "81d738d84e859b92"
        ],
        "x": 95,
        "y": 620,
        "wires": [
            [
                "e8bf5a3aafa9326f"
            ]
        ]
    },
    {
        "id": "4011891387ffaebc",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "パラメータ受信",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\nconst sensorType = sensorTypes[msg.payload.sensorType];\nif (sensorType) {\n    msg.topic = 'parameter-request';\n    msg.payload = {\n        ...msg.payload,\n        ...sensorType,\n    };\n    msg.payload.advertiseInterval = msg.payload.advertise;\n    msg.payload.uplinkInterval = msg.payload.uplink;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 860,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "55a0ad498cb1cf3c",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "Sensor Parameter",
        "links": [
            "39f671880ef7e48b"
        ],
        "x": 95,
        "y": 860,
        "wires": [
            [
                "4011891387ffaebc"
            ]
        ]
    },
    {
        "id": "21e38c3c7f52b2fa",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "パラメータ設定",
        "func": "if (msg.payload && msg.payload.dest) {\n    flow.set('busy', 'parameter-setting');\n    const protocol = 0x01;\n    const type = 0x00;\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const deviceNumbers = Buffer.from([...Array(8)]\n        .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n        .map(x => parseInt(x, 16)))\n        .reverse();\n    const sensorType = [0x00, 0x00];\n    const command = 0x05;\n    const order = [0xFF, 0xFF];\n    const sensorId = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\n    const timeZone = Buffer.from(new Uint8Array([msg.payload.timeZone]).buffer);\n    // const timeZone = Buffer.from(new Uint8Array([1]).buffer);\n    const bleMode = Buffer.from(new Uint8Array([msg.payload.bleMode]).buffer);\n    const txPower = Buffer.from(new Uint8Array([msg.payload.txPower]).buffer);\n    const extra = (()=> {\n        switch (msg.payload.sensorType) {\n            case 289: // 照度(JIG)\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.readMode]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.sampling]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[0].high]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[0].low]).buffer),\n                ];\n            case 290: // 加速度(JIG)\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.readMode]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.sampling]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.hysteresis[0].high]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.hysteresis[0].low]).buffer),\n                ];\n            case 291: // 温湿度(JIG)\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.readMode]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.sampling]).buffer),\n                    Buffer.from(new Int32Array([msg.payload.hysteresis[0].high]).buffer),\n                    Buffer.from(new Int32Array([msg.payload.hysteresis[0].low]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[1].high]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[1].low]).buffer),\n                ];\n            case 292: // 気圧(JIG)\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.readMode]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.sampling]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[0].high]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.hysteresis[0].low]).buffer),\n                ];\n            case 293: // 測距(JIG)\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint32Array([msg.payload.uplink]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.readMode]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.sampling]).buffer),\n                    Buffer.from(new Uint16Array([msg.payload.hysteresis[0].high]).buffer),\n                    Buffer.from(new Uint16Array([msg.payload.hysteresis[0].low]).buffer),\n                ];\n            case 296:\n                return [\n                    Buffer.from(new Uint16Array([msg.payload.advertise]).buffer),\n                    Buffer.from(new Uint8Array([msg.payload.alive]).buffer),\n                ];\n            default:\n                return [];\n        }\n    })();\n    const data = Buffer.concat([\n        sensorId,\n        timeZone,\n        bleMode,\n        txPower,\n        ...extra\n    ]);\n    const length = [data.length, 0];\n    const header = Buffer.from([\n        protocol,\n        type,\n        ...length,\n        ...unixTime,\n        ...deviceNumbers,\n        ...sensorType,\n        command,\n        ...order\n    ]);\n\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DwlReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.concat([header, data]);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 820,
        "y": 600,
        "wires": [
            [
                "1104056b53591903"
            ]
        ]
    },
    {
        "id": "1104056b53591903",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "Send Command",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 965,
        "y": 600,
        "wires": []
    },
    {
        "id": "abfad8f5461518aa",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "link out 59",
        "mode": "link",
        "links": [
            "e7ba768d9aaf0d9b"
        ],
        "x": 975,
        "y": 840,
        "wires": []
    },
    {
        "id": "60cdc54a00a44139",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "link out 60",
        "mode": "link",
        "links": [
            "95a8c71a24b8ee77"
        ],
        "x": 655,
        "y": 300,
        "wires": []
    },
    {
        "id": "33942d194e89a530",
        "type": "ui_ui_control",
        "z": "ecf79cf3748850a8",
        "name": "",
        "events": "all",
        "x": 1020,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a5a95ac674ea0cef",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "in",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "dfu",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "14a2b7e16e3a497e",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "即時Uplink要求",
        "func": "if (msg.payload && msg.payload.dest) {\n    flow.set('busy', 'instant-uplink');    \n    const protocol = 0x01;\n    const type = 0x00;\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const deviceNumbers = Buffer.from([...Array(8)]\n        .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n        .map(x => parseInt(x, 16)))\n        .reverse();\n    const sensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\n    const command = 0x00;\n    const order = [0xFF, 0xFF];\n    const length = [0x00, 0x00];\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DwlReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.from([\n        protocol,\n        type,\n        ...length,\n        ...unixTime,\n        ...deviceNumbers,\n        ...sensorType,\n        command,\n        ...order,\n    ]);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "33aa78664a5052b0"
            ]
        ]
    },
    {
        "id": "33aa78664a5052b0",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "link out 63",
        "mode": "link",
        "links": [
            "6c3f0bb1a129e222"
        ],
        "x": 875,
        "y": 460,
        "wires": []
    },
    {
        "id": "e2f1f41da039d92a",
        "type": "delay",
        "z": "ecf79cf3748850a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "051df8c4e31f0907"
            ]
        ]
    },
    {
        "id": "051df8c4e31f0907",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "タイムアウト処理",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeout",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 400,
        "wires": [
            [
                "39db5ae60c751a92"
            ]
        ]
    },
    {
        "id": "95a8c71a24b8ee77",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "link in 47",
        "links": [
            "60cdc54a00a44139",
            "94e67da7d83e2569"
        ],
        "x": 405,
        "y": 540,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "94e67da7d83e2569",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "Timeout",
        "mode": "link",
        "links": [
            "95a8c71a24b8ee77"
        ],
        "x": 1125,
        "y": 520,
        "wires": []
    },
    {
        "id": "31b244089a0c5bda",
        "type": "switch",
        "z": "ecf79cf3748850a8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "instant",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "e2f1f41da039d92a",
                "14a2b7e16e3a497e"
            ]
        ]
    },
    {
        "id": "929c819c1b7cd5b1",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e8bf5a3aafa9326f",
        "type": "switch",
        "z": "ecf79cf3748850a8",
        "name": "",
        "property": "payload.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "13",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "18",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 190,
        "y": 620,
        "wires": [
            [
                "97ba366886b282a3"
            ],
            [],
            [
                "d76f1285e7bef351"
            ]
        ]
    },
    {
        "id": "97ba366886b282a3",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "parameter-setting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "b0a6a6514db60433",
        "type": "switch",
        "z": "ecf79cf3748850a8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 760,
        "wires": [
            [
                "023a7a9532745fad"
            ]
        ]
    },
    {
        "id": "989e12bcf70db139",
        "type": "ui_toast",
        "z": "ecf79cf3748850a8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "023a7a9532745fad",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "通知",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 760,
        "wires": [
            [
                "989e12bcf70db139"
            ]
        ]
    },
    {
        "id": "5b971259a3d3370a",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "DFUの開始",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    if (msg.payload.data) {\n        flow.set('dfu', {\n            data: Buffer.concat([\n                Buffer.from(new Uint32Array([msg.payload.length]).buffer),\n                msg.payload.data,\n            ]),\n            length: msg.payload.length,\n        });\n    }\n    const protocol = 0x01;\n    const type = 0x00;\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const deviceNumbers = Buffer.from([...Array(8)]\n        .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n        .map(x => parseInt(x, 16)))\n        .reverse();\n    const sensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\n    const order = [0x00, 0x00];\n    const command = 0x12;\n    const data = [0x00, 0x00];\n    const reserve = [...Array(236)].map(_ => 0xFF);\n    const length = Buffer.from(new Uint16Array([data.length + reserve.length]).buffer);\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DwlReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.from([\n        protocol,\n        type,\n        ...length,\n        ...unixTime,\n        ...deviceNumbers,\n        ...sensorType,\n        command,\n        ...order,\n        ...data,\n        ...reserve\n    ]);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 810,
        "y": 640,
        "wires": [
            [
                "1104056b53591903"
            ]
        ]
    },
    {
        "id": "d76f1285e7bef351",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "busy",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 660,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "439a03b398ef04a0",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "DFUの送信",
        "func": "if (flow.get('in')) {\n    flow.set('busy', msg.topic);\n    const dfu = flow.get('dfu');\n    const protocol = 0x01;\n    const type = 0x00;\n    const unixTime = Buffer.from(new Uint32Array([moment().unix()]).buffer);\n    const deviceNumbers = Buffer.from([...Array(8)]\n        .map((_, x) => msg.payload.deviceNumber.substring(x * 2, x * 2 + 2))\n        .map(x => parseInt(x, 16)))\n        .reverse();\n    const sensorType = Buffer.from(new Uint16Array([msg.payload.sensorType]).buffer);\n    const command = 0x12;\n    const begin = msg.payload.index * 238;\n    const end = begin + 238;\n    const data = dfu.data.subarray(begin, end);\n    const order = (() => {\n        if (end >= dfu.length + 4) {\n            return [0xFF, 0xFF];\n        } else {\n            return Buffer.from(new Uint16Array([msg.payload.index + 1]).buffer);\n        }\n    })();\n    const length = Buffer.from(new Uint16Array([data.length]).buffer);\n    if (msg.payload.dest.startsWith('/dev/ttyACM')) {\n        msg.topic = msg.payload.dest;\n    } else {\n        msg.topic = `DwlReq/${msg.payload.dest}`;\n    }\n    msg.payload = Buffer.from([\n        protocol,\n        type,\n        ...length,\n        ...unixTime,\n        ...deviceNumbers,\n        ...sensorType,\n        command,\n        ...order,\n        ...data\n    ]);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 810,
        "y": 680,
        "wires": [
            [
                "1104056b53591903"
            ]
        ]
    },
    {
        "id": "969a692942ccb0d8",
        "type": "comment",
        "z": "ecf79cf3748850a8",
        "name": "ダウンリンク",
        "info": "",
        "x": 110,
        "y": 560,
        "wires": []
    },
    {
        "id": "abf82f5fcc923e64",
        "type": "comment",
        "z": "ecf79cf3748850a8",
        "name": "センサー設定",
        "info": "",
        "x": 110,
        "y": 820,
        "wires": []
    },
    {
        "id": "0627aa8dc770bec6",
        "type": "comment",
        "z": "ecf79cf3748850a8",
        "name": "センサー値",
        "info": "",
        "x": 100,
        "y": 320,
        "wires": []
    },
    {
        "id": "7988108283654468",
        "type": "http request",
        "z": "ecf79cf3748850a8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 880,
        "wires": [
            [
                "7850f98c930aea8c"
            ]
        ]
    },
    {
        "id": "694b66a70d5950b3",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "最新バージョン",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "dfu-not-required",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 700,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "7ec7dda35e6338f6",
        "type": "change",
        "z": "ecf79cf3748850a8",
        "name": "not最新バージョン",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "dfu-required",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "7a8c0f17e095e6e5"
            ]
        ]
    },
    {
        "id": "8b778423623f6280",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "url",
        "func": "msg.sensorTypeFormat = ('000' + msg.payload.sensorType.toString(16)).slice(-4);\nmsg.url = `https://public-bucket.braveridge.io/bravejig/jig_sensor_fw/${msg.sensorTypeFormat}/0000/latest.txt`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 880,
        "wires": [
            [
                "7988108283654468"
            ]
        ]
    },
    {
        "id": "7850f98c930aea8c",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "バージョンチェック",
        "func": "if (msg.statusCode !== 200) {\n    return;\n}\nmsg.newVersion = `${msg.payload}`.trim();\nconst newVersion = msg.newVersion.split('.').map(v => parseInt(v));\nif (newVersion.includes(256)) {\n    // same\n    return [msg, null];\n}\nif (msg.version) {\n    const currentVersion = msg.version.split('.').map(v => parseInt(v));\n    if ((currentVersion[0] === newVersion[0]) &&\n        (currentVersion[1] === newVersion[1]) &&\n        (currentVersion[2] === newVersion[2])) {\n        // same\n        return [msg, null];\n    } else {\n        // fetch\n        return [null, msg];\n    }\n} else {\n    // fetch\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 880,
        "wires": [
            [
                "355822cc555e6ee3"
            ],
            [
                "d52a1435d0b28de0"
            ]
        ]
    },
    {
        "id": "f35cc646dab1591a",
        "type": "http request",
        "z": "ecf79cf3748850a8",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 920,
        "wires": [
            [
                "07dc758723d7197f"
            ]
        ]
    },
    {
        "id": "d52a1435d0b28de0",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "url",
        "func": "msg.url = `https://public-bucket.braveridge.io/bravejig/jig_sensor_fw/${msg.sensorTypeFormat}/0000/latest.bin`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 920,
        "wires": [
            [
                "f35cc646dab1591a"
            ]
        ]
    },
    {
        "id": "355822cc555e6ee3",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "4e8db1ccd6a0f039"
        ],
        "x": 1315,
        "y": 880,
        "wires": []
    },
    {
        "id": "4e8db1ccd6a0f039",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "link in 18",
        "links": [
            "355822cc555e6ee3"
        ],
        "x": 95,
        "y": 700,
        "wires": [
            [
                "694b66a70d5950b3"
            ]
        ]
    },
    {
        "id": "35ba1b400d92940e",
        "type": "link in",
        "z": "ecf79cf3748850a8",
        "name": "link in 19",
        "links": [
            "fae8e4048342a8d8"
        ],
        "x": 95,
        "y": 740,
        "wires": [
            [
                "7ec7dda35e6338f6"
            ]
        ]
    },
    {
        "id": "fae8e4048342a8d8",
        "type": "link out",
        "z": "ecf79cf3748850a8",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "35ba1b400d92940e"
        ],
        "x": 1315,
        "y": 920,
        "wires": []
    },
    {
        "id": "07dc758723d7197f",
        "type": "function",
        "z": "ecf79cf3748850a8",
        "name": "DFUファイル保持",
        "func": "if (msg.statusCode !== 200) {\n    return;\n}\nflow.set('dfu', {\n    data: Buffer.concat([\n        Buffer.from(new Uint32Array([msg.payload.length]).buffer),\n        msg.payload, \n    ]),\n    length: msg.payload.length,\n});\nmsg.payload = msg.payload.length;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 920,
        "wires": [
            [
                "fae8e4048342a8d8"
            ]
        ]
    },
    {
        "id": "4496509300b9436d",
        "type": "mqtt out",
        "z": "51957a5eab717266",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b75ec87a88fc7dab",
        "x": 730,
        "y": 740,
        "wires": []
    },
    {
        "id": "327ed067c128cf38",
        "type": "status",
        "z": "51957a5eab717266",
        "name": "",
        "scope": [
            "4496509300b9436d"
        ],
        "x": 160,
        "y": 760,
        "wires": [
            [
                "9f059634e9c7ad59"
            ]
        ]
    },
    {
        "id": "14ef82834d9a280a",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "disconnect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 740,
        "wires": [
            [
                "4496509300b9436d"
            ]
        ]
    },
    {
        "id": "1024c6642b51c439",
        "type": "inject",
        "z": "51957a5eab717266",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 930,
        "y": 740,
        "wires": [
            [
                "14ef82834d9a280a"
            ]
        ]
    },
    {
        "id": "4450d0dbcc472417",
        "type": "ui_template",
        "z": "51957a5eab717266",
        "group": "5c3749de7ef4793c",
        "name": "ブローカー",
        "order": 3,
        "width": "12",
        "height": "6",
        "format": "<div class=\"row ms-2 me-2 mt-0 mb-0\">\n    <div class=\"col-6\">\n        <div class=\"row table-row table-row-4-8\">\n            <div>ホスト</div>\n            <div class=\"text-truncate\">\n                {{payload.broker}}\n                <md-tooltip>{{payload.broker}}</md-tooltip>\n            </div>\n            <div>ポート</div>\n            <div>{{payload.port}}</div>\n            <div>ユーザー</div>\n            <div class=\"text-truncate\">\n                {{payload.username}}\n                <md-tooltip>{{payload.username}}</md-tooltip>\n            </div>\n            <div>ステータス</div>\n            <div>{{payload.statusText}}</div>\n        </div>\n    </div>\n    <div class=\"col-6\">\n        <div class=\"row mt-4 input-form\">\n            <div>\n                <md-input-container>\n                    <label for=\"broker\">ホスト</label>\n                    <input id=\"broker\" aria-label=\"broker\" type=\"text\" ng-required=\"true\" ng-model=\"broker.broker\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"port\">ポート</label>\n                    <input id=\"port\" aria-label=\"port\" type=\"number\" min=\"0\" max=\"65535\" ng-required=\"true\" ng-model=\"broker.port\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"username\">ユーザー</label>\n                    <input id=\"username\" aria-label=\"broker\" type=\"text\" ng-model=\"broker.username\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"password\">パスワード</label>\n                    <input id=\"password\" aria-label=\"broker\" type=\"password\" ng-model=\"broker.password\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-button ng-disabled=\"disabled\" aria-label=\"register\" ng-click=\"send({payload: broker})\"\n                    class=\"w-100 btn-height\">\n                    更新\n                </md-button>\n            </div>\n        </div>\n    </div>\n</div>\n<script>\n    (function (scope) {\n        scope.disabled = false;\n        scope.$watch('msg.payload', payload => {\n            if (payload) {\n                scope.payload = { ...payload };\n                scope.broker = payload;\n                if (scope.broker.status.text.endsWith('.connected')) {\n                    scope.payload.statusText = '接続';\n                } else if (scope.broker.status.text.endsWith('.connecting')) {\n                    scope.payload.statusText = '接続待ち';\n                } else {\n                    scope.payload.statusText = '切断';\n                }\n            }\n        });\n        scope.onChangeInput = function() {\n            scope.disabled = (!scope.broker.broker) || (scope.broker.port == null);\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 700,
        "wires": [
            [
                "459965892ff1eac1"
            ]
        ]
    },
    {
        "id": "af6774c70cac2c7c",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `mqtt_broker_id` AS mqttBrokerId,\n  `broker`,\n  `port`,\n  `username`,\n  `password`\nFROM\n  `mqtt_brokers`\nLIMIT\n  1;",
        "output": "str",
        "x": 320,
        "y": 600,
        "wires": [
            [
                "115ba8c37927d402"
            ]
        ]
    },
    {
        "id": "115ba8c37927d402",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "55a3e63c99614677"
            ]
        ]
    },
    {
        "id": "a5fc767245e7ec1c",
        "type": "inject",
        "z": "51957a5eab717266",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "af6774c70cac2c7c"
            ]
        ]
    },
    {
        "id": "6fded2d57099f120",
        "type": "status",
        "z": "51957a5eab717266",
        "name": "DB接続時に実行",
        "scope": [
            "115ba8c37927d402"
        ],
        "x": 140,
        "y": 560,
        "wires": [
            [
                "3a98fbc446a8e842"
            ]
        ]
    },
    {
        "id": "3a98fbc446a8e842",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 560,
        "wires": [
            [
                "af6774c70cac2c7c"
            ]
        ]
    },
    {
        "id": "55a3e63c99614677",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "broker",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "read",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "disconnect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 600,
        "wires": [
            [
                "3550250215c8f917",
                "41ed9a1a6ae155db"
            ]
        ]
    },
    {
        "id": "9f059634e9c7ad59",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 760,
        "wires": [
            [
                "3550250215c8f917"
            ]
        ]
    },
    {
        "id": "3550250215c8f917",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ブローカー管理",
        "func": "const broker = context.get('broker');\nswitch (msg.topic) {\n    case 'read':\n        context.set('broker', msg.broker);\n        return [null, msg];\n    case 'status':\n        if (broker) {\n            broker.status = msg.status;\n            return [{ payload: broker }, null];\n        }\n        break;\n    case 'get':\n        if (broker) {\n            return [{ payload: broker }, null];\n        }\n        break;\n    default:\n        break;\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 720,
        "wires": [
            [
                "c8b3eb623c615b13"
            ],
            [
                "4496509300b9436d"
            ]
        ]
    },
    {
        "id": "66b26558c48ec17b",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "51957a5eab717266",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "設定",
                "type": "str"
            }
        ],
        "x": 150,
        "y": 720,
        "wires": [
            [
                "433739c58f29a3b3"
            ],
            []
        ]
    },
    {
        "id": "433739c58f29a3b3",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "get",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 720,
        "wires": [
            [
                "3550250215c8f917"
            ]
        ]
    },
    {
        "id": "459965892ff1eac1",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `mqtt_brokers`\nSET\n  `broker` = :broker,\n  `port` = :port,\n  `username` = :username,\n  `password` = :password\nWHERE\n  `mqtt_broker_id` = :mqttBrokerId;",
        "output": "str",
        "x": 1120,
        "y": 700,
        "wires": [
            [
                "7bb16b50f4ceeb7d"
            ]
        ]
    },
    {
        "id": "5d63f4f0b7ec1321",
        "type": "link out",
        "z": "51957a5eab717266",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "e934ff1f371bba52"
        ],
        "x": 1385,
        "y": 700,
        "wires": []
    },
    {
        "id": "7bb16b50f4ceeb7d",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 1270,
        "y": 700,
        "wires": [
            [
                "5d63f4f0b7ec1321",
                "14ef82834d9a280a",
                "863ad44e29b94a28"
            ]
        ]
    },
    {
        "id": "e934ff1f371bba52",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Init MQTT Broker",
        "links": [
            "5d63f4f0b7ec1321",
            "7af6a27771cd284e"
        ],
        "x": 435,
        "y": 560,
        "wires": [
            [
                "af6774c70cac2c7c"
            ]
        ]
    },
    {
        "id": "ecb32f66e63d204c",
        "type": "status",
        "z": "51957a5eab717266",
        "name": "DB接続時に実行",
        "scope": [
            "115ba8c37927d402"
        ],
        "x": 140,
        "y": 60,
        "wires": [
            [
                "cad286f74283e367"
            ]
        ]
    },
    {
        "id": "cad286f74283e367",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 60,
        "wires": [
            [
                "7135f23509fbf501"
            ]
        ]
    },
    {
        "id": "c8de5ed94dd765c5",
        "type": "inject",
        "z": "51957a5eab717266",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "7135f23509fbf501"
            ]
        ]
    },
    {
        "id": "7135f23509fbf501",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `mqtt_topic_id` AS mqttTopicId,\n  `topic`,\n  `retain`,\n  `qos`\nFROM\n  `mqtt_topics`\nWHERE\n  `mqtt_broker_id` = 1;",
        "output": "str",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "e794aa099a636a5e"
            ]
        ]
    },
    {
        "id": "e794aa099a636a5e",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 470,
        "y": 100,
        "wires": [
            [
                "0da244fc36c5b8b6"
            ]
        ]
    },
    {
        "id": "9e0cbc48d932730d",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "トピック管理",
        "func": "const topics = global.get('mqttTopics') || [];\nswitch (msg.topic) {\n    case 'read':\n        global.set('mqttTopics', msg.payload);\n        return msg;\n    case 'get':\n        return { payload: topics };\n    default:\n        break;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "84e817a9cdc61516"
            ]
        ]
    },
    {
        "id": "0da244fc36c5b8b6",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "read",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 100,
        "wires": [
            [
                "9e0cbc48d932730d"
            ]
        ]
    },
    {
        "id": "84e817a9cdc61516",
        "type": "ui_template",
        "z": "51957a5eab717266",
        "group": "7745fceab518014a",
        "name": "トピックス",
        "order": 3,
        "width": "12",
        "height": "6",
        "format": "<div class=\"row ms-2 me-2 mt-3 mb-0\">\n    <div class=\"col-7\">\n        <table class=\"table align-middle\">\n            <tr>\n                <th>トピック</th>\n                <th class=\"w-10\">QoS</th>\n                <th class=\"w-20\">保持</th>\n                <th class=\"w-1\"></th>\n            </tr>\n            <tr ng-repeat=\"topic in msg.payload\">\n                <td class=\"text-truncate w-max-0\">{{topic.topic}}<md-tooltip>{{topic.topic}}</md-tooltip>\n                </td>\n                <td>{{topic.qos}}</td>\n                <td>{{topic.retain ? 'Yes' : 'No'}}</td>\n                <td>\n                    <md-button class=\"btn-template\" ng-click=\"send({payload: topic, topic: 'delete'})\"\n                        aria-label=\"delete\">\n                        <ui-icon icon=\"mi-delete\"></ui-icon>\n                    </md-button>\n                    <md-tooltip>トピックを削除します</md-tooltip>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"col-5\">\n        <div class=\"row mt-2 input-form\">\n            <div>\n                <md-input-container>\n                    <label for=\"topic\">トピック</label>\n                    <input id=\"topic\" aria-label=\"topic\" type=\"text\" ng-required=\"true\" ng-model=\"topic.topic\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"port\">QoS</label>\n                    <input id=\"port\" aria-label=\"port\" type=\"number\" min=\"0\" max=\"2\" ng-required=\"true\" ng-model=\"topic.qos\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <span>保持</span>\n                    <md-switch aria-label=\"retain\" ng-model=\"topic.retain\" class=\"d-inline-block float-end mt-0\"\n                        ng-checked=\"topic.retain\"></md-switch>\n                </md-input-container>\n            </div>\n        </div>\n        <div style=\"margin-top: -10px;\">\n            <md-button ng-disabled=\"disabled\" aria-label=\"register\" class=\"w-100 btn-height\"\n                ng-click=\"send({payload: topic, topic: 'add'})\">\n                追加\n            </md-button>\n        </div>\n    </div>\n</div>\n<script>\n    (function(scope) {\n        scope.topic = {\n            topic: '',\n            retain: 0,\n            qos: 0\n        };\n        scope.disabled = true;\n        scope.$watch('msg.payload', payload => {\n            if (payload) {\n                scope.topics = payload;\n            }\n        });\n        scope.onChangeInput = function() {\n            scope.disabled = (!scope.topic.topic) || (scope.topic.qos == null);\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "c7dfd287edaa8ac6"
            ]
        ]
    },
    {
        "id": "09f0577606881ead",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `mqtt_topics` (\n    `topic`,\n    `retain`,\n    `qos`,\n    `mqtt_broker_id`\n  )\nVALUES (\n  :topic,\n  :retain,\n  :qos,\n  1\n);",
        "output": "str",
        "x": 680,
        "y": 240,
        "wires": [
            [
                "76452f280e99859f"
            ]
        ]
    },
    {
        "id": "a00f6136c007245f",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 990,
        "y": 360,
        "wires": [
            [
                "b115517278c68879"
            ]
        ]
    },
    {
        "id": "b115517278c68879",
        "type": "link out",
        "z": "51957a5eab717266",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "54b15303cf8f8f76"
        ],
        "x": 1105,
        "y": 360,
        "wires": []
    },
    {
        "id": "54b15303cf8f8f76",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Init MQTT Topics",
        "links": [
            "7af6a27771cd284e",
            "84593e6f29527e9e",
            "b115517278c68879"
        ],
        "x": 435,
        "y": 60,
        "wires": [
            [
                "7135f23509fbf501"
            ]
        ]
    },
    {
        "id": "c7dfd287edaa8ac6",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "5362e9063f868167"
            ],
            [
                "b8e7469004909281"
            ]
        ]
    },
    {
        "id": "21cbf59acbcc6584",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DELETE FROM\n  `mqtt_topics`\nWHERE\n  `mqtt_topic_id` = :mqttTopicId;",
        "output": "str",
        "x": 840,
        "y": 360,
        "wires": [
            [
                "a00f6136c007245f"
            ]
        ]
    },
    {
        "id": "cde264271e419d75",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "51957a5eab717266",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "設定",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 160,
        "wires": [
            [
                "3446736b3f46e376"
            ],
            []
        ]
    },
    {
        "id": "3446736b3f46e376",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "get",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "9e0cbc48d932730d"
            ]
        ]
    },
    {
        "id": "c2a91d46e522404b",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Send MQTT",
        "links": [
            "41a0aaec675b2f30"
        ],
        "x": 75,
        "y": 460,
        "wires": [
            [
                "f42e083861e09865"
            ]
        ]
    },
    {
        "id": "f42e083861e09865",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "payload.mqttTopics",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 460,
        "wires": [
            [
                "485aea730a5848f2"
            ]
        ]
    },
    {
        "id": "485aea730a5848f2",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "送信フォーマット",
        "func": "for (const topic of msg.payload.mqttTopics) {\n    node.send({\n        ...topic,\n        payload: {\n            dateTime: moment(msg.payload.time).format('YYYY-MM-DD HH:mm:ss.SSS'),\n            deviceName: msg.payload.deviceName,\n            sensorType: msg.payload.sensorType,\n            count: msg.payload.count,\n            signal: msg.payload.signal,\n            value: msg.payload.value,\n            ...JSON.parse(msg.payload.extraMqtt || '{}')\n        }\n    });\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 350,
        "y": 460,
        "wires": [
            [
                "a2272de8cba2916c"
            ]
        ]
    },
    {
        "id": "a2272de8cba2916c",
        "type": "subflow:5c990f7436d9ded3",
        "z": "51957a5eab717266",
        "name": "",
        "x": 530,
        "y": 460,
        "wires": [
            [
                "f3c5eaad3389761b",
                "522ac0957dee51da"
            ]
        ]
    },
    {
        "id": "f3c5eaad3389761b",
        "type": "mqtt out",
        "z": "51957a5eab717266",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b75ec87a88fc7dab",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "2996a72aa07d22ad",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 1290,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "863ad44e29b94a28",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MQTTブローカーを更新しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 640,
        "wires": [
            [
                "2996a72aa07d22ad"
            ]
        ]
    },
    {
        "id": "d3812da770314585",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "251c1daa3f2c6fd2"
            ]
        ]
    },
    {
        "id": "b8e7469004909281",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.mqttTopic = msg.payload;\nmsg.topic = '確認';\nmsg.payload = `MQTTトピック：${msg.payload.topic}を削除しますか？`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "3209c721d2618df9"
            ]
        ]
    },
    {
        "id": "3209c721d2618df9",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 670,
        "y": 300,
        "wires": [
            [
                "d3812da770314585"
            ]
        ]
    },
    {
        "id": "251c1daa3f2c6fd2",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "mqttTopic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 360,
        "wires": [
            [
                "21cbf59acbcc6584"
            ]
        ]
    },
    {
        "id": "76452f280e99859f",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 850,
        "y": 240,
        "wires": [
            [
                "0b77857a0dda3f75",
                "84593e6f29527e9e"
            ]
        ]
    },
    {
        "id": "5362e9063f868167",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mqttTopic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 240,
        "wires": [
            [
                "09f0577606881ead"
            ]
        ]
    },
    {
        "id": "0b77857a0dda3f75",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = '確認';\nmsg.payload = `MQTTトピック：${msg.mqttTopic.topic}を追加しました。`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "4e2712dd7fdff3fd"
            ]
        ]
    },
    {
        "id": "4e2712dd7fdff3fd",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1210,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "84593e6f29527e9e",
        "type": "link out",
        "z": "51957a5eab717266",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "54b15303cf8f8f76"
        ],
        "x": 975,
        "y": 280,
        "wires": []
    },
    {
        "id": "cdc023e9b332fc57",
        "type": "catch",
        "z": "51957a5eab717266",
        "name": "",
        "scope": [
            "76452f280e99859f"
        ],
        "uncaught": false,
        "x": 850,
        "y": 200,
        "wires": [
            [
                "6ba2f66a7480c6cb"
            ]
        ]
    },
    {
        "id": "6ba2f66a7480c6cb",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = 'エラー';\nif (msg.error.message.startsWith('Error: Duplicate entry')) {\n    msg.payload = `トピック：${msg.payload.topic}は既に登録されています。`;\n} else if (msg.error.message.startsWith('Error: Data too long')) {\n    msg.payload = `トピックの文字数が長すぎます。255文字以内で設定してください。`;\n} else {\n    msg.payload = msg.error.message;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "4e2712dd7fdff3fd"
            ]
        ]
    },
    {
        "id": "1283e4833efb7586",
        "type": "status",
        "z": "51957a5eab717266",
        "name": "DB接続時に実行",
        "scope": [
            "115ba8c37927d402"
        ],
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "717b60a34c60065e"
            ]
        ]
    },
    {
        "id": "717b60a34c60065e",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 1400,
        "wires": [
            [
                "36729a1e249963e5"
            ]
        ]
    },
    {
        "id": "a40125e6994bfae3",
        "type": "inject",
        "z": "51957a5eab717266",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1440,
        "wires": [
            [
                "36729a1e249963e5"
            ]
        ]
    },
    {
        "id": "36729a1e249963e5",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `mail_server_id` AS mailServerId,\n  `smtp_host` AS smtpHost,\n  `smtp_port` AS smtpPort,\n  `from`,\n  `user`,\n  `password`,\n  `secure`,\n  `tls`\nFROM\n  `mail_servers`\nLIMIT\n  1;",
        "output": "str",
        "x": 320,
        "y": 1440,
        "wires": [
            [
                "c4876b9fc46467bc"
            ]
        ]
    },
    {
        "id": "c4876b9fc46467bc",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "aca91dae8e8ffa06"
            ]
        ]
    },
    {
        "id": "8f903b06cbabf3c8",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "51957a5eab717266",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "設定",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 1500,
        "wires": [
            [
                "7a8e7c482a8f33ee"
            ],
            []
        ]
    },
    {
        "id": "7a8e7c482a8f33ee",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "get",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1500,
        "wires": [
            [
                "6ccf933d5d46a9b4"
            ]
        ]
    },
    {
        "id": "6ccf933d5d46a9b4",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "SMTPサーバー管理",
        "func": "const smtp = context.get('smtp');\nswitch (msg.topic) {\n    case 'read':\n        context.set('smtp', msg.smtp);\n        msg.smtp.password = null;\n        return { payload: msg.smtp };\n    case 'get':\n        if (smtp) {\n            const payload = { ...smtp };\n            payload.password = null;\n            return { payload };\n        }\n        break;\n    default:\n        break;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1500,
        "wires": [
            [
                "0763e59a9d61ee3b"
            ]
        ]
    },
    {
        "id": "0763e59a9d61ee3b",
        "type": "ui_template",
        "z": "51957a5eab717266",
        "group": "23ac0f65997bdbdb",
        "name": "SMTPサーバー",
        "order": 3,
        "width": "12",
        "height": "9",
        "format": "<div class=\"row ms-2 me-2 mt-0 mb-0\">\n    <div class=\"col-6\">\n        <div class=\"row table-row table-row-4-8\">\n            <div>ホスト名</div>\n            <div class=\"text-truncate d-block\">\n                {{payload.smtpHost}}\n                <md-tooltip>{{payload.smtpHost}}</md-tooltip>\n            </div>\n            <div>ポート</div>\n            <div>{{payload.smtpPort}}</div>\n            <div>送信元</div>\n            <div class=\"text-truncate d-block\">\n                {{payload.from}}\n                <md-tooltip>{{payload.from}}</md-tooltip>\n            </div>\n            <div>安全な接続</div>\n            <div>\n                <ui-icon ng-if=\"payload.secure\" class=\"thema-icon\" icon=\"check_box\"></ui-icon>\n                <ui-icon ng-if=\"!payload.secure\" class=\"thema-icon\" icon=\"check_box_outline_blank\"></ui-icon>\n            </div>\n            <div>TLS</div>\n            <div>\n                <ui-icon ng-if=\"payload.tls\" class=\"thema-icon\" icon=\"check_box\"></ui-icon>\n                <ui-icon ng-if=\"!payload.tls\" class=\"thema-icon\" icon=\"check_box_outline_blank\"></ui-icon>\n            </div>\n            <div>ユーザー</div>\n            <div>{{payload.user}}</div>\n        </div>\n    </div>\n    <div class=\"col-6\">\n        <div class=\"row mt-4 input-form\">\n            <div>\n                <md-input-container>\n                    <label for=\"host\">ホスト</label>\n                    <input id=\"host\" aria-label=\"host\" type=\"text\" ng-required=\"true\" ng-model=\"smtp.smtpHost\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"port\">ポート</label>\n                    <input id=\"port\" aria-label=\"port\" type=\"number\" min=\"0\" max=\"65535\" ng-required=\"true\" ng-model=\"smtp.smtpPort\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"from\">送信元</label>\n                    <input id=\"from\" aria-label=\"from\" type=\"text\" ng-model=\"smtp.from\" ng-required=\"true\" ng-change=\"onChangeInput()\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <span>安全な接続</span>\n                    <div class=\"float-end\">\n                        <md-switch class=\"mb-0 mt-0\" ng-model=\"smtp.secure\" ng-checked=\"smtp.secure\"\n                            aria-label=\"secure\">\n                        </md-switch>\n                    </div>\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <span>TLS</span>\n                    <div class=\"float-end\">\n                        <md-switch class=\"mb-0 mt-0\" ng-model=\"smtp.tls\" ng-checked=\"smtp.tls\" aria-label=\"tls\">\n                        </md-switch>\n                        <md-tooltip>TLSチェックサーバー証明書を使用するかどうかを指定します。</md-tooltip>\n                    </div>\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"username\">ユーザー</label>\n                    <input id=\"username\" aria-label=\"username\" type=\"text\" ng-model=\"smtp.user\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-input-container>\n                    <label for=\"password\">パスワード</label>\n                    <input id=\"password\" aria-label=\"password\" type=\"password\" ng-model=\"smtp.password\">\n                </md-input-container>\n            </div>\n            <div>\n                <md-button ng-disabled=\"disabled\" aria-label=\"register\" ng-click=\"send({payload: smtp})\"\n                    class=\"w-100 btn-height\">\n                    更新\n                </md-button>\n            </div>\n        </div>\n    </div>\n</div>\n<script>\n    (function (scope) {\n        scope.disabled = false;\n        scope.$watch('msg.payload', payload => {\n            if (payload) {\n                scope.payload = { ...payload };\n                scope.smtp = payload;\n            }\n        });\n        \n        scope.onChangeInput = function() {\n            scope.disabled = (!scope.smtp.smtpHost) || \n                (scope.smtp.smtpPort == null) ||\n                (!scope.smtp.from);          \n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 660,
        "y": 1560,
        "wires": [
            [
                "907d777d71f1a6bd"
            ]
        ]
    },
    {
        "id": "907d777d71f1a6bd",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "UPDATE\n  `mail_servers`\nSET\n  `smtp_host` = :smtpHost,\n  `smtp_port` = :smtpPort,\n  `from` = :from,\n  `user` = :user,\n  `password` = :password,\n  `secure` = :secure,\n  `tls` = :tls\nWHERE\n  `mail_server_id` = :mailServerId;",
        "output": "str",
        "x": 840,
        "y": 1560,
        "wires": [
            [
                "962e09604d886979"
            ]
        ]
    },
    {
        "id": "962e09604d886979",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 990,
        "y": 1560,
        "wires": [
            [
                "126bfcf8fd073518",
                "81555d945e906c2c"
            ]
        ]
    },
    {
        "id": "8bd974c084e213eb",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Init SMTP Server",
        "links": [
            "126bfcf8fd073518",
            "7af6a27771cd284e"
        ],
        "x": 435,
        "y": 1400,
        "wires": [
            [
                "36729a1e249963e5"
            ]
        ]
    },
    {
        "id": "126bfcf8fd073518",
        "type": "link out",
        "z": "51957a5eab717266",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "8bd974c084e213eb"
        ],
        "x": 1105,
        "y": 1560,
        "wires": []
    },
    {
        "id": "6dbe3f060bd9f73a",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 1230,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "81555d945e906c2c",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "SMTPサーバーを更新しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1640,
        "wires": [
            [
                "6dbe3f060bd9f73a"
            ]
        ]
    },
    {
        "id": "cf1dc13172adb7c4",
        "type": "catch",
        "z": "51957a5eab717266",
        "name": "",
        "scope": [
            "962e09604d886979"
        ],
        "uncaught": false,
        "x": 870,
        "y": 1680,
        "wires": [
            [
                "ef7635a0a33e8fdb"
            ]
        ]
    },
    {
        "id": "ef7635a0a33e8fdb",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "SMTPサーバーの更新に失敗しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "エラー",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1680,
        "wires": [
            [
                "6dbe3f060bd9f73a"
            ]
        ]
    },
    {
        "id": "647558d47f03e2d2",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MQTTブローカーの更新に失敗しました。",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "エラー",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "2996a72aa07d22ad"
            ]
        ]
    },
    {
        "id": "0df6f71f83aa9f8f",
        "type": "catch",
        "z": "51957a5eab717266",
        "name": "",
        "scope": [
            "7bb16b50f4ceeb7d"
        ],
        "uncaught": false,
        "x": 930,
        "y": 600,
        "wires": [
            [
                "647558d47f03e2d2"
            ]
        ]
    },
    {
        "id": "56bccd40a14611d7",
        "type": "status",
        "z": "51957a5eab717266",
        "name": "DB接続時に実行",
        "scope": [
            "115ba8c37927d402"
        ],
        "x": 140,
        "y": 980,
        "wires": [
            [
                "05db20c4f43a1ec5"
            ]
        ]
    },
    {
        "id": "05db20c4f43a1ec5",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 980,
        "wires": [
            [
                "1125d020cc18419c"
            ]
        ]
    },
    {
        "id": "439ce57aa820a3d1",
        "type": "inject",
        "z": "51957a5eab717266",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "1125d020cc18419c"
            ]
        ]
    },
    {
        "id": "1125d020cc18419c",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT\n  `mail_address_id` AS mailAddressId,\n  `to`\nFROM\n  `mail_addresses`\nWHERE\n  `mail_server_id` = 1;",
        "output": "str",
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "01b0f39b79d9c58b"
            ]
        ]
    },
    {
        "id": "01b0f39b79d9c58b",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "a4e572abcb0d0e5a"
            ]
        ]
    },
    {
        "id": "bc4daa7f0c648417",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "アドレス管理",
        "func": "const addresses = global.get('mailAddresses') || [];\nswitch (msg.topic) {\n    case 'read':\n        global.set('mailAddresses', msg.payload);\n        return msg;\n    case 'get':\n        return { payload: addresses };\n    default:\n        break;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1080,
        "wires": [
            [
                "137caee7a0c50f16"
            ]
        ]
    },
    {
        "id": "a4e572abcb0d0e5a",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "read",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 1020,
        "wires": [
            [
                "bc4daa7f0c648417"
            ]
        ]
    },
    {
        "id": "45f759e61960c650",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Init Mail Addresses",
        "links": [
            "7af6a27771cd284e",
            "fce772591dde4c10"
        ],
        "x": 435,
        "y": 980,
        "wires": [
            [
                "1125d020cc18419c"
            ]
        ]
    },
    {
        "id": "40ff9e0b69b0d1b4",
        "type": "subflow:f89f5e3b86cd59d6",
        "z": "51957a5eab717266",
        "name": "",
        "env": [
            {
                "name": "name",
                "value": "設定",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 1080,
        "wires": [
            [
                "5bf270b397db04ce"
            ],
            []
        ]
    },
    {
        "id": "5bf270b397db04ce",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "get",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "bc4daa7f0c648417"
            ]
        ]
    },
    {
        "id": "137caee7a0c50f16",
        "type": "ui_template",
        "z": "51957a5eab717266",
        "group": "c5d7b813f9b3de5c",
        "name": "送信先アドレス",
        "order": 3,
        "width": "12",
        "height": "9",
        "format": "<div class=\"row mt-3 ms-2 me-2 mb-0\">\n    <div class=\"col-7\">\n        <table class=\"table align-middle\">\n            <tr>\n                <th>送信先</th>\n                <th class=\"w-1\"></th>\n                <th class=\"w-1\"></th>\n            </tr>\n            <tr ng-repeat=\"address in addresses\">\n                <td class=\"text-truncate w-max-0\">{{address.to}}<md-tooltip>{{address.to}}</md-tooltip>\n                </td>\n                <td>\n                    <md-button class=\"btn-template\" ng-click=\"send({payload: address, topic: 'mail'})\"\n                        aria-label=\"send\">\n                        <ui-icon icon=\"mi-send\"></ui-icon>\n                    </md-button>\n                    <md-tooltip>テストメールを送信します</md-tooltip>\n                </td>\n                <td>\n                    <md-button class=\"btn-template\" ng-click=\"send({payload: address, topic: 'delete'})\"\n                        aria-label=\"delete\">\n                        <ui-icon icon=\"mi-delete\"></ui-icon>\n                    </md-button>\n                    <md-tooltip>送信先メールアドレスを削除します</md-tooltip>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"col-5\">\n        <div class=\"row mt-2 input-form\">\n            <div>\n                <md-input-container>\n                    <label for=\"address\">送信先メールアドレス</label>\n                    <input id=\"address\" aria-label=\"address\" type=\"text\" ng-required=\"true\" ng-model=\"mailAddress.to\" ng-change=\"onChange()\">\n                </md-input-container>\n            </div>\n        </div>\n        <div style=\"margin-top: -20px;\">\n            <md-button ng-disabled=\"disableRegister\" aria-label=\"register\" class=\"w-100 btn-height\"\n                ng-click=\"send({payload: mailAddress, topic: 'add'})\">\n                追加\n            </md-button>\n        </div>\n    </div>\n</div>\n<script>\n    (function(scope) {\n        scope.mailAddress = {\n            to: ''\n        };\n        scope.disableRegister = true;\n        scope.$watch('msg.payload', payload => {\n            if (payload) {\n                scope.addresses = payload;   \n            }\n        });\n        scope.onChange = function() {\n            scope.disableRegister = scope.mailAddress.to ? false : true;\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "bfaefd9e35fc0c6f"
            ]
        ]
    },
    {
        "id": "882802869bc2c902",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "MQTTトピック",
        "info": "",
        "x": 140,
        "y": 20,
        "wires": []
    },
    {
        "id": "5d6d82c90734214e",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "MQTTトピック送信",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "dfcaf1169702a6b1",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "MQTTブローカー",
        "info": "",
        "x": 140,
        "y": 520,
        "wires": []
    },
    {
        "id": "6495ef4ac17f4c3d",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "送信先アドレス",
        "info": "",
        "x": 140,
        "y": 940,
        "wires": []
    },
    {
        "id": "8c0f39151559337d",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "SMTPサーバー",
        "info": "",
        "x": 140,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bfaefd9e35fc0c6f",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mail",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "6bba37fdc495dd7a"
            ],
            [
                "37ea6e351484230d"
            ],
            [
                "b7694bb80b0da6d4"
            ]
        ]
    },
    {
        "id": "6bba37fdc495dd7a",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "address",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1140,
        "wires": [
            [
                "e29b2704e1cea835"
            ]
        ]
    },
    {
        "id": "e29b2704e1cea835",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "INSERT INTO\n  `mail_addresses` (\n    `to`,\n    `mail_server_id`\n  )\nVALUES (\n  :to,\n  1\n);",
        "output": "str",
        "x": 740,
        "y": 1140,
        "wires": [
            [
                "baa8eef7ae5eecd4"
            ]
        ]
    },
    {
        "id": "baa8eef7ae5eecd4",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "82cac1dae3236977",
                "fce772591dde4c10"
            ]
        ]
    },
    {
        "id": "82cac1dae3236977",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = '確認';\nmsg.payload = `送信先アドレス：${msg.address.to}を追加しました。`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1140,
        "wires": [
            [
                "7e665d152f5cc248"
            ]
        ]
    },
    {
        "id": "9aa02a116cdabd53",
        "type": "catch",
        "z": "51957a5eab717266",
        "name": "",
        "scope": [
            "baa8eef7ae5eecd4"
        ],
        "uncaught": false,
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "f070b75ca99517a6"
            ]
        ]
    },
    {
        "id": "f070b75ca99517a6",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = 'エラー';\nif (msg.error.message.startsWith('Error: Duplicate entry')) {\n    msg.payload = `メールアドレス：${msg.payload.to}は既に登録されています。`;\n} else if (msg.error.message.startsWith('Error: Data too long')) {\n    msg.payload = `メールアドレスの文字数が長すぎます。255文字以内で設定してください。`;\n} else {\n    msg.payload = msg.error.message;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1100,
        "wires": [
            [
                "7e665d152f5cc248"
            ]
        ]
    },
    {
        "id": "7e665d152f5cc248",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1270,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "37ea6e351484230d",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.address = msg.payload;\nmsg.topic = '確認';\nmsg.payload = `メールアドレス：${msg.payload.to}を削除しますか？`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1180,
        "wires": [
            [
                "ec1628153d651a47"
            ]
        ]
    },
    {
        "id": "ec1628153d651a47",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 730,
        "y": 1180,
        "wires": [
            [
                "8e8886adb34045bc"
            ]
        ]
    },
    {
        "id": "addad9621d3303c3",
        "type": "mysql",
        "z": "51957a5eab717266",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "fce772591dde4c10"
            ]
        ]
    },
    {
        "id": "07dff4c7b76bc5cb",
        "type": "template",
        "z": "51957a5eab717266",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DELETE FROM\n  `mail_addresses`\nWHERE\n  `mail_address_id` = :mailAddressId;",
        "output": "str",
        "x": 740,
        "y": 1220,
        "wires": [
            [
                "addad9621d3303c3"
            ]
        ]
    },
    {
        "id": "8e8886adb34045bc",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 1180,
        "wires": [
            [
                "e94c1dc5090615b2"
            ]
        ]
    },
    {
        "id": "e94c1dc5090615b2",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "address",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1220,
        "wires": [
            [
                "07dff4c7b76bc5cb"
            ]
        ]
    },
    {
        "id": "fce772591dde4c10",
        "type": "link out",
        "z": "51957a5eab717266",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "45f759e61960c650"
        ],
        "x": 1035,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8e3f85aa97c27e36",
        "type": "link in",
        "z": "51957a5eab717266",
        "name": "Send Mail",
        "links": [
            "41a0aaec675b2f30"
        ],
        "x": 75,
        "y": 1700,
        "wires": [
            [
                "9c1216c4f1c4af08"
            ]
        ]
    },
    {
        "id": "5e2353f8fd443686",
        "type": "comment",
        "z": "51957a5eab717266",
        "name": "メール送信",
        "info": "",
        "x": 120,
        "y": 1660,
        "wires": []
    },
    {
        "id": "9c1216c4f1c4af08",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "payload.mailAddresses",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 1700,
        "wires": [
            [
                "adca89c2c794eb50"
            ]
        ]
    },
    {
        "id": "b7694bb80b0da6d4",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "メール設定",
        "func": "const smtp = global.get('smtp');\n\nmsg.topic =  '【送信専用】テストメール';\nmsg.to = msg.payload.to;\nmsg.from = smtp.from;\nmsg.payload = 'テストメール';\nmsg.host = smtp.smtpHost;\nmsg.port = smtp.smtpPort;\nmsg.userid = smtp.user;\nmsg.password = smtp.password;\nmsg.secure = smtp.secure;\nmsg.tls = smtp.tls;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "a38072bd34c2c51a"
            ]
        ]
    },
    {
        "id": "6abb5256b6919839",
        "type": "e-mail",
        "z": "51957a5eab717266",
        "server": "localhost",
        "port": "25",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "",
        "output": true,
        "outputs": 1,
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "f8e951ffb3056ef5"
            ]
        ]
    },
    {
        "id": "af766fd0c09d7501",
        "type": "ui_toast",
        "z": "51957a5eab717266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 1170,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "f8e951ffb3056ef5",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1300,
        "wires": [
            [
                "ca800ada15e8204c"
            ],
            [
                "f3ccbd4d100c2842"
            ]
        ]
    },
    {
        "id": "ca800ada15e8204c",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = '確認';\nmsg.payload = `${msg.to}へのメール送信を試みました。受信メールをご確認ください。`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1280,
        "wires": [
            [
                "af766fd0c09d7501"
            ]
        ]
    },
    {
        "id": "f3ccbd4d100c2842",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "ダイアログ",
        "func": "msg.topic = 'エラー';\nmsg.payload = `${msg.to}へのメール送信に失敗しました。`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1320,
        "wires": [
            [
                "af766fd0c09d7501"
            ]
        ]
    },
    {
        "id": "adca89c2c794eb50",
        "type": "function",
        "z": "51957a5eab717266",
        "name": "メール設定",
        "func": "if (msg.payload.toggle == msg.payload.signal) {\n    return;\n}\n\nconst smtp = global.get('smtp');\nconst time = moment(msg.payload.time).format('YYYY-MM-DD HH:mm:ss');\nconst unit = msg.payload.unit ? `[${msg.payload.unit}]` : '';\n\nfunction createBody() {\n    const base = `${time}に${msg.payload.sensorTypeText}センサー：${msg.payload.deviceName}`;\n    if (msg.payload.sensorType === 257) {\n        const onOff = msg.payload.value ? 'High' : 'Low';\n        return base + `の値が${onOff}になりました。`;\n    } else {\n        const hysteresis = msg.payload.toggle ? msg.payload.hysteresisLow : msg.payload.hysteresisHigh;\n        const text = `${hysteresis}${unit}を` + (msg.payload.toggle ? '下回り' : '上回り');\n        if (msg.payload.channel) {\n            return base + `：${msg.payload.channel}の値が${text}、${msg.payload.value}${unit}になりました。`;\n        } else {\n            return base + `の値が${text}、${msg.payload.value}${unit}になりました。`;\n        }\n    }    \n}\n\nfor (const address of msg.payload.mailAddresses) {\n    if (msg.payload.value == null) {\n        continue;\n    }\n    node.send({\n        topic: `【送信専用】${msg.payload.deviceName}から通知が届きました`,\n        to: address.to,\n        from: smtp.from,\n        payload: createBody(),\n        host: smtp.smtpHost,\n        port: smtp.smtpPort,\n        userid: smtp.user,\n        password: smtp.password,\n        secure: smtp.secure,\n        tls: smtp.tls\n    });\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 370,
        "y": 1700,
        "wires": [
            [
                "76cfb041b50d9ab0"
            ]
        ]
    },
    {
        "id": "8e3d1bc53633ac52",
        "type": "e-mail",
        "z": "51957a5eab717266",
        "server": "localhost",
        "port": "25",
        "secure": false,
        "tls": false,
        "name": "",
        "dname": "",
        "output": true,
        "outputs": 1,
        "x": 670,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "19029acd5f0b0cd6",
        "type": "e-mail",
        "z": "51957a5eab717266",
        "server": "localhost",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "output": true,
        "outputs": 1,
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "f8e951ffb3056ef5"
            ]
        ]
    },
    {
        "id": "8222cf3c2c354eb4",
        "type": "e-mail",
        "z": "51957a5eab717266",
        "server": "localhost",
        "port": "465",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "",
        "output": true,
        "outputs": 1,
        "x": 670,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "a38072bd34c2c51a",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "tls",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "6abb5256b6919839"
            ],
            [
                "19029acd5f0b0cd6"
            ]
        ]
    },
    {
        "id": "76cfb041b50d9ab0",
        "type": "switch",
        "z": "51957a5eab717266",
        "name": "",
        "property": "tls",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 1700,
        "wires": [
            [
                "8e3d1bc53633ac52"
            ],
            [
                "8222cf3c2c354eb4"
            ]
        ]
    },
    {
        "id": "c8b3eb623c615b13",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "パスワード削除",
        "rules": [
            {
                "t": "set",
                "p": "payload.password",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 700,
        "wires": [
            [
                "4450d0dbcc472417"
            ]
        ]
    },
    {
        "id": "522ac0957dee51da",
        "type": "debug",
        "z": "51957a5eab717266",
        "name": "MQTT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "eaa5a26c4d0d4534",
        "type": "aedes broker",
        "z": "51957a5eab717266",
        "name": "汎用ブローカー",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 880,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8cae0c2f95a52628",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "read",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 640,
        "wires": [
            [
                "3550250215c8f917"
            ]
        ]
    },
    {
        "id": "41ed9a1a6ae155db",
        "type": "delay",
        "z": "51957a5eab717266",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 640,
        "wires": [
            [
                "8cae0c2f95a52628"
            ]
        ]
    },
    {
        "id": "aca91dae8e8ffa06",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1440,
        "wires": [
            [
                "456230d365eb385b"
            ]
        ]
    },
    {
        "id": "456230d365eb385b",
        "type": "change",
        "z": "51957a5eab717266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "smtp",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "smtp",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "read",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1440,
        "wires": [
            [
                "6ccf933d5d46a9b4"
            ]
        ]
    },
    {
        "id": "de1a0728fef20300",
        "type": "ui_template",
        "z": "2d4457c90808f33a",
        "group": "",
        "name": "ヘッダ",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n<link rel=\"stylesheet\" href=\"/css/iotkit.css\">\n<script src=\"/js/bootstrap.bundle.min.js\" charset=\"utf-8\"></script>\n<script src=\"/js/plotly.min.js\" charset=\"utf-8\"></script>\n<script src=\"/js/RealtimeChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/RealtimeCountChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/RealtimeLineChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/RealtimeHeatmap.js\" charset=\"utf-8\"></script>\n<script src=\"/js/RealtimeGpioChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/LogChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/CountLogChart.js\" charset=\"utf-8\"></script>\n<script src=\"/js/SpectrogramLogChart.js\" charset=\"utf-8\"></script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 130,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac8f69a40d5909c",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "自動起動",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "890e44354ba2fd91",
                "a4e95faf3e55ab10"
            ]
        ]
    },
    {
        "id": "890e44354ba2fd91",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "mjpg_streamer  -i \"input_uvc.so -d /dev/video0 -r 480x320 -f 8 -q 100 -n\" -o \"output_http.so -p 51890\"",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "mjpg_streamer",
        "x": 360,
        "y": 400,
        "wires": [
            [],
            [],
            [
                "c0f2e2887575f61c"
            ]
        ]
    },
    {
        "id": "243e7d40c96c7b54",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "kill",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "890e44354ba2fd91"
            ]
        ]
    },
    {
        "id": "a4e95faf3e55ab10",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "camera",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "c0f2e2887575f61c",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "camera",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c23417bb.c13828",
        "type": "ui_template",
        "z": "2d4457c90808f33a",
        "group": "cf6e588d332cc9dd",
        "name": "IoT導入支援キットのライセンス",
        "order": 4,
        "width": "12",
        "height": "7",
        "format": "<div class=\"ms-2 me-2\">\n    <p class=\"ms-1\">IoT導入支援キットのソフトウェアライセンス</p>\n    <div class=\"m-2 text-center border border-secondary\">\n        Copyright (c) 2020-2025 Fukuoka Industrial Technology Center<br>\n        <br>\n        Licensed under the Apache License, Version 2.0 (the \"License\");<br>\n        you may not use this file except in compliance with the License.<br>\n        You may obtain a copy of the License at<br>\n        <br>\n        &emsp;<a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a><br>\n        <br>\n        Unless required by applicable law or agreed to in writing, software<br>\n        distributed under the License is distributed on an \"AS IS\" BASIS,<br>\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>\n        See the License for the specific language governing permissions and<br>\n        limitations under the License.\n    </div>\n</div>\n    ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 210,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "df57fcd6.5f016",
        "type": "ui_text",
        "z": "2d4457c90808f33a",
        "group": "cf6e588d332cc9dd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "バージョン",
        "format": "Ver.4.1.0-Raspi4 (2025-05-26)",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 150,
        "y": 580,
        "wires": []
    },
    {
        "id": "5b8e068c.56e2a8",
        "type": "ui_text",
        "z": "2d4457c90808f33a",
        "group": "cf6e588d332cc9dd",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "著作権",
        "format": "© 2020-2025 Fukuoka Industrial Technology Center",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 130,
        "y": 620,
        "wires": []
    },
    {
        "id": "8abbf4607f25a6e8",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "npm start --prefix ./.node-red/swagger",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c9dfe2d3cc15f146",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 510,
        "y": 560,
        "wires": [
            [
                "8abbf4607f25a6e8"
            ]
        ]
    },
    {
        "id": "df13a3b734772906",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "kill",
        "props": [
            {
                "p": "kill",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "8abbf4607f25a6e8"
            ]
        ]
    },
    {
        "id": "f7a7e8b84dfd3cb0",
        "type": "ui_template",
        "z": "2d4457c90808f33a",
        "group": "80c826fe9c5364b7",
        "name": "",
        "order": 1,
        "width": "6",
        "height": 1,
        "format": "<md-button ng-click=\"openWindow()\" style=\"height: 48px;\">\n    <ui-icon icon=\"launch\" class=\"white-icon\"></ui-icon>\n    ドキュメントを表示\n</md-button>\n<script>\n    (function(scope) {\n        console.log(location);\n        scope.url = `${location.protocol}//${location.hostname}:8080/docs`;\n        scope.openWindow = function() {\n            window.open(scope.url, '_blank');\n        }\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "16380c35ba9b07b2",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "WebAPIについて",
        "info": "",
        "x": 860,
        "y": 360,
        "wires": []
    },
    {
        "id": "b5586421c5acacfe",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "9325ad3caaf35ca2"
            ]
        ]
    },
    {
        "id": "9325ad3caaf35ca2",
        "type": "function",
        "z": "2d4457c90808f33a",
        "name": "共通関数",
        "func": "const functions = {\n    isString: function (value, cb) {\n        if (typeof value === 'string' || value instanceof String) {\n            return cb ? cb(value) : true;\n        } else {\n            return false;\n        }\n    },\n    isInteger: function (value, cb) {\n        const v = Number(value);\n        if (Number.isNaN(v) || !Number.isSafeInteger(v)) {\n            return false;\n        } else {\n            return cb ? cb(v) : true;\n        }\n    },\n    isNumber: function (value, cb) {\n        const v = Number(value);\n        if (Number.isNaN(v) || !Number.isFinite(v)) {\n            return false;\n        } else {\n            return cb ? cb(v) : true;\n        }\n    },\n    isBoolean: function (value) {\n        return value === true || value === false;\n    },\n    clamp: function (min, max, value) {\n        return Math.max(Math.min(max, value), min);\n    }\n};\nglobal.set('functions', functions);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "6b686692b2050c60",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 800,
        "wires": [
            [
                "c078f9733f6f554b",
                "588a494eefc6953d"
            ]
        ]
    },
    {
        "id": "cf328dcd54c9fced",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "sudo shutdown -h now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1140,
        "y": 780,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "892fe072c1a631ee",
        "type": "ui_button",
        "z": "2d4457c90808f33a",
        "name": "",
        "group": "1ce4ea673f9b71e6",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "システムシャットダウン",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "btn-danger",
        "icon": "power_settings_new",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "0ac85fddcbce1f6b"
            ]
        ]
    },
    {
        "id": "df06208c75d5c4a8",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 880,
        "wires": [
            [
                "c078f9733f6f554b",
                "d593f4ba540f3d10",
                "9aa92c48a7bd1e89"
            ]
        ]
    },
    {
        "id": "7e067f6234860cf3",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "node-red-restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1130,
        "y": 860,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "920aeb585d2e2689",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1110,
        "y": 940,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7317669397fc08cb",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 960,
        "wires": [
            [
                "c078f9733f6f554b",
                "233fde4f7d202eae"
            ]
        ]
    },
    {
        "id": "df5ea6c7908980ab",
        "type": "ui_button",
        "z": "2d4457c90808f33a",
        "name": "",
        "group": "1ce4ea673f9b71e6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "ダッシュボード再起動",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "btn-danger",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 840,
        "wires": [
            [
                "734bd3a679f75f41"
            ]
        ]
    },
    {
        "id": "05c4a63029cb9be5",
        "type": "ui_button",
        "z": "2d4457c90808f33a",
        "name": "",
        "group": "1ce4ea673f9b71e6",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "システム再起動",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "btn-danger",
        "icon": "restore",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 920,
        "wires": [
            [
                "cba06957d2ec50b6"
            ]
        ]
    },
    {
        "id": "4db2bfa1f68ea25a",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 760,
        "wires": [
            [
                "eb11fa93c3e1bbe9"
            ]
        ]
    },
    {
        "id": "0ac85fddcbce1f6b",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "システムをシャットダウンします。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 760,
        "wires": [
            [
                "4db2bfa1f68ea25a"
            ]
        ]
    },
    {
        "id": "eb11fa93c3e1bbe9",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 760,
        "wires": [
            [
                "c078f9733f6f554b",
                "588a494eefc6953d"
            ]
        ]
    },
    {
        "id": "9d52577dd5eba7f5",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 840,
        "wires": [
            [
                "86e4c0bb264e9d6e"
            ]
        ]
    },
    {
        "id": "734bd3a679f75f41",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ダッシュボードを再起動します。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 840,
        "wires": [
            [
                "9d52577dd5eba7f5"
            ]
        ]
    },
    {
        "id": "86e4c0bb264e9d6e",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 840,
        "wires": [
            [
                "c078f9733f6f554b",
                "d593f4ba540f3d10",
                "9aa92c48a7bd1e89"
            ]
        ]
    },
    {
        "id": "55884c47d7841671",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 920,
        "wires": [
            [
                "70b0df1cffea74c8"
            ]
        ]
    },
    {
        "id": "cba06957d2ec50b6",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "システムを再起動します。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 920,
        "wires": [
            [
                "55884c47d7841671"
            ]
        ]
    },
    {
        "id": "70b0df1cffea74c8",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "c078f9733f6f554b",
                "233fde4f7d202eae"
            ]
        ]
    },
    {
        "id": "25dc810535f59a6d",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "テーブル初期化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 600,
        "y": 180,
        "wires": [
            [
                "1eaf1382a85c030d"
            ]
        ]
    },
    {
        "id": "374d6f9f98bb93c1",
        "type": "mysql",
        "z": "2d4457c90808f33a",
        "mydb": "5b09767069411e23",
        "name": "",
        "x": 990,
        "y": 260,
        "wires": [
            [
                "7af6a27771cd284e"
            ]
        ]
    },
    {
        "id": "fb242e998a4616d4",
        "type": "template",
        "z": "2d4457c90808f33a",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DROP TABLE IF EXISTS\n`adcs`,\n`temperatures`,\n`gpio_outputs`,\n`gpio_inputs`,\n`sensor_gpio_output_pivots`,\n`sensor_mail_pivots`,\n`sensor_mqtt_pivots`,\n`sensors`,\n`mail_addresses`,\n`mail_servers`,\n`mqtt_topics`,\n`mqtt_brokers`,\n`http_device_configs`,\n`gpio_device_configs`,\n`usb_device_configs`,\n`ble_device_configs`,\n`i2c_device_configs`,\n`mqtt_device_configs`,\n`devices`,\n`sensor_channels`,\n`sensor_types`;\n\nCREATE TABLE `sensor_types`(\n  `sensor_type_id` INT NOT NULL PRIMARY KEY COMMENT 'センサー種別ID',\n  `sensor_type_text` VARCHAR(255) NOT NULL COMMENT 'センサー種別名',\n  `measurement` VARCHAR(63) NOT NULL UNIQUE COMMENT 'テーブル名'\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサー種別テーブル';\n\nCREATE TABLE `sensor_channels`(\n  `sensor_channel_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'センサーチャンネルID',\n  `sensor_type_id` INT NOT NULL COMMENT 'センサー種別ID',\n  `channel` VARCHAR(31) NOT NULL COMMENT 'チャンネル',\n  `channel_name` VARCHAR(63) NOT NULL COMMENT 'チャンネル名',\n  `channel_index` INT NOT NULL COMMENT 'インデックス',\n  `unit` VARCHAR(63) NOT NULL COMMENT '単位',\n  `fraction` TINYINT UNSIGNED NOT NULL COMMENT '画面表示上の小数点以下の桁数',\n  `hysteresis_min` FLOAT NOT NULL COMMENT 'ヒステリシス最小値',\n  `hysteresis_max` FLOAT NOT NULL COMMENT 'ヒステリシス最大値',\n  `hysteresis_step` FLOAT NOT NULL COMMENT 'ヒステリシスステップ',\n  `hysteresis_default` FLOAT NOT NULL COMMENT 'ヒステリシスデフォルト値',\n  `offset_range` FLOAT NOT NULL COMMENT 'オフセットレンジ',\n  UNIQUE(`sensor_type_id`, `channel`, `channel_name`),\n  FOREIGN KEY (`sensor_type_id`) REFERENCES `sensor_types`(`sensor_type_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサーチャンネルテーブル';\n\nCREATE TABLE `devices`(\n  `device_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'デバイスID',\n  `device_name` VARCHAR(255) NOT NULL UNIQUE COMMENT 'デバイス名',\n  `sensor_type_id` INT NOT NULL COMMENT 'センサー種別ID',\n  `access_type` TINYINT NOT NULL COMMENT '通信区分',\n  `is_save_data` BOOLEAN DEFAULT TRUE NOT NULL COMMENT 'データ保存の可否',\n  `is_save_count` BOOLEAN DEFAULT FALSE NOT NULL COMMENT 'カウント保存の可否',\n  INDEX(`device_name`),\n  FOREIGN KEY (`sensor_type_id`) REFERENCES `sensor_types`(`sensor_type_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'デバイステーブル';\n\nCREATE TABLE `ble_device_configs` (\n  `ble_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'BLEデバイス設定ID',\n  `device_number` BIGINT NOT NULL UNIQUE COMMENT 'デバイスID',\n  `timezone` BOOLEAN DEFAULT FALSE NOT NULL COMMENT 'タイムゾーン',\n  `ble_mode` BOOLEAN DEFAULT FALSE NOT NULL COMMENT 'Bluetooth通信モード',\n  `tx_power` TINYINT DEFAULT 0 NOT NULL COMMENT '送信電波出力',\n  `advertise_interval` SMALLINT DEFAULT 1000 NOT NULL COMMENT 'Advertise発信間隔[ms]',\n  `uplink_interval` INT DEFAULT 60 NOT NULL COMMENT 'Uplink間隔[s]',\n  `measurement_mode` TINYINT DEFAULT 0 NOT NULL COMMENT '計測モード',\n  `sampling_interval` TINYINT DEFAULT 0 NOT NULL COMMENT 'サンプリング周期',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  INDEX(`device_number`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'BLEデバイス設定テーブル';\n\nCREATE TABLE `mqtt_device_configs` (\n  `mqtt_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'MQTTデバイス設定ID',\n  `device_number` BIGINT NOT NULL UNIQUE COMMENT 'デバイスID',\n  `advertise_interval` SMALLINT DEFAULT 1000 NOT NULL COMMENT 'Advertise発信間隔[ms]',\n  `uplink_interval` INT DEFAULT 60 NOT NULL COMMENT 'Uplink間隔[s]',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  INDEX(`device_number`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'MQTTデバイス設定テーブル';\n\nCREATE TABLE `usb_device_configs` (\n  `usb_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'USBデバイス設定ID',\n  `device_number` BIGINT NOT NULL UNIQUE COMMENT 'デバイスID',\n  `advertise_interval` SMALLINT DEFAULT 1000 NOT NULL COMMENT 'Advertise発信間隔[ms]',\n  `uplink_interval` INT DEFAULT 60 NOT NULL COMMENT 'Uplink間隔[s]',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  INDEX(`device_number`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'USBデバイス設定テーブル';\n\nCREATE TABLE `i2c_device_configs` (\n  `i2c_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'I2Cデバイス設定ID',\n  `address` SMALLINT NOT NULL UNIQUE COMMENT 'I2Cアドレス',\n  `output_interval` INT DEFAULT 1000 NOT NULL COMMENT '出力間隔[ms]',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  INDEX(`address`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'I2Cデバイス設定テーブル';\n\nCREATE TABLE `gpio_device_configs` (\n  `gpio_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'GPIOデバイス設定ID',\n  `gpio_index` TINYINT NOT NULL UNIQUE COMMENT 'GPIOピン番号インデックス',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'GPIOデバイス設定テーブル';\n\nCREATE TABLE `http_device_configs` (\n  `http_device_config_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'HTTPデバイス設定ID',\n  `http_sensor_name` VARCHAR (255) NOT NULL UNIQUE COMMENT 'HTTPセンサー名',\n  `device_id` INT NOT NULL UNIQUE COMMENT 'デバイスID',\n  INDEX(`http_sensor_name`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'HTTPデバイス設定テーブル';\n\nCREATE TABLE `mqtt_brokers` (\n  `mqtt_broker_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'MQTTブローカー設定ID',\n  `broker` VARCHAR (255) NOT NULL COMMENT 'ブローカーホスト',\n  `port` SMALLINT UNSIGNED NOT NULL COMMENT 'ポート番号',\n  `username` VARCHAR (255) COMMENT 'ユーザー',\n  `password` VARCHAR (255) COMMENT 'パスワード'\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'MQTTブローカー設定テーブル';\n\nCREATE TABLE `mqtt_topics` (\n  `mqtt_topic_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'MQTTトピックID',\n  `topic` VARCHAR (255) NOT NULL COMMENT 'トピック',\n  `retain` BOOLEAN NOT NULL COMMENT '保持',\n  `qos` TINYINT NOT NULL COMMENT 'QoS',\n  `mqtt_broker_id` INT NOT NULL COMMENT 'MQTTブローカー設定ID',\n  UNIQUE(`topic`, `mqtt_broker_id`),\n  FOREIGN KEY (`mqtt_broker_id`) REFERENCES `mqtt_brokers`(`mqtt_broker_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'MQTTトピックテーブル';\n\nCREATE TABLE `mail_servers` (\n  `mail_server_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'メールサーバー設定ID',\n  `smtp_host` VARCHAR(255) NOT NULL COMMENT 'SMTPホスト',\n  `smtp_port` SMALLINT UNSIGNED DEFAULT 25 NOT NULL COMMENT 'SMTPポート',\n  `from` VARCHAR(255) NOT NULL COMMENT '送信元アドレス',\n  `user` VARCHAR(255) COMMENT 'ユーザー',\n  `password` VARCHAR(255) COMMENT 'パスワード',\n  `secure` BOOLEAN DEFAULT FALSE NOT NULL COMMENT '安全な接続を使用する',\n  `tls` BOOLEAN DEFAULT FALSE NOT NULL COMMENT 'TLSチェックサーバー証明書'\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'メールサーバー設定テーブル';\n\nCREATE TABLE `mail_addresses`(\n  `mail_address_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'メールアドレス設定テーブル',\n  `to` VARCHAR(255) NOT NULL COMMENT '送信先アドレス',\n  `mail_server_id` INT NOT NULL COMMENT 'メールサーバー設定ID',\n  UNIQUE(`to`, `mail_server_id`),\n  FOREIGN KEY (`mail_server_id`) REFERENCES `mail_servers`(`mail_server_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'メールアドレス設定テーブル';\n\nCREATE TABLE `sensors` (\n  `sensor_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'センサーID',\n  `channel` VARCHAR(31) NOT NULL COMMENT 'チャンネル',\n  `channel_index` INT NOT NULL COMMENT 'インデックス',\n  `count` INT DEFAULT 0 NOT NULL COMMENT 'カウント',\n  `take_photo` BOOLEAN DEFAULT FALSE NOT NULL COMMENT '写真撮影',\n  `toggle` BOOLEAN DEFAULT FALSE NOT NULL COMMENT '反転',\n  `extra_mqtt` JSON DEFAULT '{}' NOT NULL COMMENT 'MQTT追加送信情報',\n  `hysteresis_high` FLOAT NOT NULL COMMENT 'ヒステリシスHigh',\n  `hysteresis_low` FLOAT NOT NULL COMMENT 'ヒステリシスLow',\n  `debounce_high` FLOAT UNSIGNED DEFAULT 0 NOT NULL COMMENT 'デバウンスHigh',\n  `debounce_low` FLOAT UNSIGNED DEFAULT 0 NOT NULL COMMENT 'デバウンスLow',\n  `offset` FLOAT DEFAULT 0 NOT NULL COMMENT 'オフセット',\n  `device_id` INT NOT NULL COMMENT 'デバイスID',\n  UNIQUE(`device_id`, `channel`),\n  FOREIGN KEY (`device_id`) REFERENCES `devices`(`device_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサーテーブル';\n\nCREATE TABLE `sensor_mqtt_pivots`(\n  `sensor_mqtt_pivot_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'センサーMQTT交差ID',\n  `sensor_id` INT NOT NULL COMMENT 'センサーID',\n  `mqtt_topic_id` INT NOT NULL COMMENT 'MQTTトピックID',\n  UNIQUE(`sensor_id`, `mqtt_topic_id`),\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE,\n  FOREIGN KEY (`mqtt_topic_id`) REFERENCES `mqtt_topics`(`mqtt_topic_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサーMQTT交差テーブル';\n\nCREATE TABLE `sensor_mail_pivots`(\n  `sensor_mail_pivot_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'センサーメール交差ID',\n  `sensor_id` INT NOT NULL COMMENT 'センサーID',\n  `mail_address_id` INT NOT NULL COMMENT 'メールアドレスID',\n  UNIQUE(`sensor_id`, `mail_address_id`),\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE,\n  FOREIGN KEY (`mail_address_id`) REFERENCES `mail_addresses`(`mail_address_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサーメール交差テーブル';\n\nCREATE TABLE `sensor_gpio_output_pivots` (\n  `sensor_gpio_output_pivot_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'センサーGPIO出力交差ID',\n  `sensor_id` INT NOT NULL COMMENT 'センサーID',\n  `gpio_output_sensor_id` INT COMMENT 'GPIO出力センサーID',\n  `channel_index` INT NOT NULL COMMENT 'インデックス',\n  UNIQUE(`sensor_id`, `gpio_output_sensor_id`),\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE,\n  FOREIGN KEY (`gpio_output_sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'センサーGPIO出力交差テーブル';\n\nCREATE TABLE `gpio_inputs` (\n  `gpio_input_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'GPIO入力設定ID',\n  `chattering` SMALLINT UNSIGNED DEFAULT 0 NOT NULL COMMENT 'チャタリング時間[ms]',\n  `sensor_id` INT NOT NULL UNIQUE COMMENT 'センサーID',\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'GPIO入力設定テーブル';\n\nCREATE TABLE `gpio_outputs` (\n  `gpio_output_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'GPIO出力設定ID',\n  `init_state` BOOLEAN DEFAULT FALSE NOT NULL COMMENT '初期出力',\n  `signal_out_time` SMALLINT UNSIGNED DEFAULT 0 NOT NULL COMMENT '接点出力時間[ms]',\n  `sensor_id` INT NOT NULL UNIQUE COMMENT 'センサーID',\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'GPIO出力設定テーブル';\n\nCREATE TABLE `temperatures` (\n  `temperature_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT '温度センサー設定ID',\n  `thermocouple_type` TINYINT DEFAULT 0 NOT NULL COMMENT '熱電対タイプ',\n  `sensor_id` INT NOT NULL UNIQUE COMMENT 'センサーID',\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '温度センサー設定テーブル';\n\nCREATE TABLE `adcs` (\n  `adc_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'ADCセンサー設定ID',\n  `gain` TINYINT DEFAULT 0 NOT NULL COMMENT 'ゲイン',\n  `magnification` FLOAT DEFAULT 1 NOT NULL COMMENT '表示倍率',\n  `display_name`  VARCHAR(63) DEFAULT '' NOT NULL COMMENT '表示名',\n  `display_unit` VARCHAR(63) DEFAULT '' NOT NULL COMMENT '表示単位',\n  `sensor_id` INT NOT NULL UNIQUE COMMENT 'センサーID',\n  FOREIGN KEY (`sensor_id`) REFERENCES `sensors`(`sensor_id`) ON DELETE CASCADE\n) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'ADCセンサー設定テーブル';\n\nALTER DATABASE iotkit CHARACTER SET utf8mb4;\n\nINSERT INTO\n  `mqtt_brokers`(`broker`, `port`, `username`, `password`)\nVALUES\n  ('localhost', 1883, 'iotkit', 'iotkit');\n\nINSERT INTO\n  `mail_servers`(`smtp_host`, `smtp_port`, `from`)\nVALUES\n  ('localhost', 25, '\"IoT導入支援キット\"<iotkit@fitc.pref.fukuoka.jp>');\n\nINSERT INTO\n  `sensor_types`(`sensor_type_id`, `sensor_type_text`, `measurement`)\nVALUES\n  (257, '接点入力', 'gpio_input'),\n  (258, '接点出力', 'gpio_output'),    \n  (259, 'ADC', 'voltage'),\n  (260, '測距', 'distance'),\n  (261, '熱電対', 'temperature'),\n  (262, '加速度', 'acceleration'),\n  (263, '差圧', 'pressure'),\n  (264, '照度', 'illuminance'),\n  (289, '照度', 'illuminance_jig'),\n  (290, '加速度', 'acceleration_jig'),\n  (291, '温湿度', 'environment_jig'),\n  (292, '気圧', 'atmospheric_jig'),\n  (293, '測距', 'distance_jig'),\n  -- (294, '接点入力', 'contact_input_jig'),\n  (296, '接点出力', 'contact_output_jig');\n\nINSERT INTO\n  `sensor_channels`(`sensor_type_id`, `channel`, `channel_name`, `channel_index`, `unit`, `fraction`, \n  `hysteresis_min`,`hysteresis_max`, `hysteresis_step`, `hysteresis_default`, `offset_range`)\nVALUES\n  (257, '', '', 0, '', 0, 0.5, 0.5, 0, 0.5, 0),\n  (258, '', '', 0, '', 0, 0.5, 0.5, 0, 0.5, 0),\n  (259, 'CH1', '電圧', 0, 'mV', 0, -2000, 2000, 10, 100, 500),\n  (259, 'CH2', '電圧', 1, 'mV', 0, -2000, 2000, 10, 100, 500),\n  (260, '', '距離', 0, 'mm', 0, 0, 2000, 10, 500, 500),\n  (261, '', '温度', 0, '℃', 1, -50, 2000, 1, 20, 10),\n  (262, 'X', '加速度', 0, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (262, 'Y', '加速度', 1, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (262, 'Z', '加速度', 2, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (262, 'COMP', '加速度', 3, 'G', 1, 0, 6.5, 0.5, 0, 2),\n  (263, '', '差圧', 0, 'Pa', 1, -500, 500, 10, 0, 100),\n  (264, '', '照度', 0, 'lux', 0, 40, 83865, 100, 500, 500),\n  (289, '', '照度', 0, 'lux', 0, 40, 83865, 100, 500, 500),\n  (290, 'X', '加速度', 0, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (290, 'Y', '加速度', 1, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (290, 'Z', '加速度', 2, 'G', 1, -6.5, 6.5, 0.5, 0, 2),\n  (290, 'COMP', '加速度', 3, 'G', 1, 0, 6.5, 0.5, 0, 2),\n  (291, '温度', '温度', 0, '℃', 1, -40, 125, 1, 20, 10),\n  (291, '湿度', '湿度', 1, '%', 1, 0, 100, 1, 20, 10),\n  (292, '', '気圧', 0, 'hPa', 0, 260, 1260, 10, 1000, 20),\n  (293, '', '距離', 0, 'mm', 0, 40, 1300, 10, 500, 500),\n  -- (294, 'CH1', '', '', 0, 0.5, 0.5, 0, 0.5, 0),\n  -- (294, 'CH2', '', '', 0, 0.5, 0.5, 0, 0.5, 0),\n  (296, 'CH1', '', 0, '', 0, 0.5, 0.5, 0, 0.5, 0),\n  (296, 'CH2', '', 1, '', 0, 0.5, 0.5, 0, 0.5, 0);\n",
        "output": "str",
        "x": 780,
        "y": 260,
        "wires": [
            [
                "374d6f9f98bb93c1"
            ]
        ]
    },
    {
        "id": "c078f9733f6f554b",
        "type": "link out",
        "z": "2d4457c90808f33a",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "0c547ba84d1793ff"
        ],
        "x": 895,
        "y": 980,
        "wires": []
    },
    {
        "id": "588a494eefc6953d",
        "type": "delay",
        "z": "2d4457c90808f33a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 780,
        "wires": [
            [
                "cf328dcd54c9fced"
            ]
        ]
    },
    {
        "id": "d593f4ba540f3d10",
        "type": "delay",
        "z": "2d4457c90808f33a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 860,
        "wires": [
            [
                "7e067f6234860cf3"
            ]
        ]
    },
    {
        "id": "233fde4f7d202eae",
        "type": "delay",
        "z": "2d4457c90808f33a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 940,
        "wires": [
            [
                "920aeb585d2e2689"
            ]
        ]
    },
    {
        "id": "75ea88deb7e82bd7",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$moment($millis()).format('YYYY/MM/DD HH:mm:ss')",
        "payloadType": "jsonata",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "7f4a2333f1a676aa"
            ]
        ]
    },
    {
        "id": "50b41fa35d233d23",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "システム時刻表示",
        "info": "",
        "x": 150,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7f4a2333f1a676aa",
        "type": "ui_text",
        "z": "2d4457c90808f33a",
        "group": "a7e034d039814d03",
        "order": 1,
        "width": "6",
        "height": 1,
        "name": "",
        "label": "システム時刻",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 300,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e59a24ec.08da18",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "時刻の同期に失敗しました。",
        "name": "エラーダイアログ",
        "x": 690,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e86630.aa2df8",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "リターンコード確認",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 700,
        "y": 1240,
        "wires": [
            [
                "80d258fe09d8a5f2"
            ]
        ]
    },
    {
        "id": "32abc93b.1d4126",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "時刻同期",
        "info": "",
        "x": 120,
        "y": 1160,
        "wires": []
    },
    {
        "id": "80d258fe09d8a5f2",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "メッセージ設定",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "時刻の同期に成功しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 1240,
        "wires": [
            [
                "23c53682.a3894a"
            ]
        ]
    },
    {
        "id": "23c53682.a3894a",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "OKダイアログ",
        "x": 1120,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "f12a3dc45d27e17d",
        "type": "ui_template",
        "z": "2d4457c90808f33a",
        "group": "a7e034d039814d03",
        "name": "時刻同期",
        "order": 1,
        "width": "6",
        "height": 1,
        "format": "<md-button ng-click=\"syncDatetime()\" style=\"height: 48px;\">\n    <ui-icon icon=\"sync\" class=\"white-icon\"></ui-icon>\n    時刻の同期\n    <md-tooltip>システムの時刻をローカル時刻に同期させます</md-tooltip>\n</md-button>\n<script>\n    (function(scope) {\n        scope.syncDatetime = function() {\n            const now = moment();\n            const date = now.format('YYYY/MM/DD HH:mm:ss');\n                        scope.send({payload: date});\n        };\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 1200,
        "wires": [
            [
                "56a571b98c57a142"
            ]
        ]
    },
    {
        "id": "c8956818c1b5a5bd",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "sudo date",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "時刻設定実行",
        "x": 460,
        "y": 1200,
        "wires": [
            [],
            [
                "e59a24ec.08da18"
            ],
            [
                "e4e86630.aa2df8"
            ]
        ]
    },
    {
        "id": "56a571b98c57a142",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "引数設定",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"--set='\"&payload&\"'\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 1200,
        "wires": [
            [
                "c8956818c1b5a5bd"
            ]
        ]
    },
    {
        "id": "b1f1c72c825ddbb5",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1380,
        "wires": [
            [
                "b647701c8e1b6ca8"
            ]
        ]
    },
    {
        "id": "20cc098e2456bb09",
        "type": "ui_ui_control",
        "z": "2d4457c90808f33a",
        "name": "",
        "events": "connect",
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "9272badf2a22d7b9"
            ]
        ]
    },
    {
        "id": "24503f26c8985964",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 810,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "b647701c8e1b6ca8",
        "type": "exec",
        "z": "2d4457c90808f33a",
        "command": "df | grep \"/dev/mmcblk0p2\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "使用容量取得",
        "x": 300,
        "y": 1380,
        "wires": [
            [
                "8faf82095c9a4135"
            ],
            [],
            []
        ]
    },
    {
        "id": "8faf82095c9a4135",
        "type": "function",
        "z": "2d4457c90808f33a",
        "name": "空き容量保持",
        "func": "const usage = msg.payload.split(' ').filter(x => x)[4];\nconst freeSpace = 100 - parseInt(usage);\nglobal.set('freeSpace', freeSpace);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1380,
        "wires": []
    },
    {
        "id": "1c8d59187e2a1675",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "",
        "property": "freeSpace",
        "propertyType": "global",
        "rules": [
            {
                "t": "lte",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "10",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1480,
        "wires": [
            [
                "394c130a3e4e5489"
            ],
            [
                "7beca57b7a87e677"
            ]
        ]
    },
    {
        "id": "7beca57b7a87e677",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'空き容量は残り'&$globalContext('freeSpace')&'%です。'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "警告",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1500,
        "wires": [
            [
                "24503f26c8985964"
            ]
        ]
    },
    {
        "id": "9272badf2a22d7b9",
        "type": "delay",
        "z": "2d4457c90808f33a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1500,
        "wires": [
            [
                "1c8d59187e2a1675"
            ]
        ]
    },
    {
        "id": "394c130a3e4e5489",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'空き容量は残り'&$globalContext('freeSpace')&'%です。センサーデータの保存を停止します。'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "エラー",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1460,
        "wires": [
            [
                "24503f26c8985964"
            ]
        ]
    },
    {
        "id": "d79de7eb7b15c4c4",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "ストレージ容量関連",
        "info": "",
        "x": 150,
        "y": 1320,
        "wires": []
    },
    {
        "id": "618f3dbb4480e1cb",
        "type": "inject",
        "z": "2d4457c90808f33a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "1c8d59187e2a1675"
            ]
        ]
    },
    {
        "id": "5030cffc044cd97e",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "シャットダウン等",
        "info": "",
        "x": 150,
        "y": 720,
        "wires": []
    },
    {
        "id": "8dde5a17482359da",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "Swagger",
        "info": "",
        "x": 500,
        "y": 520,
        "wires": []
    },
    {
        "id": "f64d12aeea45e04f",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "カメラ",
        "info": "",
        "x": 110,
        "y": 320,
        "wires": []
    },
    {
        "id": "c8cbe2d30bc82663",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "共通処理",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "09b635b96f872fb1",
        "type": "comment",
        "z": "2d4457c90808f33a",
        "name": "テーブル初期化",
        "info": "",
        "x": 140,
        "y": 180,
        "wires": []
    },
    {
        "id": "08decbffbc0b9d84",
        "type": "ui_button",
        "z": "2d4457c90808f33a",
        "name": "",
        "group": "8cadb8edc73c6757",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "初期化",
        "tooltip": "データベースを初期化します",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "clear",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "31a8120ff62b05f9"
            ]
        ]
    },
    {
        "id": "31a8120ff62b05f9",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "確認",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "データベースを初期化します。よろしいですか？",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "03da7d7801da80c8"
            ]
        ]
    },
    {
        "id": "03da7d7801da80c8",
        "type": "ui_toast",
        "z": "2d4457c90808f33a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "4cb90c3099f1b80a"
            ]
        ]
    },
    {
        "id": "4cb90c3099f1b80a",
        "type": "switch",
        "z": "2d4457c90808f33a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "1eaf1382a85c030d"
            ]
        ]
    },
    {
        "id": "7af6a27771cd284e",
        "type": "link out",
        "z": "2d4457c90808f33a",
        "name": "Init Database",
        "mode": "link",
        "links": [
            "45f759e61960c650",
            "4d7ae662ef384d73",
            "54b15303cf8f8f76",
            "8bd974c084e213eb",
            "e934ff1f371bba52"
        ],
        "x": 1115,
        "y": 260,
        "wires": []
    },
    {
        "id": "dd91966b409215d8",
        "type": "http request",
        "z": "2d4457c90808f33a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8086/api/v2/delete?org=fitc&bucket=iotkit",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Token influxdb-iotkit-secret-token"
            }
        ],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "29e53b6df11e99a7"
            ]
        ]
    },
    {
        "id": "6404627c7dc65a16",
        "type": "split",
        "z": "2d4457c90808f33a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 990,
        "y": 220,
        "wires": [
            [
                "9b71705fc5004b54"
            ]
        ]
    },
    {
        "id": "9b71705fc5004b54",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"start\": \"2000-01-01T00:00:00Z\",\t    \"stop\": \"2099-12-31T23:59:59Z\",\t    \"predicate\": \"_measurement=\\\"\"&payload&\"\\\"\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "dd91966b409215d8"
            ]
        ]
    },
    {
        "id": "29e53b6df11e99a7",
        "type": "join",
        "z": "2d4457c90808f33a",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "fb242e998a4616d4"
            ]
        ]
    },
    {
        "id": "9aa92c48a7bd1e89",
        "type": "change",
        "z": "2d4457c90808f33a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "sensors",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "1eaf1382a85c030d",
        "type": "function",
        "z": "2d4457c90808f33a",
        "name": "measurement抽出",
        "func": "const sensorTypes = global.get('sensorTypes') || {};\n\nmsg.payload = Object.values(sensorTypes)\n    .map(s => s.measurement)\n    .flatMap(m => [m, `${m}_count`]);\n\nmsg.payload.push('spectrogram');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            [
                "6404627c7dc65a16"
            ]
        ]
    }
]